#!/usr/bin/env python3.6
import os
import glob
import re
import shutil
import sqlite3
import sys
from datetime import datetime
from collections import defaultdict
# from dateutil.parser import parse as du_parse


OUT_DIR = "./out"

DB_PATH = "result.sqlite3"


def output_line(line, filename):
    file_path = os.path.join(OUT_DIR, filename + ".txt")
    with open(file_path, 'ab') as f:
        f.write(line)


def main():
    log_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "data", "log"))
    log_files = glob.glob(os.path.join(log_dir, "*.log"))
    log_files.sort()


    if os.path.exists(OUT_DIR):
        shutil.rmtree(OUT_DIR)    
    os.mkdir(OUT_DIR)

    if os.path.exists(DB_PATH):
        os.unlink(DB_PATH)

    conn = sqlite3.connect(DB_PATH)
    curs = conn.cursor()

    curs.executescript("""
        CREATE TABLE result (
            player_name TEXT NOT NULL,
            event_type TEXT NOT NULL,
            value TEXT
        );""")

    deletes = defaultdict(int)
    creates = defaultdict(int)


    for log_file in log_files:
        print("Processing " + log_file)
        with open(log_file, "rb") as f:
            for line in f:
                m = re.search(rb":: ([a-zA-Z]+) bought (.+) for \d+qp", line)
                if m:
                    player = m.group(1).decode()
                    qeq = m.group(2).decode()
                    output_line(line, player)

                    curs.execute(
                        "INSERT INTO result VALUES (?,?,?);", (
                            player, "quest_buy", qeq))
                    continue

                m = re.search(rb":: ([a-zA-Z]+) sold (.+) for \d+qp", line)
                if m:
                    player = m.group(1).decode()
                    qeq = m.group(2).decode()
                    output_line(line, player)

                    curs.execute(
                        "INSERT INTO result VALUES (?,?,?);", (
                        player, "quest_sell", qeq))
                    continue

                
                m = re.search(rb":: ([a-zA-Z]+) has deleted", line)
                if m:
                    player = m.group(1).decode()
                    output_line(line, m.group(1).decode())
                    
                    curs.execute(
                        "INSERT INTO result VALUES (?,?,?);", (
                        player, "delete", None))
                    continue
                
                m = re.search(rb":: ([a-zA-Z]+)@\d+\.\d+\.\d+\.\d+ new player", line)
                if m:
                    player = m.group(1).decode()
                    output_line(line, m.group(1).decode())

                    curs.execute(
                        "INSERT INTO result VALUES (?,?,?);", (
                        player, "create", None))
                    continue
        conn.commit()


    curs.close()
    conn.close()


if __name__ == "__main__":
    main()

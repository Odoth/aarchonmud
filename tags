!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.4	//
AAS	alchemy.c	23;"	d	file:
AEDIT	olc_act.c	/^AEDIT( aedit_age )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_builder )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_clone )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_create )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_credits )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_file )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_lvnum )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_move )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_name )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_purge )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_remort )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_reset )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_reset_time )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_scrap )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_security )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_show )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_uvnum )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_vnum )$/;"	f
AEDIT	olc_act.c	91;"	d	file:
AIM_FOOT	fight2.c	1200;"	d	file:
AIM_HAND	fight2.c	1199;"	d	file:
AIM_HEAD	fight2.c	1198;"	d	file:
AIM_NORMAL	fight2.c	1197;"	d	file:
ALTER_COLOUR	act_comm.c	51;"	d	file:
ALT_FLAGVALUE_SET	olc_act.c	49;"	d	file:
ALT_FLAGVALUE_TOGGLE	olc_act.c	51;"	d	file:
BEGIN_BLOCK	mob_prog.c	996;"	d	file:
BIT_IN_RANGE	tflag.c	16;"	d	file:
BOARD_BUILDER	board.c	115;"	d	file:
BOARD_NOACCESS	board.c	113;"	d	file:
BOARD_NONE	board.c	112;"	d	file:
BOARD_NOTFOUND	board.c	114;"	d	file:
BOARD_PKILL	board.c	116;"	d	file:
CD	act_obj.c	54;"	d	file:
CD	act_obj.c	69;"	d	file:
CH	comm.c	3268;"	d	file:
CHK_ACT	mob_prog.c	91;"	d	file:
CHK_AFFECTED	mob_prog.c	90;"	d	file:
CHK_ALIGN	mob_prog.c	109;"	d	file:
CHK_CARRIES	mob_prog.c	94;"	d	file:
CHK_CLAN	mob_prog.c	100;"	d	file:
CHK_CLANRANK	mob_prog.c	117;"	d	file:
CHK_CLASS	mob_prog.c	102;"	d	file:
CHK_CLONES	mob_prog.c	73;"	d	file:
CHK_EXISTS	mob_prog.c	89;"	d	file:
CHK_GRPSIZE	mob_prog.c	116;"	d	file:
CHK_HAS	mob_prog.c	96;"	d	file:
CHK_HASTARGET	mob_prog.c	87;"	d	file:
CHK_HOUR	mob_prog.c	75;"	d	file:
CHK_HPCNT	mob_prog.c	105;"	d	file:
CHK_IMM	mob_prog.c	93;"	d	file:
CHK_ISACTIVE	mob_prog.c	84;"	d	file:
CHK_ISCHARM	mob_prog.c	82;"	d	file:
CHK_ISDELAY	mob_prog.c	85;"	d	file:
CHK_ISEVIL	mob_prog.c	79;"	d	file:
CHK_ISFOLLOW	mob_prog.c	83;"	d	file:
CHK_ISGOOD	mob_prog.c	78;"	d	file:
CHK_ISIMMORT	mob_prog.c	81;"	d	file:
CHK_ISNEUTRAL	mob_prog.c	80;"	d	file:
CHK_ISNPC	mob_prog.c	77;"	d	file:
CHK_ISPC	mob_prog.c	76;"	d	file:
CHK_ISTARGET	mob_prog.c	88;"	d	file:
CHK_ISVISIBLE	mob_prog.c	86;"	d	file:
CHK_LEVEL	mob_prog.c	108;"	d	file:
CHK_MOBEXISTS	mob_prog.c	68;"	d	file:
CHK_MOBHERE	mob_prog.c	66;"	d	file:
CHK_MOBS	mob_prog.c	72;"	d	file:
CHK_MONEY	mob_prog.c	110;"	d	file:
CHK_NAME	mob_prog.c	98;"	d	file:
CHK_OBJEXISTS	mob_prog.c	69;"	d	file:
CHK_OBJHERE	mob_prog.c	67;"	d	file:
CHK_OBJTYPE	mob_prog.c	103;"	d	file:
CHK_OBJVAL0	mob_prog.c	111;"	d	file:
CHK_OBJVAL1	mob_prog.c	112;"	d	file:
CHK_OBJVAL2	mob_prog.c	113;"	d	file:
CHK_OBJVAL3	mob_prog.c	114;"	d	file:
CHK_OBJVAL4	mob_prog.c	115;"	d	file:
CHK_OFF	mob_prog.c	92;"	d	file:
CHK_ORDER	mob_prog.c	74;"	d	file:
CHK_PEOPLE	mob_prog.c	70;"	d	file:
CHK_PLAYERS	mob_prog.c	71;"	d	file:
CHK_POS	mob_prog.c	99;"	d	file:
CHK_QSTATUS	mob_prog.c	118;"	d	file:
CHK_RACE	mob_prog.c	101;"	d	file:
CHK_RAND	mob_prog.c	65;"	d	file:
CHK_RELIGION	mob_prog.c	133;"	d	file:
CHK_RES	mob_prog.c	120;"	d	file:
CHK_ROOM	mob_prog.c	106;"	d	file:
CHK_SEX	mob_prog.c	107;"	d	file:
CHK_SKILLED	mob_prog.c	134;"	d	file:
CHK_STATAGI	mob_prog.c	125;"	d	file:
CHK_STATCHA	mob_prog.c	130;"	d	file:
CHK_STATCON	mob_prog.c	123;"	d	file:
CHK_STATDEX	mob_prog.c	126;"	d	file:
CHK_STATDIS	mob_prog.c	129;"	d	file:
CHK_STATINT	mob_prog.c	127;"	d	file:
CHK_STATLUC	mob_prog.c	131;"	d	file:
CHK_STATSTR	mob_prog.c	122;"	d	file:
CHK_STATVIT	mob_prog.c	124;"	d	file:
CHK_STATWIS	mob_prog.c	128;"	d	file:
CHK_USES	mob_prog.c	97;"	d	file:
CHK_VNUM	mob_prog.c	104;"	d	file:
CHK_VULN	mob_prog.c	119;"	d	file:
CHK_WEARS	mob_prog.c	95;"	d	file:
CLOSE_DESCRIPTOR	ftp.c	28;"	d	file:
COPYOVER_FILE	comm.c	3271;"	d	file:
CURR_PFILE_VERSION	bsave.c	114;"	d	file:
DIF	olc_save.c	37;"	d	file:
DIGIT_VALUE	tflag.c	197;"	d	file:
DISGUISE_MAX_VNUM	act_info.c	4275;"	d	file:
DISGUISE_MIN_VNUM	act_info.c	4274;"	d	file:
EFFECT_FUN	breath.c	/^typedef void EFFECT_FUN ( void *vo, int level, int dam, int target );$/;"	t	file:
EMEM_SIZE	buffer.c	37;"	d	file:
END_BLOCK	mob_prog.c	998;"	d	file:
END_MARKER	interp.c	46;"	d	file:
EVAL_EQ	mob_prog.c	140;"	d	file:
EVAL_GE	mob_prog.c	141;"	d	file:
EVAL_GT	mob_prog.c	143;"	d	file:
EVAL_LE	mob_prog.c	142;"	d	file:
EVAL_LT	mob_prog.c	144;"	d	file:
EVAL_NE	mob_prog.c	145;"	d	file:
EXE_FILE	comm.c	3275;"	d	file:
EXE_FILE	comm.c	3277;"	d	file:
FLAG_READ_SET	db2.c	52;"	d	file:
FNDELAY	comm.c	1244;"	d	file:
FNDELAY	comm.c	1245;"	d	file:
FNDELAY	comm.c	1248;"	d	file:
GETC	tflag.c	200;"	d	file:
GETC	tflag.c	202;"	d	file:
GOD_ACTION	religion.c	/^typedef struct god_action GOD_ACTION;$/;"	t	file:
GOD_FUN	religion.c	/^typedef bool GOD_FUN( CHAR_DATA *ch, CHAR_DATA *victim );$/;"	t	file:
GO_OK	hunt.c	91;"	d	file:
GO_OK_SMARTER	hunt.c	92;"	d	file:
GREP_DATA	grep.c	/^typedef struct grep_data GREP_DATA;$/;"	t	file:
GREP_MOB	grep.c	70;"	d	file:
GREP_MOB_ACT	grep.c	557;"	d	file:
GREP_MOB_AFF	grep.c	552;"	d	file:
GREP_MOB_INGAME	grep.c	555;"	d	file:
GREP_MOB_LEVEL	grep.c	554;"	d	file:
GREP_MOB_MPROG	grep.c	556;"	d	file:
GREP_MOB_NAME	grep.c	549;"	d	file:
GREP_MOB_OFF	grep.c	553;"	d	file:
GREP_MOB_SPEC	grep.c	551;"	d	file:
GREP_MOB_TRIGGER	grep.c	558;"	d	file:
GREP_MOB_WEALTH	grep.c	550;"	d	file:
GREP_OBJ	grep.c	69;"	d	file:
GREP_OBJ_ADDFLAG	grep.c	190;"	d	file:
GREP_OBJ_AFF	grep.c	198;"	d	file:
GREP_OBJ_COST	grep.c	188;"	d	file:
GREP_OBJ_EXTRA	grep.c	199;"	d	file:
GREP_OBJ_HEAL	grep.c	197;"	d	file:
GREP_OBJ_INGAME	grep.c	195;"	d	file:
GREP_OBJ_LEVEL	grep.c	192;"	d	file:
GREP_OBJ_NAME	grep.c	186;"	d	file:
GREP_OBJ_OPS	grep.c	189;"	d	file:
GREP_OBJ_RATING	grep.c	196;"	d	file:
GREP_OBJ_SPEC	grep.c	191;"	d	file:
GREP_OBJ_SPELL	grep.c	193;"	d	file:
GREP_OBJ_TYPE	grep.c	187;"	d	file:
GREP_OBJ_WEAR	grep.c	194;"	d	file:
GREP_ROOM	grep.c	71;"	d	file:
GREP_ROOM_FLAG	grep.c	832;"	d	file:
GREP_ROOM_HEAL	grep.c	831;"	d	file:
GREP_ROOM_INGAME	grep.c	833;"	d	file:
GREP_ROOM_SECTOR	grep.c	834;"	d	file:
HASH_KEY	hunt.c	68;"	d	file:
HEDIT	olc_act.c	/^HEDIT (hedit_create)$/;"	f
HEDIT	olc_act.c	/^HEDIT( hedit_delete)$/;"	f
HEDIT	olc_act.c	/^HEDIT( hedit_desc)$/;"	f
HEDIT	olc_act.c	/^HEDIT( hedit_keywords)$/;"	f
HEDIT	olc_act.c	/^HEDIT( hedit_show)$/;"	f
HEDIT	olc_act.c	/^HEDIT(hedit_level)$/;"	f
HEDIT	olc_act.c	92;"	d	file:
IN_BLOCK	mob_prog.c	997;"	d	file:
IS_BUILDER_HERE	redit-ilab.c	40;"	d	file:
IS_DIGIT	tflag.c	196;"	d	file:
IS_DIR	hunt.c	90;"	d	file:
KEY	auth.c	167;"	d	file:
KEY	auth.c	170;"	d	file:
KEY	bsave.c	1157;"	d	file:
KEY	bsave.c	1160;"	d	file:
KEY	clan.c	30;"	d	file:
KEY	clan.c	33;"	d	file:
KEY	db.c	845;"	d	file:
KEY	db.c	848;"	d	file:
KEY	religion.c	43;"	d	file:
KEY	religion.c	46;"	d	file:
KEYF	bsave.c	1170;"	d	file:
KEYS	bsave.c	1164;"	d	file:
KEYS	bsave.c	1167;"	d	file:
KEYS	religion.c	50;"	d	file:
KEYS	religion.c	53;"	d	file:
LIGHT_BRIGHT	handler.c	3180;"	d	file:
LIGHT_DARK	handler.c	3177;"	d	file:
LIGHT_GLOW	handler.c	3179;"	d	file:
LIGHT_NORMAL	handler.c	3178;"	d	file:
LOAD_COLOUR	bsave.c	109;"	d	file:
LOG_ALWAYS	interp.c	54;"	d	file:
LOG_NEVER	interp.c	55;"	d	file:
LOG_NORMAL	interp.c	53;"	d	file:
LVL_STAT_AC_EXOTIC	olc_act.c	4445;"	d	file:
LVL_STAT_AC_WEAPON	olc_act.c	4444;"	d	file:
LVL_STAT_DAM_DICE_BONUS	olc_act.c	4443;"	d	file:
LVL_STAT_DAM_DICE_NUMBER	olc_act.c	4441;"	d	file:
LVL_STAT_DAM_DICE_TYPE	olc_act.c	4442;"	d	file:
LVL_STAT_HP_DICE_BONUS	olc_act.c	4440;"	d	file:
LVL_STAT_HP_DICE_NUMBER	olc_act.c	4438;"	d	file:
LVL_STAT_HP_DICE_TYPE	olc_act.c	4439;"	d	file:
LVL_STAT_NR	olc_act.c	4446;"	d	file:
MALLOC_DEBUG	comm.c	130;"	d	file:
MAX_ARMOR_SUBTYPES	smith.c	17;"	d	file:
MAX_ARROWS	act_obj.c	4041;"	d	file:
MAX_BUF_INDEX	comm.c	2344;"	d	file:
MAX_CALL_LEVEL	mob_prog.c	999;"	d	file:
MAX_CHAMBER	remort.c	43;"	d	file:
MAX_DAM_TYPE	olc_act.c	5755;"	d	file:
MAX_HERB	alchemy.c	179;"	d	file:
MAX_MATCH	grep.c	182;"	d	file:
MAX_NEST	bsave.c	94;"	d	file:
MAX_NESTED_LEVEL	mob_prog.c	995;"	d	file:
MAX_PERM_BLOCK	db.c	419;"	d	file:
MAX_POSE	act_comm.c	2059;"	d	file:
MAX_PROMPT_LENGTH	act_info.c	1289;"	d	file:
MAX_RATING	olc_act.c	3163;"	d	file:
MAX_STRING	db.c	418;"	d	file:
MAX_TATTOO	tattoo.c	109;"	d	file:
MAX_WEAPON_SUBTYPES	smith.c	16;"	d	file:
MAX_WEAR_LOCATIONS	redit-ilab.c	42;"	d	file:
MEDIT	olc_act.c	/^MEDIT ( medit_addmprog )$/;"	f
MEDIT	olc_act.c	/^MEDIT ( medit_delmprog )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_ac )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_act )          \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_adjust )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_affect )      \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_align )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_create )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_damdice )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_damtype )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_desc )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_form )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_gold )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_group )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_hitdice )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_hitroll )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_imm )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_level )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_long )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_manadice )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_material )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_name )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_off )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_part )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_position )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_race )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_res )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_sex )          \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_shop )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_short )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_show )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_size )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_spec )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_stance )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_vuln )$/;"	f
MEDIT	olc_act.c	90;"	d	file:
MERC	ftp.c	20;"	d	file:
MIL	ftp.c	38;"	d	file:
MOBtrigger	comm.c	/^bool            MOBtrigger = TRUE;  \/* act() switch                 *\/$/;"	v
MPEDIT	olc_mpcode.c	/^MPEDIT (mpedit_create)$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT( mpedit_if )$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT( mpedit_list )$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT( mpedit_mob )$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT(mpedit_code)$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT(mpedit_show)$/;"	f
MPEDIT	olc_mpcode.c	20;"	d	file:
MSL	ftp.c	37;"	d	file:
NDESC_FTP	comm.c	/^typedef enum {NDESC_NORMAL, NDESC_FTP } ndesc_t;$/;"	e	file:
NDESC_NORMAL	comm.c	/^typedef enum {NDESC_NORMAL, NDESC_FTP } ndesc_t;$/;"	e	file:
NLRETURN	act_move.c	1307;"	d	file:
NLRETURN	act_move.c	1466;"	d	file:
NO_BCOPY	hunt.c	30;"	d	file:
NO_BZERO	hunt.c	31;"	d	file:
NO_ID	tattoo.c	20;"	d	file:
NO_LOC	tattoo.c	19;"	d	file:
NO_SHORT_DESC	grep.c	200;"	d	file:
NUL	buffer.c	38;"	d	file:
NUL	ftp.c	33;"	d	file:
NUL	redit-ilab.c	46;"	d	file:
OD	act_obj.c	55;"	d	file:
OD	act_obj.c	68;"	d	file:
OEDIT	olc_act.c	/^OEDIT( oedit_addaffect )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_addapply )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_clan )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_combine )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_condition )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_cost )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_create )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_delaffect )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_ed )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_extra )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_level )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_long )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_material )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_name )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_rank )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_rating )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_short )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_show )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_type )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value0 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value1 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value2 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value3 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value4 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_wear )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_weight )$/;"	f
OEDIT	olc_act.c	89;"	d	file:
OLD_RAND	db.c	34;"	d	file:
PRINT_DIF	olc_save.c	236;"	d	file:
QUEST_ITEM	quest.c	/^typedef struct quest_item QUEST_ITEM;$/;"	t	file:
QUEST_ITEM1	quest.c	25;"	d	file:
QUEST_ITEM10	quest.c	34;"	d	file:
QUEST_ITEM11	quest.c	35;"	d	file:
QUEST_ITEM12	quest.c	36;"	d	file:
QUEST_ITEM13	quest.c	37;"	d	file:
QUEST_ITEM14	quest.c	38;"	d	file:
QUEST_ITEM15	quest.c	39;"	d	file:
QUEST_ITEM2	quest.c	26;"	d	file:
QUEST_ITEM3	quest.c	27;"	d	file:
QUEST_ITEM4	quest.c	28;"	d	file:
QUEST_ITEM5	quest.c	29;"	d	file:
QUEST_ITEM6	quest.c	30;"	d	file:
QUEST_ITEM7	quest.c	31;"	d	file:
QUEST_ITEM8	quest.c	32;"	d	file:
QUEST_ITEM9	quest.c	33;"	d	file:
QUEST_OBJQUEST1	quest.c	166;"	d	file:
QUEST_OBJQUEST2	quest.c	167;"	d	file:
QUEST_OBJQUEST3	quest.c	168;"	d	file:
QUEST_OBJQUEST4	quest.c	169;"	d	file:
QUEST_OBJQUEST5	quest.c	170;"	d	file:
QUEST_STATUS_NONE	quest.c	1140;"	d	file:
R1	remort.c	37;"	d	file:
R2	remort.c	38;"	d	file:
R3	remort.c	39;"	d	file:
R4	remort.c	40;"	d	file:
R5	remort.c	41;"	d	file:
RACEEDIT	olc_act.c	94;"	d	file:
REDIT	olc_act.c	/^REDIT( redit_clan )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_clan_rank )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_create )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_desc )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_down )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_east )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_ed )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_format )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_heal )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mana )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mlist )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mreset )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mshow )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_name )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_north )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_northeast )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_northwest )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_olist )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_oreset )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_oshow )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_owner )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_rlist )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_room )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_sector )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_show )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_south )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_southeast )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_southwest )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_up )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_west )$/;"	f
REDIT	olc_act.c	88;"	d	file:
REMORTEDIT	olc_act.c	96;"	d	file:
REMORT_TABLE	remort.c	/^typedef struct remort_table REMORT_TABLE;$/;"	t	file:
REWARD_EXP	mob_cmds.c	1785;"	d	file:
REWARD_QP	mob_cmds.c	1786;"	d	file:
SAVE_STATE_NOSAVE	simsave.c	25;"	d	file:
SAVE_STATE_SIMSAVE	simsave.c	22;"	d	file:
SAVE_STATE_TEMPCOPY	simsave.c	24;"	d	file:
SAVE_STATE_TEMPSAVE	simsave.c	23;"	d	file:
SEE_CAN	handler.c	3083;"	d	file:
SEE_CANT	handler.c	3082;"	d	file:
SEE_MAY	handler.c	3084;"	d	file:
SET_STR	aclone.c	21;"	d	file:
SFORM	stats.c	1076;"	d	file:
SFORM	stats.c	1087;"	d	file:
SHIFT	vshift.c	30;"	d	file:
SKEY	db.c	850;"	d	file:
SKILLEDIT	olc_act.c	95;"	d	file:
SLOT	const.c	2020;"	d	file:
SOCIAL_FILE	social-edit.c	43;"	d	file:
SOCIAL_FILE	social-edit.c	45;"	d	file:
SONG	song.c	/^SONG(song_cacophony)$/;"	f
SONG	song.c	/^SONG(song_lust_life)$/;"	f
SONG	song.c	/^SONG(song_pied_piper)$/;"	f
SONG	song.c	/^SONG(song_shafts_theme)$/;"	f
SONG	song.c	/^SONG(song_white_noise)$/;"	f
SPELL_COST	healer.c	/^typedef struct spell_cost SPELL_COST;$/;"	t	file:
TATTOO	tattoo.c	17;"	d	file:
TATTOO_DATA	tattoo.c	/^typedef struct tattoo_data TATTOO_DATA;$/;"	t	file:
TATTOO_ID	tattoo.c	18;"	d	file:
VER_EXIT_FLAGS	db.c	435;"	d	file:
VER_EXP_RAISE	bsave.c	119;"	d	file:
VER_FLAG_CHANGE	bsave.c	117;"	d	file:
VER_MONEY_WIPE	bsave.c	118;"	d	file:
VSIZE	tflag.c	17;"	d	file:
WF_SHARP	smith.c	325;"	d	file:
WF_SHARP_VORPAL	smith.c	326;"	d	file:
WORLD_SIZE	hunt.c	67;"	d	file:
WRITE	ftp.c	29;"	d	file:
__attribute	comm.c	147;"	d	file:
__attribute	comm.c	159;"	d	file:
__buffer_new	buffer.c	/^DBUFFER * __buffer_new (int min_size)$/;"	f
__buffer_strcat	buffer.c	/^void __buffer_strcat (DBUFFER *buffer, const char *text)$/;"	f
_hash_enter	hunt.c	/^void _hash_enter(struct hash_header *ht,int key,void *data)$/;"	f
ac	aclone.c	/^	sh_int      ac[4];$/;"	m	struct:mob_index_data	file:
ac_by_level	smith.c	/^int ac_by_level(int level)$/;"	f
ac_type	tables.c	/^const struct flag_type ac_type[] =$/;"	v
acid_effect	effects.c	/^void acid_effect(void *vo, int level, int dam, int target)$/;"	f
acmult	smith.c	/^	int acmult;$/;"	m	struct:armor_subtype	file:
act	aclone.c	/^	tflag        act;$/;"	m	struct:mob_index_data	file:
act	comm.c	/^void act( const char *format, CHAR_DATA *ch, const void *arg1, const void *arg2,$/;"	f
act_bits_name	handler.c	/^char* act_bits_name( tflag flag )$/;"	f
act_flags	tables.c	/^const struct flag_type act_flags[] =$/;"	v
act_gag	comm.c	/^void act_gag(const char *format, CHAR_DATA *ch, const void *arg1, $/;"	f
act_new	comm.c	/^void act_new( const char *format, CHAR_DATA *ch, const void *arg1, $/;"	f
act_new_gag	comm.c	/^void act_new_gag( const char *format, CHAR_DATA *ch, const void *arg1, $/;"	f
act_non_wizi	mob_cmds.c	/^void act_non_wizi(const char *format, CHAR_DATA *ch, $/;"	f
act_see	comm.c	/^void act_see( const char *format, CHAR_DATA *ch, const void *arg1, $/;"	f
act_tell_char	act_comm.c	/^void act_tell_char( CHAR_DATA *ch, CHAR_DATA *victim, char *argument )$/;"	f
active_char	alias.c	/^static CHAR_DATA *active_char = NULL;$/;"	v	file:
add_area_world	aclone.c	/^void add_area_world( AREA_DATA *area )$/;"	f
add_auto_auth	auth.c	/^void add_auto_auth( char *name )$/;"	f
add_buf	recycle.c	/^bool add_buf(BUFFER *buffer, char *string)$/;"	f
add_clanwar_node	clanwar.c	/^void add_clanwar_node(CHAR_DATA *ch, sh_int other_clan, int status)$/;"	f
add_descriptor	comm.c	/^void add_descriptor( DESCRIPTOR_DATA *d )$/;"	f
add_enchant_affect	enchant.c	/^void add_enchant_affect( OBJ_DATA *obj, AFFECT_DATA *aff )$/;"	f
add_follower	act_comm.c	/^void add_follower( CHAR_DATA *ch, CHAR_DATA *master )$/;"	f
add_money	handler.c	/^void add_money( CHAR_DATA *ch, int gold, int silver, CHAR_DATA *source )$/;"	f
add_religion	religion.c	/^void add_religion( RELIGION_DATA *religion )$/;"	f
add_reset	olc.c	/^void add_reset( ROOM_INDEX_DATA *room, RESET_DATA *pReset, int index )$/;"	f
add_room_world	aclone.c	/^void add_room_world( ROOM_INDEX_DATA *room )$/;"	f
add_tattoo	tattoo.c	/^void add_tattoo( tattoo_list tl, int loc, int ID )$/;"	f
add_to_auth	auth.c	/^void add_to_auth( CHAR_DATA *ch )$/;"	f
add_to_who_list	nanny.c	/^void add_to_who_list( DESCRIPTOR_DATA *d )$/;"	f
add_war_kills	warfare.c	/^void add_war_kills( CHAR_DATA *ch )$/;"	f
adjust_align_change	religion.c	/^double adjust_align_change( CHAR_DATA *ch, double change )$/;"	f
adjust_damage	fight.c	/^int adjust_damage(CHAR_DATA *ch, CHAR_DATA *victim, int dam, int dam_type)$/;"	f
adjust_gain	update.c	/^int adjust_gain( CHAR_DATA *ch, int gain )$/;"	f
adjust_spell_damage	magic.c	/^int adjust_spell_damage( int dam, CHAR_DATA *ch )$/;"	f
advance_level	update.c	/^void advance_level( CHAR_DATA *ch, bool hide )$/;"	f
aedit	olc.c	/^void aedit( CHAR_DATA *ch, char *argument )$/;"	f
aedit_table	olc.c	/^const struct olc_cmd_type aedit_table[] =$/;"	v
affect_bit_name	handler.c	/^char* affect_bit_name( int flag )$/;"	f
affect_bits_name	handler.c	/^char* affect_bits_name( tflag flag )$/;"	f
affect_check	handler.c	/^void affect_check(CHAR_DATA *ch,int where,int vector)$/;"	f
affect_field	aclone.c	/^        tflag       affect_field;$/;"	m	struct:mob_index_data	file:
affect_find	handler.c	/^AFFECT_DATA *affect_find(AFFECT_DATA *paf, int sn)$/;"	f
affect_find_flag	handler.c	/^AFFECT_DATA *affect_find_flag(AFFECT_DATA *paf, int flag)$/;"	f
affect_flags	tables.c	/^const struct flag_type affect_flags[] =$/;"	v
affect_free	recycle.c	/^AFFECT_DATA *affect_free;$/;"	v
affect_join	handler.c	/^void affect_join( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_level	handler.c	/^int affect_level( CHAR_DATA *ch, int sn )$/;"	f
affect_loc_name	handler.c	/^char *affect_loc_name( int location )$/;"	f
affect_modify	handler.c	/^void affect_modify( CHAR_DATA *ch, AFFECT_DATA *paf, bool fAdd )$/;"	f
affect_modify_new	handler.c	/^void affect_modify_new( CHAR_DATA *ch, AFFECT_DATA *paf, bool fAdd, bool drop )$/;"	f
affect_remove	handler.c	/^void affect_remove( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_remove_obj	handler.c	/^void affect_remove_obj( OBJ_DATA *obj, AFFECT_DATA *paf)$/;"	f
affect_spellup_mob	db.c	/^void affect_spellup_mob( CHAR_DATA *mob )$/;"	f
affect_strip	handler.c	/^void affect_strip( CHAR_DATA *ch, int sn )$/;"	f
affect_strip_flag	handler.c	/^void affect_strip_flag( CHAR_DATA *ch, int flag )$/;"	f
affect_strip_obj	handler.c	/^void affect_strip_obj( OBJ_DATA *obj, int sn )$/;"	f
affect_strip_offensive	handler.c	/^void affect_strip_offensive( CHAR_DATA *ch )$/;"	f
affect_to_char	handler.c	/^void affect_to_char( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_to_obj	handler.c	/^void affect_to_obj(OBJ_DATA *obj, AFFECT_DATA *paf)$/;"	f
affect_update	update.c	/^void affect_update( CHAR_DATA *ch )$/;"	f
affectify	smith.c	/^void affectify(OBJ_DATA *obj)$/;"	f
affmult	smith.c	/^int affmult(OBJ_DATA *obj)$/;"	f
aggr_update	update.c	/^void aggr_update( void )$/;"	f
agi_app_defensive	stats.c	/^int agi_app_defensive(int x)$/;"	f
aim_targets	fight2.c	/^const char* aim_targets[] = { "head", "hand", "foot", "" };$/;"	v
alignment	aclone.c	/^	sh_int      alignment;$/;"	m	struct:mob_index_data	file:
all_colour	handler.c	/^void all_colour( CHAR_DATA *ch, char *argument )$/;"	f
all_religions	religion.c	/^void all_religions( RELIGION_FUN *rel_fun )$/;"	f
alloc_mem	db.c	/^void *alloc_mem( int sMem )$/;"	f
alloc_perm	db.c	/^void *alloc_perm( int sMem )$/;"	f
alt_flagvalue	olc_act.c	/^long alt_flagvalue( const struct flag_type *flag_table, char *argument )$/;"	f
alt_flagvalue_toggle	olc_act.c	/^long alt_flagvalue_toggle( long old_flag, const struct flag_type *flag_table,$/;"	f
ancestor	hunt.c	/^    int   ancestor;$/;"	m	struct:nodes	file:
anti_spam_interpret	alias.c	/^void anti_spam_interpret( CHAR_DATA *ch, char *argument )$/;"	f
append_file	db.c	/^void append_file( CHAR_DATA *ch, char *file, char *str )$/;"	f
append_note	board.c	/^static void append_note (FILE *fp, NOTE_DATA *note)$/;"	f	file:
apply_ac	handler.c	/^int apply_ac( OBJ_DATA *obj, int iWear, int type )$/;"	f
apply_flags	tables.c	/^const struct flag_type apply_flags[] =$/;"	v
apply_types	tables.c	/^const   struct  flag_type   apply_types []  =$/;"	v
arcane_cost	healer.c	/^static SPELL_COST arcane_cost[] =$/;"	v	file:
archive_note	board.c	/^static void archive_note (BOARD_DATA *board, NOTE_DATA *pnote)$/;"	f	file:
area_first	db.c	/^AREA_DATA *     area_first;$/;"	v
area_flags	tables.c	/^const struct flag_type area_flags[] =$/;"	v
area_free	mem.c	/^AREA_DATA		*	area_free;$/;"	v
area_last	db.c	/^AREA_DATA *     area_last;$/;"	v
area_update	db.c	/^void area_update( bool all )$/;"	f
area_version	db.c	/^static int area_version = 0;$/;"	v	file:
arm_npc	db.c	/^void arm_npc( CHAR_DATA *mob )$/;"	f
armor_smith_table	smith.c	/^const struct armor_smith_type armor_smith_table[]=$/;"	v
armor_smith_type	smith.c	/^struct armor_smith_type$/;"	s	file:
armor_subtype	smith.c	/^struct armor_subtype$/;"	s	file:
assign_area_vnum	db.c	/^void assign_area_vnum( int vnum )$/;"	f
assign_religion_war_opp	religion.c	/^void assign_religion_war_opp()$/;"	f
attack_lookup	handler.c	/^int attack_lookup  (const char *name)$/;"	f
attack_table	const.c	/^const   struct attack_type  attack_table    [MAX_DAMAGE_MESSAGE]    =$/;"	v
aura_damage	fight.c	/^void aura_damage( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield, int dam )$/;"	f
auth_update	auth.c	/^void auth_update( void ) $/;"	f
availability	remort.c	/^    int availability;$/;"	m	struct:remort_chamber	file:
average_mob_hp	olc_act.c	/^int average_mob_hp( int level )$/;"	f
average_roll	olc_act.c	/^int average_roll( int nr, int type, int bonus )$/;"	f
average_weapon_dam	grep.c	/^int average_weapon_dam( OBJ_INDEX_DATA *obj )$/;"	f
backstab_char	fight2.c	/^void backstab_char( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
ban_free	recycle.c	/^BAN_DATA *ban_free;$/;"	v
ban_list	ban.c	/^BAN_DATA *ban_list;$/;"	v
ban_site	ban.c	/^void ban_site(CHAR_DATA *ch, char *argument, bool fPerm)$/;"	f
bashmod	smith.c	/^	int bashmod;$/;"	m	struct:armor_subtype	file:
basic_dam_name	olc_act.c	/^char* basic_dam_name( int dam_type )$/;"	f
basic_dam_names	olc_act.c	/^static const char* basic_dam_names[MAX_DAM_TYPE] = $/;"	v	file:
battle_prompt	comm.c	/^void battle_prompt( DESCRIPTOR_DATA *d )$/;"	f
bcopy	hunt.c	/^void bcopy(register char *s1,register char *s2,int len)$/;"	f
behead	fight2.c	/^void behead(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
beof	buffer_util.c	/^bool beof( RBUFFER *rbuf )$/;"	f
bgetc	buffer_util.c	/^char bgetc( RBUFFER *rbuf )$/;"	f
bit_list_to_tflag	tflag.c	/^void bit_list_to_tflag( tflag f )$/;"	f
bitvector_type	tables.c	/^const   struct  bit_type    bitvector_type  []  =$/;"	v
blacksmith_material_table	smith.c	/^const struct blacksmith_material_type blacksmith_material_table[]=$/;"	v
blacksmith_material_type	smith.c	/^struct blacksmith_material_type$/;"	s	file:
blind_penalty	fight.c	/^bool blind_penalty( CHAR_DATA *ch )$/;"	f
board_lookup	board.c	/^int board_lookup (const char *name)$/;"	f
board_number	board.c	/^int board_number (const BOARD_DATA *board)$/;"	f
boards	board.c	/^BOARD_DATA boards[MAX_BOARD] =$/;"	v
bonus	smith.c	/^	int bonus;$/;"	m	struct:workmanship_type	file:
boot_db	db.c	/^void boot_db()$/;"	f
bootup_temp_clean_done	simsave.c	/^static bool bootup_temp_clean_done = FALSE;$/;"	v	file:
bounty_table	db.c	/^SORT_TABLE *    bounty_table;$/;"	v
bprintf	buffer.c	/^int bprintf (DBUFFER *buffer, char *fmt, ...)$/;"	f
bread_char	bsave.c	/^void bread_char( CHAR_DATA *ch, RBUFFER *buf )$/;"	f
bread_flag	db.c	/^long bread_flag( RBUFFER *rbuf )$/;"	f
bread_letter	db.c	/^char bread_letter( RBUFFER *rbuf )$/;"	f
bread_number	db.c	/^int bread_number( RBUFFER *rbuf )$/;"	f
bread_obj	bsave.c	/^void bread_obj( CHAR_DATA *ch, RBUFFER *buf )$/;"	f
bread_pet	bsave.c	/^void bread_pet( CHAR_DATA *ch, RBUFFER *buf )$/;"	f
bread_string	db.c	/^char* bread_string( RBUFFER *rbuf )$/;"	f
bread_string_eol	db.c	/^char* bread_string_eol( RBUFFER *rbuf )$/;"	f
bread_tattoos	tattoo.c	/^void bread_tattoos( RBUFFER *rbuf, tattoo_list tl )$/;"	f
bread_tflag	tflag.c	/^void bread_tflag( RBUFFER *rbuf, tflag f )$/;"	f
bread_to_eol	db.c	/^void bread_to_eol( RBUFFER *rbuf )$/;"	f
bread_word	db.c	/^char* bread_word( RBUFFER *rbuf )$/;"	f
break_connect	nanny.c	/^bool	break_connect ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
buckets	hunt.c	/^    struct hash_link  **buckets;$/;"	m	struct:hash_header	file:
buf_free	recycle.c	/^BUFFER *buf_free;$/;"	v
buf_size	recycle.c	/^const int buf_size[MAX_BUF_LIST] =$/;"	v
buf_string	recycle.c	/^char *buf_string(BUFFER *buffer)$/;"	f
buffer_clear	buffer.c	/^void buffer_clear (DBUFFER *buffer)$/;"	f
buffer_free	buffer.c	/^void buffer_free (DBUFFER *buffer)$/;"	f
bug	db.c	/^void bug( const char *str, int param )$/;"	f
bug_buf	db.c	/^char            bug_buf     [2*MAX_INPUT_LENGTH];$/;"	v
bugf	comm.c	/^void bugf (char * fmt, ...)$/;"	f
bungetc	buffer_util.c	/^void bungetc( RBUFFER *rbuf )$/;"	f
bust_a_prompt	comm.c	/^void bust_a_prompt( CHAR_DATA *ch )$/;"	f
bwrite_char	bsave.c	/^void bwrite_char( CHAR_DATA *ch, DBUFFER *buf )$/;"	f
bwrite_obj	bsave.c	/^void bwrite_obj( CHAR_DATA *ch, OBJ_DATA *obj, DBUFFER *buf, int iNest )$/;"	f
bwrite_pet	bsave.c	/^void bwrite_pet( CHAR_DATA *pet, DBUFFER *buf)$/;"	f
bzero	hunt.c	/^void bzero(register char *sp,int len)$/;"	f
calc_song_sns	song.c	/^int calc_song_sns()$/;"	f
calc_stats	stats.c	/^void calc_stats(CHAR_DATA *ch)$/;"	f
can_buy	act_obj.c	/^bool can_buy( CHAR_DATA *ch, OBJ_DATA *obj, bool quiet )$/;"	f
can_carry_n	handler.c	/^int can_carry_n( CHAR_DATA *ch )$/;"	f
can_carry_w	handler.c	/^int can_carry_w( CHAR_DATA *ch )$/;"	f
can_cast_transport	magic.c	/^bool can_cast_transport( CHAR_DATA *ch )$/;"	f
can_delete_reset	olc.c	/^bool can_delete_reset( RESET_DATA *reset )$/;"	f
can_delete_reset_msg	olc.c	/^bool can_delete_reset_msg( CHAR_DATA *ch, RESET_DATA *reset )$/;"	f
can_dispel	magic.c	/^bool can_dispel(int sn)$/;"	f
can_drop_obj	handler.c	/^bool can_drop_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
can_gain_skill	skills.c	/^bool can_gain_skill( CHAR_DATA *ch, int sn )$/;"	f
can_locate	act_info.c	/^bool can_locate( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
can_loot	act_obj.c	/^bool can_loot(CHAR_DATA *ch, OBJ_DATA *obj, bool allow_group)$/;"	f
can_order	interp.c	/^bool can_order( char *command, CHAR_DATA *victim )$/;"	f
can_remove_penalty	penalty.c	/^bool can_remove_penalty( CHAR_DATA *ch, PENALTY_DATA *pen )$/;"	f
can_see	handler.c	/^bool can_see( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
can_see_new	handler.c	/^int can_see_new( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
can_see_obj	handler.c	/^bool can_see_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
can_see_room	handler.c	/^bool can_see_room( CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
can_spellup	magic.c	/^bool can_spellup( CHAR_DATA *ch, CHAR_DATA *victim, int sn )$/;"	f
can_trigger	mob_prog.c	/^bool can_trigger( CHAR_DATA *mob, int trigger )$/;"	f
can_use_obj	act_obj.c	/^bool can_use_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
cap_all	db.c	/^char* cap_all( const char* str )$/;"	f
capitalize	db.c	/^char *capitalize( const char *str )$/;"	f
carries_relic	religion.c	/^bool carries_relic( CHAR_DATA *ch )$/;"	f
center	string.c	/^char *center( char *argument, int width, char fill )$/;"	f
ch_agi_defensive	stats.c	/^int ch_agi_defensive(CHAR_DATA *ch)$/;"	f
ch_cha_aggro	stats.c	/^int ch_cha_aggro(CHAR_DATA *ch)$/;"	f
ch_con_hitp	stats.c	/^int ch_con_hitp(CHAR_DATA *ch)$/;"	f
ch_con_shock	stats.c	/^int ch_con_shock(CHAR_DATA *ch)$/;"	f
ch_dex_extrahit	stats.c	/^int ch_dex_extrahit(CHAR_DATA *ch)$/;"	f
ch_dex_tohit	stats.c	/^int ch_dex_tohit(CHAR_DATA *ch)$/;"	f
ch_dis_field	stats.c	/^int ch_dis_field(CHAR_DATA *ch)$/;"	f
ch_dis_practice	stats.c	/^int ch_dis_practice(CHAR_DATA *ch)$/;"	f
ch_int_field	stats.c	/^int ch_int_field(CHAR_DATA *ch)$/;"	f
ch_int_learn	stats.c	/^int ch_int_learn(CHAR_DATA *ch)$/;"	f
ch_luc_quest	stats.c	/^int ch_luc_quest(CHAR_DATA *ch)$/;"	f
ch_str_carry	stats.c	/^int ch_str_carry(CHAR_DATA *ch)$/;"	f
ch_str_todam	stats.c	/^int ch_str_todam(CHAR_DATA *ch)$/;"	f
ch_str_wield	stats.c	/^int ch_str_wield(CHAR_DATA *ch)$/;"	f
ch_wis_field	stats.c	/^int ch_wis_field(CHAR_DATA *ch)$/;"	f
cha_app_aggro	stats.c	/^int cha_app_aggro(int x)$/;"	f
chamber_list	remort.c	/^REMORT_TABLE *chamber_list[MAX_CHAMBER];$/;"	v
chambers	remort.c	/^const struct remort_chamber chambers[] =$/;"	v
chance	quest.c	/^bool chance(int num)$/;"	f
change_align	update.c	/^void change_align (CHAR_DATA *ch, int change_by)$/;"	f
change_exit	olc_act.c	/^bool change_exit( CHAR_DATA *ch, char *argument, int door )$/;"	f
change_wizlist	wizlist.c	/^void change_wizlist(CHAR_DATA *ch, bool add, int level, char *argument)$/;"	f
channel_songs	music.c	/^int channel_songs[MAX_GLOBAL + 1];$/;"	v
char_free	recycle.c	/^CHAR_DATA *char_free;$/;"	v
char_from_room	handler.c	/^void char_from_room( CHAR_DATA *ch )$/;"	f
char_list	db.c	/^CHAR_DATA *     char_list;$/;"	v
char_look_info	act_info.c	/^char* char_look_info( CHAR_DATA *ch )$/;"	f
char_to_room	handler.c	/^void char_to_room( CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
char_update	update.c	/^void char_update( void )$/;"	f
cheat_log	db.c	/^void cheat_log( const char *str )$/;"	f
check_affect_add	db.c	/^void check_affect_add( CHAR_DATA *mob, int affect, int sn )$/;"	f
check_anger	hunt.c	/^int check_anger(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
check_assassinate	fight.c	/^void check_assassinate( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield, int chance )$/;"	f
check_assist	fight.c	/^void check_assist(CHAR_DATA *ch,CHAR_DATA *victim)$/;"	f
check_auth_state	auth.c	/^void check_auth_state( CHAR_DATA *ch )$/;"	f
check_auto_auth	auth.c	/^bool check_auto_auth( char *name )$/;"	f
check_avoid_hit	fight.c	/^bool check_avoid_hit( CHAR_DATA *ch, CHAR_DATA *victim, bool show )$/;"	f
check_back_leap	fight.c	/^void check_back_leap( CHAR_DATA *victim )$/;"	f
check_ban	ban.c	/^bool check_ban(char *site,int type)$/;"	f
check_behead	fight.c	/^void check_behead( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield )$/;"	f
check_bleed	act_move.c	/^void check_bleed( CHAR_DATA *ch, int dir )$/;"	f
check_blind	act_info.c	/^bool check_blind( CHAR_DATA *ch )$/;"	f
check_bodyguard	fight.c	/^CHAR_DATA* check_bodyguard( CHAR_DATA *attacker, CHAR_DATA *victim )$/;"	f
check_bomb	act_obj.c	/^void check_bomb( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
check_cha_follow	magic.c	/^bool check_cha_follow( CHAR_DATA *ch )$/;"	f
check_clan_eq	clan.c	/^void check_clan_eq(CHAR_DATA *victim)$/;"	f
check_disabled	interp.c	/^bool check_disabled (const struct cmd_type *command)$/;"	f
check_dispel	magic.c	/^bool check_dispel( int dis_level, CHAR_DATA *victim, int sn )$/;"	f
check_dodge	fight.c	/^bool check_dodge( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_drop_weapon	handler.c	/^void check_drop_weapon( CHAR_DATA *ch )$/;"	f
check_drown	act_move.c	/^bool check_drown(CHAR_DATA *ch)$/;"	f
check_duck	fight.c	/^bool check_duck( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_enchant_obj	enchant.c	/^void check_enchant_obj( OBJ_DATA *obj )$/;"	f
check_exit_trap_hit	act_move.c	/^bool check_exit_trap_hit( CHAR_DATA *ch, int door, bool step_in )$/;"	f
check_fade	fight.c	/^bool check_fade( CHAR_DATA *ch, CHAR_DATA *victim, bool show ) $/;"	f
check_fear	fight.c	/^bool check_fear( CHAR_DATA *ch )$/;"	f
check_gag_arg	act_comm.c	/^bool check_gag_arg(char* arg, char* cmp_str, long value, CHAR_DATA *ch)$/;"	f
check_hit	fight.c	/^bool check_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt, int dam_type, int skill )$/;"	f
check_immune	handler.c	/^int check_immune(CHAR_DATA *ch, int dam_type)$/;"	f
check_improve	skills.c	/^void check_improve( CHAR_DATA *ch, int sn, bool success, int multiplier )$/;"	f
check_item_trap_hit	act_move.c	/^bool check_item_trap_hit( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
check_jam	fight.c	/^bool check_jam( CHAR_DATA *ch, int odds, bool both )$/;"	f
check_jump_up	fight.c	/^void check_jump_up( CHAR_DATA *ch )$/;"	f
check_kill_quest_completed	quest.c	/^void check_kill_quest_completed( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_kill_steal	fight.c	/^bool check_kill_steal( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_kill_trigger	fight.c	/^bool check_kill_trigger( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_killer	fight.c	/^void check_killer( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_lasso	fight.c	/^bool check_lasso( CHAR_DATA *victim )$/;"	f
check_lose_stance	fight.c	/^bool check_lose_stance(CHAR_DATA *ch)$/;"	f
check_mercy	fight.c	/^bool check_mercy( CHAR_DATA *ch )$/;"	f
check_mirror	fight.c	/^bool check_mirror( CHAR_DATA *ch, CHAR_DATA *victim, bool show ) $/;"	f
check_outmaneuver	fight.c	/^bool check_outmaneuver( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_parry	fight.c	/^bool check_parry( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_parse_name	nanny.c	/^bool check_parse_name( char *name, bool newchar )$/;"	f
check_penlist	penalty.c	/^void check_penlist()$/;"	f
check_playing	nanny.c	/^bool check_playing( DESCRIPTOR_DATA *d, char *name )$/;"	f
check_range	olc_act.c	/^bool check_range( int lower, int upper )$/;"	f
check_reconnect	nanny.c	/^bool check_reconnect( DESCRIPTOR_DATA *d, char *name, bool fConn )$/;"	f
check_reflection	magic.c	/^void* check_reflection( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
check_religion_align	religion.c	/^void check_religion_align( CHAR_DATA *ch )$/;"	f
check_rescue	fight.c	/^void check_rescue( CHAR_DATA *ch )$/;"	f
check_reset_stance	fight.c	/^void check_reset_stance(CHAR_DATA *ch)$/;"	f
check_see	handler.c	/^bool check_see( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_see_eyes	act_info.c	/^bool check_see_eyes( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_see_target	handler.c	/^bool check_see_target( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_shield_block	fight.c	/^bool check_shield_block( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_skill	skills.c	/^bool check_skill( CHAR_DATA *ch, int sn )$/;"	f
check_sn_multiplay	act_wiz.c	/^void check_sn_multiplay( CHAR_DATA *ch, CHAR_DATA *victim, int sn )$/;"	f
check_social	interp.c	/^bool check_social( CHAR_DATA *ch, char *command, char *argument )$/;"	f
check_social_new	interp.c	/^bool check_social_new( CHAR_DATA *ch, char *command, char *argument, bool exact )$/;"	f
check_spell_disabled	interp.c	/^bool check_spell_disabled (const struct skill_type *command)$/;"	f
check_spouse	marry.c	/^void check_spouse( CHAR_DATA *ch )$/;"	f
check_stance	fight.c	/^void check_stance(CHAR_DATA *ch)$/;"	f
check_team_frozen	freeze.c	/^void check_team_frozen ( CHAR_DATA *ch )$/;"	f
check_war_win	warfare.c	/^void check_war_win( void )$/;"	f
clan_dump_obj	clan.c	/^void clan_dump_obj(CHAR_DATA *ch, int clan)$/;"	f
clan_dump_room	clan.c	/^void clan_dump_room(CHAR_DATA *ch, int clan)$/;"	f
clan_lookup	lookup.c	/^int clan_lookup(const char *name)$/;"	f
clan_rank_lookup	lookup.c	/^int clan_rank_lookup(sh_int clan, const char *name)$/;"	f
clan_table	clan.c	/^struct clan_data clan_table[MAX_CLAN];$/;"	v
clans_sorted	nanny.c	/^bool clans_sorted( CHAR_DATA *ch1, CHAR_DATA *ch2 )$/;"	f
clanwar_lookup	clanwar.c	/^CLANWAR_DATA *clanwar_lookup(sh_int clan_one, sh_int clan_two)$/;"	f
clanwar_status	clanwar.c	/^void clanwar_status(CHAR_DATA *ch, sh_int clan_number)$/;"	f
clanwar_table	clanwar.c	/^CLANWAR_DATA * clanwar_table;$/;"	v
class_bonus	stats.c	/^int class_bonus( int class, int stat )$/;"	f
class_can_use_obj	stats.c	/^bool class_can_use_obj( int class, OBJ_DATA *obj )$/;"	f
class_group_table	stats.c	/^bool class_group_table[MAX_CLASS][4] =$/;"	v
class_lookup	handler.c	/^int class_lookup (const char *name)$/;"	f
class_table	const.c	/^const   struct  class_type  class_table [MAX_CLASS] =$/;"	v
clear_area_quests	quest.c	/^void clear_area_quests( CHAR_DATA *ch, AREA_DATA *area )$/;"	f
clear_auth_list	auth.c	/^void clear_auth_list()$/;"	f
clear_buf	recycle.c	/^void clear_buf(BUFFER *buffer)$/;"	f
clear_char	db.c	/^void clear_char( CHAR_DATA *ch )$/;"	f
clear_quests	quest.c	/^void clear_quests( CHAR_DATA *ch, int min_id, int max_id )$/;"	f
clear_tattoos	tattoo.c	/^void clear_tattoos( tattoo_list tl )$/;"	f
clone_area	aclone.c	/^void clone_area( AREA_DATA *pArea )$/;"	f
clone_exits	aclone.c	/^void clone_exits( ROOM_INDEX_DATA *room )$/;"	f
clone_extra_list	aclone.c	/^EXTRA_DESC_DATA* clone_extra_list( EXTRA_DESC_DATA *extra )$/;"	f
clone_mob	aclone.c	/^void clone_mob( MOB_INDEX_DATA *mob )$/;"	f
clone_mobile	db.c	/^void clone_mobile(CHAR_DATA *parent, CHAR_DATA *clone)$/;"	f
clone_object	db.c	/^void clone_object(OBJ_DATA *parent, OBJ_DATA *clone)$/;"	f
clone_reset_list	aclone.c	/^RESET_DATA* clone_reset_list( RESET_DATA *reset )$/;"	f
clone_room	aclone.c	/^void clone_room( ROOM_INDEX_DATA *room )$/;"	f
clone_shift	aclone.c	/^int clone_shift( int vnum )$/;"	f
clone_warning	buildutil.c	/^void clone_warning( CHAR_DATA *ch, AREA_DATA *area )$/;"	f
cloned_area	aclone.c	/^static AREA_DATA *cloned_area = NULL;$/;"	v	file:
close_socket	comm.c	/^void close_socket( DESCRIPTOR_DATA *dclose )$/;"	f
cmd_eval	mob_prog.c	/^int cmd_eval( sh_int vnum, char *line, int check,$/;"	f
cmd_table	interp.c	/^const   struct  cmd_type    cmd_table   [] =$/;"	v
cold_effect	effects.c	/^void cold_effect(void *vo, int level, int dam, int target)$/;"	f
colour	comm.c	/^int colour( char type, CHAR_DATA *ch, char *string )$/;"	f
colourconv	comm.c	/^void colourconv( char *buffer, const char *txt, CHAR_DATA *ch )$/;"	f
comm_bit_name	handler.c	/^char* comm_bit_name( int flag )$/;"	f
comm_bits_name	handler.c	/^char* comm_bits_name( tflag flag )$/;"	f
comm_flags	tables.c	/^const struct flag_type comm_flags[] =$/;"	v
command	olc_act.c	/^    char *command;$/;"	m	struct:olc_help_type	file:
commen_wear_pos	act_info.c	/^bool commen_wear_pos( tflag wear_flag1, tflag wear_flag2 )$/;"	f
compute_mob_stats	stats.c	/^void compute_mob_stats(CHAR_DATA *mob)$/;"	f
con_app_hitp	stats.c	/^int con_app_hitp(int x)$/;"	f
con_app_shock	stats.c	/^int con_app_shock(int x)$/;"	f
con_state	nanny.c	/^int con_state(DESCRIPTOR_DATA *d)$/;"	f
confirm_new_name	nanny.c	/^bool	confirm_new_name ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
confirm_new_password	nanny.c	/^bool	confirm_new_password ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
cont_bits_name	handler.c	/^char* cont_bits_name( long flag )$/;"	f
container_flags	tables.c	/^const struct flag_type container_flags[] =$/;"	v
control	comm.c	/^int control;$/;"	v
convert_mobile	db2.c	/^void convert_mobile( MOB_INDEX_DATA *pMobIndex )$/;"	f
convert_object	db2.c	/^void convert_object( OBJ_INDEX_DATA *pObjIndex )$/;"	f
convert_objects	db2.c	/^void convert_objects( void )$/;"	f
copyover_recover	comm.c	/^void copyover_recover ()$/;"	f
cost	healer.c	/^    int cost;$/;"	m	struct:spell_cost	file:
cost	quest.c	/^    int cost;$/;"	m	struct:quest_item	file:
cost	religion.c	/^    sh_int cost;$/;"	m	struct:god_action	file:
cost	smith.c	/^	int	cost;$/;"	m	struct:blacksmith_material_type	file:
cost	smith.c	/^	int cost;$/;"	m	struct:armor_subtype	file:
cost	smith.c	/^	int cost;$/;"	m	struct:weapon_subtype	file:
cost	tattoo.c	/^    int cost;$/;"	m	struct:tattoo_data	file:
cost_by_level	smith.c	/^int cost_by_level(int level)$/;"	f
costmult	smith.c	/^	int costmult;$/;"	m	struct:workmanship_type	file:
count_obj_list	handler.c	/^int count_obj_list( OBJ_INDEX_DATA *pObjIndex, OBJ_DATA *list )$/;"	f
count_people_room	mob_prog.c	/^int count_people_room( CHAR_DATA *mob, int iFlag )$/;"	f
count_users	handler.c	/^int count_users(OBJ_DATA *obj)$/;"	f
create_haunt	update.c	/^void create_haunt( CHAR_DATA *ch )$/;"	f
create_mobile	db.c	/^CHAR_DATA *create_mobile( MOB_INDEX_DATA *pMobIndex )$/;"	f
create_money	handler.c	/^OBJ_DATA *create_money( int gold, int silver )$/;"	f
create_object	db.c	/^OBJ_DATA *create_object( OBJ_INDEX_DATA *pObjIndex, int level )$/;"	f
create_quest_item	quest.c	/^bool create_quest_item( CHAR_DATA *ch, char *name, OBJ_DATA **obj )$/;"	f
creation_mode	nanny.c	/^int creation_mode(DESCRIPTOR_DATA *d)$/;"	f
crime_free	recycle.c	/^CRIME_DATA *crime_free;$/;"	v
crime_list	penalty.c	/^CRIME_DATA *crime_list;$/;"	v
current_area	db.c	/^AREA_DATA *     current_area;$/;"	v
current_time	comm.c	/^time_t          current_time;   \/* time of this pulse *\/    $/;"	v
curse_effect	breath.c	/^void curse_effect( void *vo, int level, int dam, int target )$/;"	f
d_next	comm.c	/^DESCRIPTOR_DATA *   d_next;     \/* Next descriptor in loop  *\/$/;"	v
dam_by_level	smith.c	/^int dam_by_level(int level)$/;"	f
dam_message	fight.c	/^void dam_message( CHAR_DATA *ch, CHAR_DATA *victim,int dam,int dt,bool immune )$/;"	f
dam_type	aclone.c	/^	sh_int      dam_type;$/;"	m	struct:mob_index_data	file:
damage	aclone.c	/^	sh_int      damage[3];$/;"	m	struct:mob_index_data	file:
damage	fight.c	/^bool damage( CHAR_DATA *ch,CHAR_DATA *victim,int dam,int dt,int dam_type,$/;"	f
damage_type	tables.c	/^const struct flag_type damage_type[] =$/;"	v
dammult	smith.c	/^	int dammult;$/;"	m	struct:weapon_subtype	file:
damroll	smith.c	/^	int	damroll;$/;"	m	struct:blacksmith_material_type	file:
damtype	smith.c	/^	char *damtype;$/;"	m	struct:weapon_subtype	file:
data	hunt.c	/^    void          *data;$/;"	m	struct:hash_link	file:
day_name	act_info.c	/^char *  const   day_name    [] =$/;"	v
deal_chain_damage	magic.c	/^void deal_chain_damage( int sn, int level, CHAR_DATA *ch, CHAR_DATA *victim, int dam_type )$/;"	f
death_cry	fight.c	/^void death_cry( CHAR_DATA *ch )$/;"	f
death_penalty	fight.c	/^void death_penalty( CHAR_DATA *ch )$/;"	f
death_update	update.c	/^void death_update( void )$/;"	f
deduct_cost	handler.c	/^void deduct_cost(CHAR_DATA *ch, int cost)$/;"	f
default_choice	nanny.c	/^bool	default_choice ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
default_colour	handler.c	/^void default_colour( CHAR_DATA *ch )$/;"	f
default_pos	aclone.c	/^	sh_int      default_pos;$/;"	m	struct:mob_index_data	file:
del_last_line	string.c	/^char * del_last_line( char *string )$/;"	f
del_last_line_ext	string.c	/^char * del_last_line_ext( char *string, char *xbuf )$/;"	f
delete_clanwar_node	clanwar.c	/^int delete_clanwar_node(CLANWAR_DATA *node)$/;"	f
delete_penalty_node	penalty.c	/^void delete_penalty_node(PENALTY_DATA *node)$/;"	f
desc	olc_act.c	/^    char *desc;$/;"	m	struct:olc_help_type	file:
desc	religion.c	/^    char *desc;$/;"	m	struct:god_action	file:
desc_cmp	comm.c	/^bool desc_cmp( DESCRIPTOR_DATA *d1, DESCRIPTOR_DATA *d2 )$/;"	f
descriptor_free	recycle.c	/^DESCRIPTOR_DATA *descriptor_free;$/;"	v
descriptor_list	comm.c	/^DESCRIPTOR_DATA *   descriptor_list;    \/* All open descriptors     *\/$/;"	v
destroy_hash_table	hunt.c	/^void destroy_hash_table(struct hash_header *ht,void (*gman)())$/;"	f
dex_app_extrahit	stats.c	/^int dex_app_extrahit(int x)$/;"	f
dex_app_tohit	stats.c	/^int dex_app_tohit(int x)$/;"	f
dice	db.c	/^int dice( int number, int size )$/;"	f
dice_lookup	stats.c	/^int dice_lookup(char *stat)$/;"	f
die_follower	act_comm.c	/^void die_follower( CHAR_DATA *ch )$/;"	f
difficulty	smith.c	/^	int	difficulty;$/;"	m	struct:blacksmith_material_type	file:
dir_name	act_move.c	/^char *  const   dir_name    []      =$/;"	v
direct_damage	fight.c	/^void direct_damage( CHAR_DATA *ch, CHAR_DATA *victim, int dam, int sn )$/;"	f
dis_app_field	stats.c	/^int dis_app_field(int x)$/;"	f
dis_app_practice	stats.c	/^int dis_app_practice(int x)$/;"	f
disabled_first	interp.c	/^DISABLED_DATA *disabled_first;$/;"	v
disarm	fight2.c	/^bool disarm( CHAR_DATA *ch, CHAR_DATA *victim, bool quiet )$/;"	f
display	smith.c	/^	char *display;$/;"	m	struct:dye_type	file:
display_resets	olc.c	/^void display_resets( CHAR_DATA *ch )$/;"	f
dispose_reset	redit-ilab.c	/^static void dispose_reset (RESET_DATA *pReset)$/;"	f	file:
distance	scan.c	/^char *const distance[4]=$/;"	v
do_action	act_comm.c	/^void do_action( CHAR_DATA *ch, char *argument )$/;"	f
do_advance	act_wiz.c	/^void do_advance( CHAR_DATA *ch, char *argument )$/;"	f
do_aedit	olc.c	/^void do_aedit( CHAR_DATA *ch, char *argument )$/;"	f
do_affects	act_info.c	/^DECLARE_DO_FUN( do_affects  );$/;"	v
do_affects	act_info.c	/^void do_affects(CHAR_DATA *ch, char *argument )$/;"	f
do_afk	act_comm.c	/^void do_afk ( CHAR_DATA *ch, char * argument)$/;"	f
do_aim	fight.c	/^DECLARE_DO_FUN(do_aim       );$/;"	v
do_aim	fight2.c	/^void do_aim( CHAR_DATA *ch, char *argument )$/;"	f
do_alia	alias.c	/^void do_alia(CHAR_DATA *ch, char *argument)$/;"	f
do_alias	alias.c	/^void do_alias(CHAR_DATA *ch, char *argument)$/;"	f
do_alist	olc.c	/^void do_alist( CHAR_DATA *ch, char *argument )$/;"	f
do_allow	ban.c	/^void do_allow( CHAR_DATA *ch, char *argument )                        $/;"	f
do_answer	act_comm.c	/^void do_answer( CHAR_DATA *ch, char *argument )$/;"	f
do_appraise	act_info.c	/^DECLARE_DO_FUN(do_appraise); $/;"	v
do_appraise	act_info.c	/^void do_appraise ( CHAR_DATA *ch, char *argument )$/;"	f
do_areas	db.c	/^void do_areas( CHAR_DATA *ch, char *argument )$/;"	f
do_as	act_wiz.c	/^void do_as(CHAR_DATA *ch, char *argument)$/;"	f
do_asave	comm.c	/^DECLARE_DO_FUN(do_asave     );$/;"	v
do_asave	olc_save.c	/^void do_asave( CHAR_DATA *ch, char *argument )$/;"	f
do_ashift	vshift.c	/^void do_ashift( CHAR_DATA *ch, char *argument )$/;"	f
do_at	act_wiz.c	/^void do_at( CHAR_DATA *ch, char *argument )$/;"	f
do_attributes	act_info.c	/^DECLARE_DO_FUN(do_attributes);$/;"	v
do_attributes	act_info.c	/^void do_attributes( CHAR_DATA *ch, char *argument )$/;"	f
do_auction	act_comm.c	/^void do_auction( CHAR_DATA *ch, char *argument )$/;"	f
do_authorize	auth.c	/^void do_authorize( CHAR_DATA *ch, char *argument )$/;"	f
do_autoassist	act_info.c	/^void do_autoassist(CHAR_DATA *ch, char *argument)$/;"	f
do_autoexit	act_info.c	/^void do_autoexit(CHAR_DATA *ch, char *argument)$/;"	f
do_autogold	act_info.c	/^void do_autogold(CHAR_DATA *ch, char *argument)$/;"	f
do_autolist	act_info.c	/^void do_autolist(CHAR_DATA *ch, char *argument)$/;"	f
do_autoloot	act_info.c	/^void do_autoloot(CHAR_DATA *ch, char *argument)$/;"	f
do_autorescue	act_info.c	/^void do_autorescue(CHAR_DATA *ch, char *argument)$/;"	f
do_autosac	act_info.c	/^void do_autosac(CHAR_DATA *ch, char *argument)$/;"	f
do_autosplit	act_info.c	/^void do_autosplit(CHAR_DATA *ch, char *argument)$/;"	f
do_backstab	fight.c	/^DECLARE_DO_FUN(do_backstab  );$/;"	v
do_backstab	fight2.c	/^void do_backstab( CHAR_DATA *ch, char *argument )$/;"	f
do_backstab	special.c	/^DECLARE_DO_FUN(do_backstab);$/;"	v
do_balance	act_obj.c	/^void do_balance ( CHAR_DATA *ch, char *argument )$/;"	f
do_bamfin	act_wiz.c	/^void do_bamfin( CHAR_DATA *ch, char *argument )$/;"	f
do_bamfout	act_wiz.c	/^void do_bamfout( CHAR_DATA *ch, char *argument )$/;"	f
do_ban	ban.c	/^void do_ban(CHAR_DATA *ch, char *argument)$/;"	f
do_bash	fight.c	/^DECLARE_DO_FUN(do_bash      );$/;"	v
do_bash	fight2.c	/^void do_bash( CHAR_DATA *ch, char *argument )$/;"	f
do_berserk	fight.c	/^DECLARE_DO_FUN(do_berserk   );$/;"	v
do_berserk	fight2.c	/^void do_berserk( CHAR_DATA *ch, char *argument )$/;"	f
do_bitch	act_comm.c	/^void do_bitch( CHAR_DATA *ch, char *argument )$/;"	f
do_bite	fight.c	/^DECLARE_DO_FUN(do_bite      );$/;"	v
do_bite	fight2.c	/^void do_bite( CHAR_DATA *ch, char *argument )$/;"	f
do_blackjack	fight2.c	/^void do_blackjack( CHAR_DATA *ch, char *argument )$/;"	f
do_blue	freeze.c	/^void do_blue( CHAR_DATA *ch, char *argument )$/;"	f
do_board	board.c	/^void do_board (CHAR_DATA *ch, char *argument)$/;"	f
do_bounty	act_comm.c	/^void do_bounty( CHAR_DATA *ch, char *argument )$/;"	f
do_brandish	act_obj.c	/^void do_brandish( CHAR_DATA *ch, char *argument )$/;"	f
do_brawl	fight.c	/^DECLARE_DO_FUN(do_brawl     );$/;"	v
do_brawl	fight2.c	/^void do_brawl( CHAR_DATA *ch, char *argument)$/;"	f
do_brew	alchemy.c	/^void do_brew( CHAR_DATA *ch, char *argument )$/;"	f
do_brief	act_info.c	/^void do_brief(CHAR_DATA *ch, char *argument)$/;"	f
do_browse	act_obj.c	/^void do_browse( CHAR_DATA *ch, char *argument )$/;"	f
do_bug	act_comm.c	/^void do_bug( CHAR_DATA *ch, char *argument )$/;"	f
do_build_raft	ranger.c	/^void do_build_raft(CHAR_DATA *ch)$/;"	f
do_burst	fight.c	/^DECLARE_DO_FUN(do_burst     );$/;"	v
do_burst	fight2.c	/^void do_burst( CHAR_DATA *ch, char *argument )$/;"	f
do_buy	act_obj.c	/^void do_buy( CHAR_DATA *ch, char *argument )$/;"	f
do_camp_fire	ranger.c	/^void do_camp_fire(CHAR_DATA *ch)$/;"	f
do_cast	magic.c	/^void do_cast( CHAR_DATA *ch, char *argument )$/;"	f
do_channels	act_comm.c	/^void do_channels( CHAR_DATA *ch, char *argument)$/;"	f
do_charge	fight2.c	/^void do_charge( CHAR_DATA *ch, char *argument )$/;"	f
do_cheatlog	db.c	/^void do_cheatlog( CHAR_DATA *ch, char *argument )$/;"	f
do_choke_hold	fight.c	/^DECLARE_DO_FUN(do_choke_hold);$/;"	v
do_choke_hold	fight2.c	/^void do_choke_hold( CHAR_DATA *ch, char *argument )$/;"	f
do_chop	fight.c	/^DECLARE_DO_FUN(do_chop      );$/;"	v
do_chop	fight2.c	/^void do_chop( CHAR_DATA *ch, char *argument )$/;"	f
do_circle	fight.c	/^DECLARE_DO_FUN(do_circle    );$/;"	v
do_circle	fight2.c	/^void do_circle( CHAR_DATA *ch, char *argument )$/;"	f
do_clan_dump	clan.c	/^void do_clan_dump(CHAR_DATA *ch, char *argument)$/;"	f
do_clanreport	clan.c	/^void do_clanreport( CHAR_DATA *ch, char *argument )$/;"	f
do_clantalk	act_comm.c	/^void do_clantalk( CHAR_DATA *ch, char *argument )$/;"	f
do_clanwar	clanwar.c	/^void do_clanwar(CHAR_DATA *ch, char *argument)$/;"	f
do_clear	act_wiz.c	/^void do_clear( CHAR_DATA *ch, char *argument )$/;"	f
do_clone	act_wiz.c	/^void do_clone(CHAR_DATA *ch, char *argument )$/;"	f
do_close	act_move.c	/^void do_close( CHAR_DATA *ch, char *argument )$/;"	f
do_close	special.c	/^DECLARE_DO_FUN(do_close     );$/;"	v
do_colour	act_comm.c	/^void do_colour( CHAR_DATA *ch, char *argument )$/;"	f
do_combat	warfare.c	/^void do_combat( CHAR_DATA *ch, char *argument )$/;"	f
do_combine	act_info.c	/^void do_combine(CHAR_DATA *ch, char *argument)$/;"	f
do_commands	interp.c	/^void do_commands( CHAR_DATA *ch, char *argument )$/;"	f
do_compact	act_info.c	/^void do_compact(CHAR_DATA *ch, char *argument)$/;"	f
do_compare	act_info.c	/^void do_compare( CHAR_DATA *ch, char *argument )$/;"	f
do_consent	marry.c	/^void do_consent( CHAR_DATA *ch, char *argument )$/;"	f
do_consider	act_info.c	/^void do_consider( CHAR_DATA *ch, char *argument )$/;"	f
do_copyove	act_wiz.c	/^void do_copyove( CHAR_DATA *ch, char *argument )$/;"	f
do_copyover	comm.c	/^void do_copyover (CHAR_DATA *ch, char * argument)$/;"	f
do_count	act_info.c	/^void do_count ( CHAR_DATA *ch, char *argument )$/;"	f
do_crash	act_wiz.c	/^void do_crash( CHAR_DATA *ch, char *argument )$/;"	f
do_credits	act_info.c	/^void do_credits( CHAR_DATA *ch, char *argument )$/;"	f
do_crimelist	penalty.c	/^void do_crimelist(CHAR_DATA *ch, char *argument)$/;"	f
do_crush	fight2.c	/^void do_crush( CHAR_DATA *ch, char *argument )$/;"	f
do_cset	buildutil.c	/^DECLARE_DO_FUN(do_cset      );$/;"	v
do_cset	clan.c	/^void do_cset( CHAR_DATA *ch, char *argument )$/;"	f
do_deaf	act_comm.c	/^void do_deaf( CHAR_DATA *ch, char *argument)$/;"	f
do_delet	act_comm.c	/^void do_delet( CHAR_DATA *ch, char *argument)$/;"	f
do_delete	act_comm.c	/^void do_delete( CHAR_DATA *ch, char *argument)$/;"	f
do_deny	act_wiz.c	/^void do_deny( CHAR_DATA *ch, char *argument )$/;"	f
do_deposit	act_obj.c	/^void do_deposit ( CHAR_DATA *ch, char *argument )$/;"	f
do_description	act_info.c	/^void do_description( CHAR_DATA *ch, char *argument )$/;"	f
do_detoxify	ranger.c	/^void do_detoxify( CHAR_DATA *ch, char *argument )$/;"	f
do_die	fight.c	/^void do_die( CHAR_DATA *ch, char *argument )$/;"	f
do_dirt	fight.c	/^DECLARE_DO_FUN(do_dirt      );$/;"	v
do_dirt	fight2.c	/^void do_dirt( CHAR_DATA *ch, char *argument )$/;"	f
do_disable	interp.c	/^void do_disable (CHAR_DATA *ch, char *argument)$/;"	f
do_disarm	fight.c	/^DECLARE_DO_FUN(do_disarm    );$/;"	v
do_disarm	fight2.c	/^void do_disarm( CHAR_DATA *ch, char *argument )$/;"	f
do_disarm_trap	act_move.c	/^void do_disarm_trap( CHAR_DATA *ch, char *argument )$/;"	f
do_disconnect	act_wiz.c	/^void do_disconnect( CHAR_DATA *ch, char *argument )$/;"	f
do_disguise	act_info.c	/^void do_disguise( CHAR_DATA *ch, char *argument )$/;"	f
do_distract	fight.c	/^DECLARE_DO_FUN(do_distract  );$/;"	v
do_distract	fight2.c	/^void do_distract( CHAR_DATA *ch, char *argument )$/;"	f
do_divorce	marry.c	/^void do_divorce( CHAR_DATA *ch, char *argument)$/;"	f
do_donate	act_obj.c	/^void do_donate( CHAR_DATA *ch, char *argument)$/;"	f
do_double_strike	fight2.c	/^void do_double_strike( CHAR_DATA *ch, char *argument )$/;"	f
do_down	act_move.c	/^void do_down( CHAR_DATA *ch, char *argument )$/;"	f
do_dowsing	ranger.c	/^void do_dowsing( CHAR_DATA *ch, char *argument )$/;"	f
do_drink	act_obj.c	/^void do_drink( CHAR_DATA *ch, char *argument )$/;"	f
do_drop	act_obj.c	/^void do_drop( CHAR_DATA *ch, char *argument )$/;"	f
do_drunken_fury	fight.c	/^DECLARE_DO_FUN(do_drunken_fury); $/;"	v
do_drunken_fury	fight2.c	/^void do_drunken_fury( CHAR_DATA *ch, char *argument)$/;"	f
do_dump	db.c	/^void do_dump( CHAR_DATA *ch, char *argument )$/;"	f
do_east	act_move.c	/^void do_east( CHAR_DATA *ch, char *argument )$/;"	f
do_eat	act_obj.c	/^void do_eat( CHAR_DATA *ch, char *argument )$/;"	f
do_echo	act_wiz.c	/^void do_echo( CHAR_DATA *ch, char *argument )$/;"	f
do_emote	act_comm.c	/^void do_emote( CHAR_DATA *ch, char *argument )$/;"	f
do_emote	fight.c	/^DECLARE_DO_FUN(do_emote     );$/;"	v
do_enter	act_enter.c	/^void do_enter( CHAR_DATA *ch, char *argument)$/;"	f
do_envenom	act_obj.c	/^void do_envenom(CHAR_DATA *ch, char *argument)$/;"	f
do_equipment	act_info.c	/^void do_equipment( CHAR_DATA *ch, char *argument )$/;"	f
do_estimate	act_move.c	/^void do_estimate( CHAR_DATA *ch, char *argument )$/;"	f
do_etls	stats.c	/^void do_etls( CHAR_DATA *ch, char *argument )$/;"	f
do_examine	act_info.c	/^void do_examine( CHAR_DATA *ch, char *argument )$/;"	f
do_exits	act_info.c	/^DECLARE_DO_FUN( do_exits    );$/;"	v
do_exits	act_info.c	/^void do_exits( CHAR_DATA *ch, char *argument )$/;"	f
do_fatal_blow	fight.c	/^DECLARE_DO_FUN(do_fatal_blow);$/;"	v
do_fatal_blow	fight2.c	/^void do_fatal_blow( CHAR_DATA *ch, char *argument )$/;"	f
do_feint	fight.c	/^DECLARE_DO_FUN(do_feint     );$/;"	v
do_feint	fight2.c	/^void do_feint( CHAR_DATA *ch, char *argument )$/;"	f
do_fill	act_obj.c	/^void do_fill( CHAR_DATA *ch, char *argument )$/;"	f
do_findlock	redit-ilab.c	/^void do_findlock (CHAR_DATA *ch, char *argument)$/;"	f
do_finger	bsave.c	/^void do_finger(CHAR_DATA *ch, char *argument)$/;"	f
do_firstaid	ranger.c	/^void do_firstaid( CHAR_DATA *ch, char *argument )$/;"	f
do_fishing	ranger.c	/^void do_fishing(CHAR_DATA *ch)$/;"	f
do_flag	flags.c	/^void do_flag(CHAR_DATA *ch, char *argument)$/;"	f
do_fledge	ranger.c	/^void do_fledge( CHAR_DATA *ch, char *argument )$/;"	f
do_flee	fight.c	/^DECLARE_DO_FUN(do_flee      );$/;"	v
do_flee	fight.c	/^void do_flee( CHAR_DATA *ch, char *argument )$/;"	f
do_flee	special.c	/^DECLARE_DO_FUN(do_flee);$/;"	v
do_flush	act_wiz.c	/^void do_flush(CHAR_DATA *ch, char *argument)$/;"	f
do_follow	act_comm.c	/^void do_follow( CHAR_DATA *ch, char *argument )$/;"	f
do_forage	ranger.c	/^void do_forage(CHAR_DATA *ch)$/;"	f
do_force	act_wiz.c	/^void do_force( CHAR_DATA *ch, char *argument )$/;"	f
do_forget	forget.c	/^void do_forget(CHAR_DATA *ch, char *argument)$/;"	f
do_forgive	penalty.c	/^void do_forgive( CHAR_DATA *ch, char *argument )$/;"	f
do_freeze	penalty.c	/^void do_freeze( CHAR_DATA *ch, char *argument )$/;"	f
do_frfind	buildutil.c	/^void do_frfind( CHAR_DATA *ch, char *argument )$/;"	f
do_ftag	freeze.c	/^void do_ftag( CHAR_DATA *ch, char *argument )$/;"	f
do_fullauto	fight.c	/^DECLARE_DO_FUN(do_fullauto  );$/;"	v
do_fullauto	fight2.c	/^void do_fullauto( CHAR_DATA *ch, char *argument)$/;"	f
do_fvlist	buildutil.c	/^void do_fvlist (CHAR_DATA *ch, char *argument)$/;"	f
do_gag	act_comm.c	/^void do_gag( CHAR_DATA *ch, char *argument )$/;"	f
do_gain	skills.c	/^void do_gain(CHAR_DATA *ch, char *argument)$/;"	f
do_gametalk	act_comm.c	/^void do_gametalk( CHAR_DATA *ch, char *argument )$/;"	f
do_get	act_obj.c	/^void do_get( CHAR_DATA *ch, char *argument )$/;"	f
do_get	fight.c	/^DECLARE_DO_FUN(do_get       );$/;"	v
do_give	act_obj.c	/^void do_give( CHAR_DATA *ch, char *argument )$/;"	f
do_glance	act_info.c	/^void do_glance( CHAR_DATA *ch, char *argument )$/;"	f
do_god	religion.c	/^void do_god( CHAR_DATA *ch, char *argument )$/;"	f
do_gossip	act_comm.c	/^void do_gossip( CHAR_DATA *ch, char *argument )$/;"	f
do_goto	act_wiz.c	/^void do_goto( CHAR_DATA *ch, char *argument )$/;"	f
do_gouge	fight.c	/^DECLARE_DO_FUN(do_gouge     );$/;"	v
do_gouge	fight2.c	/^void do_gouge( CHAR_DATA *ch, char *argument )$/;"	f
do_grant	act_wiz.c	/^DECLARE_DO_FUN(do_grant     );$/;"	v
do_grant	grant.c	/^void do_grant( CHAR_DATA *ch, char *argument )$/;"	f
do_gratz	act_comm.c	/^void do_gratz( CHAR_DATA *ch, char *argument )$/;"	f
do_grep	grep.c	/^void do_grep( CHAR_DATA *ch, char *argument )$/;"	f
do_group	act_comm.c	/^void do_group( CHAR_DATA *ch, char *argument )$/;"	f
do_groups	act_comm.c	/^DECLARE_DO_FUN(do_groups    );$/;"	v
do_groups	skills.c	/^DECLARE_DO_FUN(do_groups    );$/;"	v
do_groups	skills.c	/^void do_groups(CHAR_DATA *ch, char *argument)$/;"	f
do_gstat	grant.c	/^void do_gstat( CHAR_DATA *ch, char *argument )$/;"	f
do_gtell	act_comm.c	/^void do_gtell( CHAR_DATA *ch, char *argument )$/;"	f
do_guard	fight.c	/^DECLARE_DO_FUN(do_guard     );$/;"	v
do_guard	fight2.c	/^void do_guard( CHAR_DATA *ch, char *argument )$/;"	f
do_headbutt	fight.c	/^DECLARE_DO_FUN(do_headbutt  );$/;"	v
do_headbutt	fight2.c	/^void do_headbutt( CHAR_DATA *ch, char *argument )$/;"	f
do_heal	healer.c	/^void do_heal(CHAR_DATA *ch, char *argument)$/;"	f
do_hedit	olc.c	/^void do_hedit( CHAR_DATA *ch, char *argument )$/;"	f
do_help	act_info.c	/^DECLARE_DO_FUN( do_help     );$/;"	v
do_help	act_info.c	/^void do_help( CHAR_DATA *ch, char *argument )$/;"	f
do_help	act_wiz.c	/^DECLARE_DO_FUN(do_help      );$/;"	v
do_help	board.c	/^DECLARE_DO_FUN( do_help );$/;"	v
do_help	comm.c	/^DECLARE_DO_FUN(do_help      );$/;"	v
do_help	nanny.c	/^DECLARE_DO_FUN(do_help      );$/;"	v
do_help	skills.c	/^DECLARE_DO_FUN(do_help      );$/;"	v
do_herbs	alchemy.c	/^void do_herbs( CHAR_DATA *ch, char *argument )$/;"	f
do_hide	act_move.c	/^void do_hide( CHAR_DATA *ch, char *argument )$/;"	f
do_hogtie	fight.c	/^DECLARE_DO_FUN(do_hogtie    );$/;"	v
do_hogtie	fight2.c	/^void do_hogtie(CHAR_DATA *ch, char *argument )$/;"	f
do_holylight	act_wiz.c	/^void do_holylight( CHAR_DATA *ch, char *argument )$/;"	f
do_hunt	act_info.c	/^DECLARE_DO_FUN(do_hunt);$/;"	v
do_hunt	hunt.c	/^void do_hunt( CHAR_DATA *ch, char *argument )$/;"	f
do_hunt_relic	hunt.c	/^void do_hunt_relic( CHAR_DATA *ch )$/;"	f
do_hurl	fight.c	/^DECLARE_DO_FUN(do_hurl      );$/;"	v
do_hurl	fight2.c	/^void do_hurl( CHAR_DATA *ch, char *argument )$/;"	f
do_ignite	act_obj.c	/^void do_ignite( CHAR_DATA *ch, char *argument )$/;"	f
do_immflag	grant.c	/^void do_immflag( CHAR_DATA *ch, char *argument )$/;"	f
do_immtalk	act_comm.c	/^void do_immtalk( CHAR_DATA *ch, char *argument )$/;"	f
do_imotd	act_info.c	/^void do_imotd(CHAR_DATA *ch, char *argument)$/;"	f
do_incognito	act_wiz.c	/^void do_incognito( CHAR_DATA *ch, char *argument )$/;"	f
do_info	act_comm.c	/^void do_info( CHAR_DATA *ch, char *argument )$/;"	f
do_intimidate	fight2.c	/^void do_intimidate( CHAR_DATA *ch, char *argument )$/;"	f
do_inventory	act_info.c	/^void do_inventory( CHAR_DATA *ch, char *argument )$/;"	f
do_invis	act_wiz.c	/^void do_invis( CHAR_DATA *ch, char *argument )$/;"	f
do_invite	clan.c	/^void do_invite(CHAR_DATA *ch, char *argument)$/;"	f
do_jail	penalty.c	/^void do_jail( CHAR_DATA *ch, char *argument )$/;"	f
do_kick	fight.c	/^DECLARE_DO_FUN(do_kick      );$/;"	v
do_kick	fight2.c	/^void do_kick( CHAR_DATA *ch, char *argument )$/;"	f
do_kill	fight.c	/^void do_kill( CHAR_DATA *ch, char *argument )$/;"	f
do_leg_sweep	fight.c	/^DECLARE_DO_FUN(do_leg_sweep );$/;"	v
do_leg_sweep	fight2.c	/^void do_leg_sweep( CHAR_DATA *ch, char *argument )$/;"	f
do_lfind	buildutil.c	/^void do_lfind( CHAR_DATA *ch, char *argument )$/;"	f
do_list	act_obj.c	/^void do_list( CHAR_DATA *ch, char *argument )$/;"	f
do_load	act_wiz.c	/^void do_load(CHAR_DATA *ch, char *argument )$/;"	f
do_lock	act_move.c	/^void do_lock( CHAR_DATA *ch, char *argument )$/;"	f
do_log	act_wiz.c	/^void do_log( CHAR_DATA *ch, char *argument )$/;"	f
do_look	act_enter.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	act_info.c	/^DECLARE_DO_FUN( do_look     );$/;"	v
do_look	act_info.c	/^void do_look( CHAR_DATA *ch, char *argument )$/;"	f
do_look	act_move.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	act_wiz.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	comm.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	fight.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	magic.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	magic2.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	mob_cmds.c	/^DECLARE_DO_FUN( do_look );$/;"	v
do_look	nanny.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	penalty.c	/^DECLARE_DO_FUN(do_look);$/;"	v
do_look	remort.c	/^DECLARE_DO_FUN( do_look );$/;"	v
do_look	warfare.c	/^DECLARE_DO_FUN(do_look);$/;"	v
do_lore	act_info.c	/^DECLARE_DO_FUN(do_lore);$/;"	v
do_lore	act_info.c	/^void do_lore ( CHAR_DATA *ch, char *argument )$/;"	f
do_marry	marry.c	/^void do_marry( CHAR_DATA *ch, char *argument)$/;"	f
do_medit	olc.c	/^void do_medit( CHAR_DATA *ch, char *argument )$/;"	f
do_melee	fight.c	/^DECLARE_DO_FUN(do_melee     );$/;"	v
do_melee	fight2.c	/^void do_melee( CHAR_DATA *ch, char *argument)$/;"	f
do_memory	db.c	/^void do_memory( CHAR_DATA *ch, char *argument )$/;"	f
do_merge	act_obj.c	/^void do_merge( CHAR_DATA *ch, char *argument )$/;"	f
do_mfind	buildutil.c	/^DECLARE_DO_FUN(do_mfind     );$/;"	v
do_mfind	buildutil.c	/^void do_mfind( CHAR_DATA *ch, char *argument )$/;"	f
do_mload	act_wiz.c	/^DECLARE_DO_FUN(do_mload     );$/;"	v
do_mload	act_wiz.c	/^void do_mload( CHAR_DATA *ch, char *argument )$/;"	f
do_mob	mob_cmds.c	/^void do_mob( CHAR_DATA *ch, char *argument )$/;"	f
do_morph	act_move.c	/^void do_morph(CHAR_DATA *ch, char *argument)$/;"	f
do_morph	update.c	/^DECLARE_DO_FUN(do_morph     );$/;"	v
do_motd	act_info.c	/^void do_motd(CHAR_DATA *ch, char *argument)$/;"	f
do_mpact	mob_cmds.c	/^void do_mpact( CHAR_DATA *ch, char *argument )$/;"	f
do_mpapply	mob_cmds.c	/^void do_mpapply( CHAR_DATA *ch, char *argument )$/;"	f
do_mpapplyb	mob_cmds.c	/^void do_mpapplyb( CHAR_DATA *ch, char *argument )$/;"	f
do_mpasound	mob_cmds.c	/^void do_mpasound( CHAR_DATA *ch, char *argument )$/;"	f
do_mpassist	mob_cmds.c	/^void do_mpassist( CHAR_DATA *ch, char *argument )$/;"	f
do_mpat	mob_cmds.c	/^void do_mpat( CHAR_DATA *ch, char *argument )$/;"	f
do_mpcall	mob_cmds.c	/^void do_mpcall( CHAR_DATA *ch, char *argument )$/;"	f
do_mpcancel	mob_cmds.c	/^void do_mpcancel( CHAR_DATA *ch, char *argument )$/;"	f
do_mpcast	mob_cmds.c	/^void do_mpcast( CHAR_DATA *ch, char *argument )$/;"	f
do_mpdamage	mob_cmds.c	/^void do_mpdamage( CHAR_DATA *ch, char *argument )$/;"	f
do_mpdelay	mob_cmds.c	/^void do_mpdelay( CHAR_DATA *ch, char *argument )$/;"	f
do_mpdump	mob_cmds.c	/^void do_mpdump( CHAR_DATA *ch, char *argument )$/;"	f
do_mpecho	mob_cmds.c	/^void do_mpecho( CHAR_DATA *ch, char *argument )$/;"	f
do_mpechoaround	mob_cmds.c	/^void do_mpechoaround( CHAR_DATA *ch, char *argument )$/;"	f
do_mpechoat	mob_cmds.c	/^void do_mpechoat( CHAR_DATA *ch, char *argument )$/;"	f
do_mpedit	olc_mpcode.c	/^void do_mpedit(CHAR_DATA *ch, char *argument)$/;"	f
do_mpfind	buildutil.c	/^void do_mpfind( CHAR_DATA *ch, char *argument )$/;"	f
do_mpflee	mob_cmds.c	/^void do_mpflee( CHAR_DATA *ch, char *argument )$/;"	f
do_mpforce	mob_cmds.c	/^void do_mpforce( CHAR_DATA *ch, char *argument )$/;"	f
do_mpforget	mob_cmds.c	/^void do_mpforget( CHAR_DATA *ch, char *argument )$/;"	f
do_mpgecho	mob_cmds.c	/^void do_mpgecho( CHAR_DATA *ch, char *argument )$/;"	f
do_mpgforce	mob_cmds.c	/^void do_mpgforce( CHAR_DATA *ch, char *argument )$/;"	f
do_mpgoto	mob_cmds.c	/^void do_mpgoto( CHAR_DATA *ch, char *argument )$/;"	f
do_mpgtransfer	mob_cmds.c	/^void do_mpgtransfer( CHAR_DATA *ch, char *argument )$/;"	f
do_mphit	mob_cmds.c	/^void do_mphit( CHAR_DATA *ch, char *argument )$/;"	f
do_mpjunk	mob_cmds.c	/^void do_mpjunk( CHAR_DATA *ch, char *argument )$/;"	f
do_mpkill	mob_cmds.c	/^void do_mpkill( CHAR_DATA *ch, char *argument )$/;"	f
do_mpmload	mob_cmds.c	/^void do_mpmload( CHAR_DATA *ch, char *argument )$/;"	f
do_mpoload	mob_cmds.c	/^void do_mpoload( CHAR_DATA *ch, char *argument )$/;"	f
do_mpotransfer	mob_cmds.c	/^void do_mpotransfer( CHAR_DATA *ch, char *argument )$/;"	f
do_mppeace	mob_cmds.c	/^void do_mppeace( CHAR_DATA *ch, char *argument )$/;"	f
do_mppurge	mob_cmds.c	/^void do_mppurge( CHAR_DATA *ch, char *argument )$/;"	f
do_mpqadvance	mob_cmds.c	/^void do_mpqadvance( CHAR_DATA *ch, char *argument )$/;"	f
do_mpqset	mob_cmds.c	/^void do_mpqset( CHAR_DATA *ch, char *argument )$/;"	f
do_mpremember	mob_cmds.c	/^void do_mpremember( CHAR_DATA *ch, char *argument )$/;"	f
do_mpremort	mob_cmds.c	/^void do_mpremort( CHAR_DATA *ch, char *argument )$/;"	f
do_mpremove	mob_cmds.c	/^void do_mpremove( CHAR_DATA *ch, char *argument )$/;"	f
do_mprestore	mob_cmds.c	/^void do_mprestore( CHAR_DATA *ch, char *argument )$/;"	f
do_mpreward	mob_cmds.c	/^void do_mpreward( CHAR_DATA *ch, char *argument )$/;"	f
do_mpstat	mob_cmds.c	/^void do_mpstat( CHAR_DATA *ch, char *argument )$/;"	f
do_mptransfer	mob_cmds.c	/^void do_mptransfer( CHAR_DATA *ch, char *argument )$/;"	f
do_mpvforce	mob_cmds.c	/^void do_mpvforce( CHAR_DATA *ch, char *argument )$/;"	f
do_mpzecho	mob_cmds.c	/^void do_mpzecho( CHAR_DATA *ch, char *argument )$/;"	f
do_mset	buildutil.c	/^DECLARE_DO_FUN(do_mset      );$/;"	v
do_mset	buildutil.c	/^void do_mset( CHAR_DATA *ch, char *argument )$/;"	f
do_mstat	buildutil.c	/^DECLARE_DO_FUN(do_mstat     );$/;"	v
do_mstat	buildutil.c	/^void do_mstat( CHAR_DATA *ch, char *argument )$/;"	f
do_mudftp	act_info.c	/^void do_mudftp(CHAR_DATA *ch, char *argument)$/;"	f
do_mug	fight2.c	/^void do_mug( CHAR_DATA *ch, char *argument )$/;"	f
do_murde	fight.c	/^void do_murde( CHAR_DATA *ch, char *argument )$/;"	f
do_murder	fight.c	/^void do_murder( CHAR_DATA *ch, char *argument )$/;"	f
do_murder	special.c	/^DECLARE_DO_FUN(do_murder);$/;"	v
do_music	act_comm.c	/^void do_music( CHAR_DATA *ch, char *argument )$/;"	f
do_mwhere	buildutil.c	/^void do_mwhere( CHAR_DATA *ch, char *argument )$/;"	f
do_name	auth.c	/^void do_name( CHAR_DATA *ch, char *argument )$/;"	f
do_ncatchup	board.c	/^static void do_ncatchup (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_net	fight.c	/^DECLARE_DO_FUN(do_net       );$/;"	v
do_net	fight2.c	/^void do_net( CHAR_DATA *ch, char *argument )$/;"	f
do_new_dump	db2.c	/^void do_new_dump( CHAR_DATA *ch, char *argument )$/;"	f
do_newbie	act_comm.c	/^void do_newbie( CHAR_DATA *ch, char *argument )$/;"	f
do_newlock	act_wiz.c	/^void do_newlock( CHAR_DATA *ch, char *argument )$/;"	f
do_nlist	board.c	/^static void do_nlist (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_noaccept	act_info.c	/^void do_noaccept( CHAR_DATA *ch, char *argument )$/;"	f
do_nocancel	act_info.c	/^void do_nocancel(CHAR_DATA *ch, char *argument)$/;"	f
do_nochannel	penalty.c	/^void do_nochannel( CHAR_DATA *ch, char *argument )$/;"	f
do_noemote	penalty.c	/^void do_noemote( CHAR_DATA *ch, char *argument )$/;"	f
do_nofollow	act_info.c	/^void do_nofollow(CHAR_DATA *ch, char *argument)$/;"	f
do_nolocate	act_info.c	/^void do_nolocate(CHAR_DATA *ch, char *argument)$/;"	f
do_noloot	act_info.c	/^void do_noloot(CHAR_DATA *ch, char *argument)$/;"	f
do_nonote	penalty.c	/^void do_nonote( CHAR_DATA *ch, char *argument )$/;"	f
do_noreply	act_comm.c	/^void do_noreply( CHAR_DATA *ch, char *argument )$/;"	f
do_north	act_move.c	/^void do_north( CHAR_DATA *ch, char *argument )$/;"	f
do_northeast	act_move.c	/^void do_northeast( CHAR_DATA *ch, char *argument )$/;"	f
do_northwest	act_move.c	/^void do_northwest( CHAR_DATA *ch, char *argument )$/;"	f
do_noshout	penalty.c	/^void do_noshout( CHAR_DATA *ch, char *argument )$/;"	f
do_nosummon	act_info.c	/^void do_nosummon(CHAR_DATA *ch, char *argument)$/;"	f
do_nosurrender	act_info.c	/^void do_nosurrender( CHAR_DATA *ch, char *argument )$/;"	f
do_note	board.c	/^void do_note (CHAR_DATA *ch, char *argument)$/;"	f
do_notell	penalty.c	/^void do_notell( CHAR_DATA *ch, char *argument )$/;"	f
do_nowar	warfare.c	/^void do_nowar( CHAR_DATA *ch, char *argument )$/;"	f
do_nread	board.c	/^static void do_nread (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_nremove	board.c	/^static void do_nremove (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_nwrite	board.c	/^static void do_nwrite (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_oedit	olc.c	/^void do_oedit( CHAR_DATA *ch, char *argument )$/;"	f
do_ofind	buildutil.c	/^DECLARE_DO_FUN(do_ofind     );$/;"	v
do_ofind	buildutil.c	/^void do_ofind( CHAR_DATA *ch, char *argument )$/;"	f
do_olc	olc.c	/^void do_olc( CHAR_DATA *ch, char *argument )$/;"	f
do_oload	act_wiz.c	/^DECLARE_DO_FUN(do_oload     );$/;"	v
do_oload	act_wiz.c	/^void do_oload( CHAR_DATA *ch, char *argument )$/;"	f
do_omni	act_wiz.c	/^void do_omni( CHAR_DATA *ch, char *argument )$/;"	f
do_open	act_move.c	/^void do_open( CHAR_DATA *ch, char *argument )$/;"	f
do_open	hunt.c	/^DECLARE_DO_FUN(do_open  );$/;"	v
do_open	special.c	/^DECLARE_DO_FUN(do_open      );$/;"	v
do_openvlist	buildutil.c	/^void do_openvlist( CHAR_DATA *ch, char *argument )$/;"	f
do_order	act_comm.c	/^void do_order( CHAR_DATA *ch, char *argument )$/;"	f
do_oset	buildutil.c	/^DECLARE_DO_FUN(do_oset      );$/;"	v
do_oset	buildutil.c	/^void do_oset( CHAR_DATA *ch, char *argument )$/;"	f
do_ostat	buildutil.c	/^DECLARE_DO_FUN(do_ostat     );$/;"	v
do_ostat	buildutil.c	/^void do_ostat( CHAR_DATA *ch, char *argument )$/;"	f
do_outfit	act_wiz.c	/^void do_outfit ( CHAR_DATA *ch, char *argument )$/;"	f
do_outfit	comm.c	/^DECLARE_DO_FUN(do_outfit    );$/;"	v
do_outfit	nanny.c	/^DECLARE_DO_FUN(do_outfit    );$/;"	v
do_outfit	remort.c	/^DECLARE_DO_FUN( do_outfit );$/;"	v
do_owhere	buildutil.c	/^void do_owhere(CHAR_DATA *ch, char *argument )$/;"	f
do_pardon	penalty.c	/^void do_pardon( CHAR_DATA *ch, char *argument )$/;"	f
do_parole	penalty.c	/^void do_parole( CHAR_DATA *ch, char *argument )$/;"	f
do_password	act_info.c	/^void do_password( CHAR_DATA *ch, char *argument )$/;"	f
do_peace	act_wiz.c	/^void do_peace( CHAR_DATA *ch, char *argument )$/;"	f
do_pecho	act_wiz.c	/^void do_pecho( CHAR_DATA *ch, char *argument )$/;"	f
do_peek	act_info.c	/^void do_peek( CHAR_DATA *ch, char *argument )$/;"	f
do_peel	act_move.c	/^void do_peel ( CHAR_DATA *ch, char *argument)$/;"	f
do_penlist	penalty.c	/^void do_penlist( CHAR_DATA *ch, char *argument )$/;"	f
do_permban	ban.c	/^void do_permban(CHAR_DATA *ch, char *argument)$/;"	f
do_pflag	act_wiz.c	/^void do_pflag( CHAR_DATA *ch, char *argument)$/;"	f
do_pick	act_move.c	/^void do_pick( CHAR_DATA *ch, char *argument )$/;"	f
do_pipe	pipe.c	/^void do_pipe( CHAR_DATA *ch, char *argument )$/;"	f
do_pkil	flags.c	/^void do_pkil( CHAR_DATA *ch, char *argument)$/;"	f
do_pkill	flags.c	/^void do_pkill( CHAR_DATA *ch, char *argument)$/;"	f
do_play	act_info.c	/^DECLARE_DO_FUN( do_play     );$/;"	v
do_play	music.c	/^void do_play(CHAR_DATA *ch, char *argument)$/;"	f
do_pload	act_wiz.c	/^void do_pload( CHAR_DATA *ch, char *argument )$/;"	f
do_pmote	act_comm.c	/^void do_pmote( CHAR_DATA *ch, char *argument )$/;"	f
do_portal	act_enter.c	/^void do_portal( CHAR_DATA *ch, char *argument )$/;"	f
do_pose	act_comm.c	/^void do_pose( CHAR_DATA *ch, char *argument )$/;"	f
do_pour	act_obj.c	/^void do_pour (CHAR_DATA *ch, char *argument)$/;"	f
do_practice	skills.c	/^void do_practice( CHAR_DATA *ch, char *argument )$/;"	f
do_pray	religion.c	/^void do_pray( CHAR_DATA *ch, char *argument )$/;"	f
do_prefi	act_wiz.c	/^void do_prefi (CHAR_DATA *ch, char *argument)$/;"	f
do_prefix	act_wiz.c	/^void do_prefix (CHAR_DATA *ch, char *argument)$/;"	f
do_prompt	act_info.c	/^void do_prompt(CHAR_DATA *ch, char *argument)$/;"	f
do_protect	act_wiz.c	/^void do_protect( CHAR_DATA *ch, char *argument)$/;"	f
do_puncture	fight2.c	/^void do_puncture( CHAR_DATA *ch, char *argument )$/;"	f
do_punish	penalty.c	/^void do_punish( CHAR_DATA *ch, char *argument )$/;"	f
do_punload	act_wiz.c	/^void do_punload( CHAR_DATA *ch, char *argument )$/;"	f
do_purge	act_wiz.c	/^void do_purge( CHAR_DATA *ch, char *argument )$/;"	f
do_put	act_obj.c	/^void do_put( CHAR_DATA *ch, char *argument )$/;"	f
do_qflag	act_wiz.c	/^void do_qflag( CHAR_DATA *ch, char *argument )$/;"	f
do_qlist	act_wiz.c	/^void do_qlist( CHAR_DATA *ch, char *argument )$/;"	f
do_quaff	act_obj.c	/^void do_quaff( CHAR_DATA *ch, char *argument )$/;"	f
do_quest	quest.c	/^void do_quest(CHAR_DATA *ch, char *argument)$/;"	f
do_question	act_comm.c	/^void do_question( CHAR_DATA *ch, char *argument )$/;"	f
do_qui	act_comm.c	/^void do_qui( CHAR_DATA *ch, char *argument )$/;"	f
do_quiet	act_comm.c	/^void do_quiet ( CHAR_DATA *ch, char * argument)$/;"	f
do_quit	act_comm.c	/^DECLARE_DO_FUN(do_quit  );$/;"	v
do_quit	act_comm.c	/^void do_quit( CHAR_DATA *ch, char *argument )$/;"	f
do_quit	act_wiz.c	/^DECLARE_DO_FUN(do_quit      );$/;"	v
do_quit	auth.c	/^DECLARE_DO_FUN(do_quit);$/;"	v
do_quit	remort.c	/^DECLARE_DO_FUN( do_quit );$/;"	v
do_quit	update.c	/^DECLARE_DO_FUN(do_quit      );$/;"	v
do_quote	act_comm.c	/^void do_quote( CHAR_DATA *ch, char *argument )$/;"	f
do_racelist	stats.c	/^void do_racelist(CHAR_DATA *ch, char *argument)$/;"	f
do_raceskills	skills.c	/^void do_raceskills( CHAR_DATA *ch, char *argument )$/;"	f
do_raceskills	stats.c	/^DECLARE_DO_FUN( do_raceskills);$/;"	v
do_rake	fight2.c	/^void do_rake( CHAR_DATA *ch, char *argument )$/;"	f
do_rank	clan.c	/^void do_rank( CHAR_DATA *ch, char *argument )$/;"	f
do_rdoor	redit-ilab.c	/^void do_rdoor (CHAR_DATA *ch, char *argument)$/;"	f
do_rdrop	redit-ilab.c	/^void do_rdrop (CHAR_DATA *ch, char *argument)$/;"	f
do_read	act_info.c	/^void do_read (CHAR_DATA *ch, char *argument )$/;"	f
do_reboo	act_wiz.c	/^void do_reboo( CHAR_DATA *ch, char *argument )$/;"	f
do_reboot	act_wiz.c	/^void do_reboot( CHAR_DATA *ch, char *argument )$/;"	f
do_recall	act_move.c	/^DECLARE_DO_FUN(do_recall    );$/;"	v
do_recall	act_move.c	/^void do_recall( CHAR_DATA *ch, char *argument )$/;"	f
do_recall	fight.c	/^DECLARE_DO_FUN(do_recall    );$/;"	v
do_recall	magic.c	/^DECLARE_DO_FUN(do_recall    );$/;"	v
do_recho	act_wiz.c	/^void do_recho( CHAR_DATA *ch, char *argument )$/;"	f
do_recite	act_obj.c	/^void do_recite( CHAR_DATA *ch, char *argument )$/;"	f
do_recruit	clan.c	/^void do_recruit( CHAR_DATA *ch, char *argument )$/;"	f
do_red	freeze.c	/^void do_red( CHAR_DATA *ch, char *argument )$/;"	f
do_redit	olc.c	/^void do_redit( CHAR_DATA *ch, char *argument )$/;"	f
do_reject	clan.c	/^void do_reject( CHAR_DATA *ch, char *argument )$/;"	f
do_release	act_comm.c	/^void do_release( CHAR_DATA *ch, char *argument )$/;"	f
do_religion	religion.c	/^void do_religion( CHAR_DATA *ch, char *argument )$/;"	f
do_religion_set	religion.c	/^void do_religion_set( CHAR_DATA *ch, char *argument )$/;"	f
do_religion_talk	act_comm.c	/^void do_religion_talk( CHAR_DATA *ch, char *argument )$/;"	f
do_religion_war	religion.c	/^void do_religion_war( CHAR_DATA *ch, char *argument )$/;"	f
do_remember	forget.c	/^void do_remember(CHAR_DATA *ch, char *argument)$/;"	f
do_remort	remort.c	/^void do_remort(CHAR_DATA *ch, char *argument)$/;"	f
do_remove	act_obj.c	/^void do_remove( CHAR_DATA *ch, char *argument )$/;"	f
do_rent	act_comm.c	/^void do_rent( CHAR_DATA *ch, char *argument )$/;"	f
do_replay	act_comm.c	/^void do_replay (CHAR_DATA *ch, char *argument)$/;"	f
do_reply	act_comm.c	/^void do_reply( CHAR_DATA *ch, char *argument )$/;"	f
do_report	act_info.c	/^void do_report( CHAR_DATA *ch, char *argument )$/;"	f
do_rescue	fight2.c	/^void do_rescue( CHAR_DATA *ch, char *argument )$/;"	f
do_reserve	act_wiz.c	/^void do_reserve(CHAR_DATA *ch, char *argument)$/;"	f
do_reserve	auth.c	/^DECLARE_DO_FUN(do_reserve);$/;"	v
do_resets	olc.c	/^void do_resets( CHAR_DATA *ch, char *argument )$/;"	f
do_rest	act_move.c	/^void do_rest( CHAR_DATA *ch, char *argument )$/;"	f
do_restore	act_wiz.c	/^void do_restore( CHAR_DATA *ch, char *argument )$/;"	f
do_restore	fight.c	/^DECLARE_DO_FUN(do_restore   );$/;"	v
do_restore	warfare.c	/^DECLARE_DO_FUN(do_restore);$/;"	v
do_return	act_wiz.c	/^void do_return( CHAR_DATA *ch, char *argument )$/;"	f
do_return	handler.c	/^DECLARE_DO_FUN(do_return    );$/;"	v
do_review	penalty.c	/^void do_review( CHAR_DATA *ch, char *argument )$/;"	f
do_revoke	act_wiz.c	/^DECLARE_DO_FUN(do_revoke    );$/;"	v
do_revoke	grant.c	/^void do_revoke( CHAR_DATA *ch, char *argument )$/;"	f
do_rfind	redit-ilab.c	/^void do_rfind (CHAR_DATA *ch, char *argument)$/;"	f
do_rforce	redit-ilab.c	/^void do_rforce (CHAR_DATA *ch, char* argument)$/;"	f
do_rgive	redit-ilab.c	/^void do_rgive (CHAR_DATA *ch, char *argument)$/;"	f
do_rkill	redit-ilab.c	/^void do_rkill (CHAR_DATA *ch, char *argument)$/;"	f
do_rlook	redit-ilab.c	/^void do_rlook (CHAR_DATA *ch, char *argument)$/;"	f
do_rmob	redit-ilab.c	/^void do_rmob (CHAR_DATA *ch, char *argument)$/;"	f
do_roleplay	flags.c	/^void do_roleplay( CHAR_DATA *ch, char *argument)$/;"	f
do_root	act_move.c	/^void do_root( CHAR_DATA *ch, char *argument )$/;"	f
do_round_swing	fight2.c	/^void do_round_swing( CHAR_DATA *ch, char *argument )$/;"	f
do_roundhouse	fight.c	/^DECLARE_DO_FUN(do_roundhouse);$/;"	v
do_roundhouse	fight2.c	/^void do_roundhouse( CHAR_DATA *ch, char *argument )$/;"	f
do_rput	redit-ilab.c	/^void do_rput (CHAR_DATA *ch, char *argument)$/;"	f
do_rrandom	redit-ilab.c	/^void do_rrandom (CHAR_DATA *ch, char *argument)$/;"	f
do_rset	buildutil.c	/^DECLARE_DO_FUN(do_rset      );$/;"	v
do_rset	buildutil.c	/^void do_rset( CHAR_DATA *ch, char *argument )$/;"	f
do_rstat	buildutil.c	/^DECLARE_DO_FUN(do_rstat     );$/;"	v
do_rstat	buildutil.c	/^void do_rstat( CHAR_DATA *ch, char *argument )$/;"	f
do_rules	act_info.c	/^void do_rules(CHAR_DATA *ch, char *argument)$/;"	f
do_rustle_grub	ranger.c	/^void do_rustle_grub( CHAR_DATA *ch, char *argument )$/;"	f
do_rview	redit-ilab.c	/^void do_rview (CHAR_DATA *ch, char *argument)$/;"	f
do_rvnum	vshift.c	/^void do_rvnum( CHAR_DATA *ch, char *argument )$/;"	f
do_rwear	redit-ilab.c	/^void do_rwear (CHAR_DATA *ch, char *argument)$/;"	f
do_rwhere	redit-ilab.c	/^void do_rwhere (CHAR_DATA *ch, char *argument)$/;"	f
do_sacrifice	act_obj.c	/^void do_sacrifice( CHAR_DATA *ch, char *argument )$/;"	f
do_sacrifice	fight.c	/^DECLARE_DO_FUN(do_sacrifice );$/;"	v
do_savantalk	act_comm.c	/^void do_savantalk( CHAR_DATA *ch, char *argument )$/;"	f
do_save	act_comm.c	/^void do_save( CHAR_DATA *ch, char *argument )$/;"	f
do_save	smith.c	/^DECLARE_DO_FUN(do_save);$/;"	v
do_say	act_comm.c	/^void do_say( CHAR_DATA *ch, char *argument )$/;"	f
do_say	act_info.c	/^DECLARE_DO_FUN(do_say);$/;"	v
do_say	act_obj.c	/^DECLARE_DO_FUN(do_say       );$/;"	v
do_say	hunt.c	/^DECLARE_DO_FUN(do_say   );$/;"	v
do_say	quest.c	/^DECLARE_DO_FUN( do_say );$/;"	v
do_say	remort.c	/^DECLARE_DO_FUN( do_say );$/;"	v
do_say	skills.c	/^DECLARE_DO_FUN(do_say       );$/;"	v
do_say	special.c	/^DECLARE_DO_FUN(do_say   );$/;"	v
do_scan	magic2.c	/^DECLARE_DO_FUN(do_scan      );$/;"	v
do_scan	scan.c	/^void do_scan(CHAR_DATA *ch, char *argument)$/;"	f
do_score	act_info.c	/^void do_score( CHAR_DATA *ch, char *argument )$/;"	f
do_scout	hunt.c	/^void do_scout( CHAR_DATA *ch, char *argument )$/;"	f
do_scribe	magic.c	/^void do_scribe( CHAR_DATA *ch, char *argument )$/;"	f
do_scroll	act_info.c	/^void do_scroll(CHAR_DATA *ch, char *argument)$/;"	f
do_second	act_obj.c	/^void do_second (CHAR_DATA *ch, char *argument)$/;"	f
do_second	fight.c	/^DECLARE_DO_FUN(do_second    );$/;"	v
do_sedit	social-edit.c	/^void do_sedit (CHAR_DATA *ch, char *argument)$/;"	f
do_sell	act_obj.c	/^void do_sell( CHAR_DATA *ch, char *argument )$/;"	f
do_semiauto	fight.c	/^DECLARE_DO_FUN(do_semiauto  );$/;"	v
do_semiauto	fight2.c	/^void do_semiauto( CHAR_DATA *ch, char *argument)$/;"	f
do_set	buildutil.c	/^void do_set( CHAR_DATA *ch, char *argument )$/;"	f
do_set_snare	act_move.c	/^void do_set_snare ( CHAR_DATA *ch, char *argument)$/;"	f
do_setskill	skills.c	/^void do_setskill(CHAR_DATA *ch, char *argument)$/;"	f
do_shelter	ranger.c	/^void do_shelter( CHAR_DATA *ch ) $/;"	f
do_shield_bash	fight.c	/^DECLARE_DO_FUN(do_shield_bash);$/;"	v
do_shield_bash	fight2.c	/^void do_shield_bash( CHAR_DATA *ch, char *argument )$/;"	f
do_shoot_lock	act_move.c	/^void do_shoot_lock( CHAR_DATA *ch, char *argument )$/;"	f
do_shout	act_comm.c	/^void do_shout( CHAR_DATA *ch, char *argument )$/;"	f
do_show	act_info.c	/^void do_show(CHAR_DATA *ch, char *argument)$/;"	f
do_showrace	stats.c	/^void do_showrace(CHAR_DATA *ch, char *argument)$/;"	f
do_showskill	skills.c	/^void do_showskill(CHAR_DATA *ch,char *argument)$/;"	f
do_shutdow	act_wiz.c	/^void do_shutdow( CHAR_DATA *ch, char *argument )$/;"	f
do_shutdown	act_wiz.c	/^void do_shutdown( CHAR_DATA *ch, char *argument )$/;"	f
do_sing	song.c	/^void do_sing( CHAR_DATA *ch, char *argument )$/;"	f
do_sire	act_obj.c	/^void do_sire( CHAR_DATA *ch, char *argument )$/;"	f
do_sit	act_move.c	/^void do_sit (CHAR_DATA *ch, char *argument )$/;"	f
do_skill	skills.c	/^void do_skill( CHAR_DATA *ch, char *argument )$/;"	f
do_skills	comm.c	/^DECLARE_DO_FUN(do_skills    );$/;"	v
do_skills	nanny.c	/^DECLARE_DO_FUN(do_skills    );$/;"	v
do_skills	skills.c	/^void do_skills(CHAR_DATA *ch, char *argument)$/;"	f
do_sla	act_wiz.c	/^void do_sla( CHAR_DATA *ch, char *argument )$/;"	f
do_slash_throat	fight2.c	/^void do_slash_throat( CHAR_DATA *ch, char *argument )$/;"	f
do_slay	act_wiz.c	/^void do_slay( CHAR_DATA *ch, char *argument )$/;"	f
do_sleep	act_move.c	/^void do_sleep( CHAR_DATA *ch, char *argument )$/;"	f
do_slookup	buildutil.c	/^DECLARE_DO_FUN(do_slookup   );$/;"	v
do_slookup	skills.c	/^void do_slookup( CHAR_DATA *ch, char *argument )$/;"	f
do_smoke	act_obj.c	/^void do_smoke( CHAR_DATA *ch, char *argument )$/;"	f
do_smote	act_wiz.c	/^void do_smote(CHAR_DATA *ch, char *argument )$/;"	f
do_sneak	act_move.c	/^void do_sneak( CHAR_DATA *ch, char *argument )$/;"	f
do_snipe	fight.c	/^DECLARE_DO_FUN(do_snipe     );$/;"	v
do_snipe	fight2.c	/^void do_snipe( CHAR_DATA *ch, char *argument )$/;"	f
do_snoop	act_wiz.c	/^void do_snoop( CHAR_DATA *ch, char *argument )$/;"	f
do_social	act_info.c	/^void do_social(CHAR_DATA *ch, char *argument)$/;"	f
do_socials	act_info.c	/^void do_socials(CHAR_DATA *ch, char *argument)$/;"	f
do_sockets	act_wiz.c	/^void do_sockets( CHAR_DATA *ch, char *argument )$/;"	f
do_south	act_move.c	/^void do_south( CHAR_DATA *ch, char *argument )$/;"	f
do_southeast	act_move.c	/^void do_southeast( CHAR_DATA *ch, char *argument )$/;"	f
do_southwest	act_move.c	/^void do_southwest( CHAR_DATA *ch, char *argument )$/;"	f
do_spells	skills.c	/^void do_spells(CHAR_DATA *ch, char *argument)$/;"	f
do_spellup	healer.c	/^void do_spellup(CHAR_DATA *ch, char *argument)$/;"	f
do_spit	fight.c	/^DECLARE_DO_FUN(do_spit      );$/;"	v
do_spit	fight2.c	/^void do_spit( CHAR_DATA *ch, char *argument )$/;"	f
do_split	act_comm.c	/^void do_split( CHAR_DATA *ch, char *argument )$/;"	f
do_split	act_obj.c	/^DECLARE_DO_FUN(do_split     );$/;"	v
do_sset	buildutil.c	/^DECLARE_DO_FUN(do_sset      );$/;"	v
do_sset	buildutil.c	/^void do_sset( CHAR_DATA *ch, char *argument )$/;"	f
do_stalk	hunt.c	/^void do_stalk( CHAR_DATA *ch, char *argument )$/;"	f
do_stance	fight.c	/^DECLARE_DO_FUN(do_stance    );$/;"	v
do_stance	fight.c	/^void do_stance (CHAR_DATA *ch, char *argument)$/;"	f
do_stance_list	act_info.c	/^void do_stance_list( CHAR_DATA *ch, char *argument )$/;"	f
do_stand	act_enter.c	/^DECLARE_DO_FUN(do_stand     );$/;"	v
do_stand	act_move.c	/^DECLARE_DO_FUN(do_stand     );$/;"	v
do_stand	act_move.c	/^void do_stand( CHAR_DATA *ch, char *argument )$/;"	f
do_stand	act_wiz.c	/^DECLARE_DO_FUN(do_stand     );$/;"	v
do_stare	scan.c	/^void do_stare(CHAR_DATA *ch)$/;"	f
do_startwar	quest.c	/^DECLARE_DO_FUN( do_startwar );$/;"	v
do_startwar	warfare.c	/^void do_startwar( CHAR_DATA *ch, char *argument )$/;"	f
do_stat	buildutil.c	/^void do_stat ( CHAR_DATA *ch, char *argument )$/;"	f
do_stats	stats.c	/^void do_stats( CHAR_DATA *ch, char *argument )$/;"	f
do_steal	act_obj.c	/^void do_steal( CHAR_DATA *ch, char *argument )$/;"	f
do_sticky	act_wiz.c	/^void do_sticky( CHAR_DATA *ch, char *argument )$/;"	f
do_stopwar	warfare.c	/^void do_stopwar( CHAR_DATA *ch, char *argument )$/;"	f
do_story	act_info.c	/^void do_story(CHAR_DATA *ch, char *argument)$/;"	f
do_string	act_wiz.c	/^void do_string( CHAR_DATA *ch, char *argument )$/;"	f
do_surrender	fight2.c	/^void do_surrender( CHAR_DATA *ch, char *argument )$/;"	f
do_survey	act_info.c	/^void do_survey( CHAR_DATA *ch, char *argument )$/;"	f
do_switch	act_wiz.c	/^void do_switch( CHAR_DATA *ch, char *argument )$/;"	f
do_tag	freeze.c	/^void do_tag( CHAR_DATA *ch, char *argument )$/;"	f
do_tame	ranger.c	/^void do_tame( CHAR_DATA *ch, char *argument )$/;"	f
do_tattoo	tattoo.c	/^void do_tattoo( CHAR_DATA *ch, char *argument )$/;"	f
do_taxidermy	ranger.c	/^void do_taxidermy(CHAR_DATA *ch, char *argument)$/;"	f
do_tell	act_comm.c	/^void do_tell( CHAR_DATA *ch, char *argument )$/;"	f
do_time	act_info.c	/^void do_time( CHAR_DATA *ch, char *argument )$/;"	f
do_title	act_info.c	/^void do_title( CHAR_DATA *ch, char *argument )$/;"	f
do_torch	ranger.c	/^void do_torch(CHAR_DATA *ch)$/;"	f
do_train	stats.c	/^void do_train( CHAR_DATA *ch, char *argument )$/;"	f
do_transfer	act_wiz.c	/^void do_transfer( CHAR_DATA *ch, char *argument )$/;"	f
do_transfer	freeze.c	/^DECLARE_DO_FUN( do_transfer );$/;"	v
do_treat_weapon	ranger.c	/^void do_treat_weapon(CHAR_DATA *ch, char *argument)$/;"	f
do_trigger_safe	act_comm.c	/^void do_trigger_safe( CHAR_DATA *ch, char *argument )$/;"	f
do_trip	fight.c	/^DECLARE_DO_FUN(do_trip      );$/;"	v
do_trip	fight2.c	/^void do_trip( CHAR_DATA *ch, char *argument )$/;"	f
do_trust	act_wiz.c	/^void do_trust( CHAR_DATA *ch, char *argument )$/;"	f
do_try	act_comm.c	/^void do_try ( CHAR_DATA *ch, char *argument )$/;"	f
do_tumble	fight.c	/^DECLARE_DO_FUN(do_tumble    );$/;"	v
do_tumble	fight2.c	/^void do_tumble( CHAR_DATA *ch, char *argument)$/;"	f
do_turn_in	act_comm.c	/^void do_turn_in ( CHAR_DATA *ch, char *argument )$/;"	f
do_typo	act_comm.c	/^void do_typo( CHAR_DATA *ch, char *argument )$/;"	f
do_unalias	alias.c	/^void do_unalias(CHAR_DATA *ch, char *argument)$/;"	f
do_unjam	act_move.c	/^void do_unjam(CHAR_DATA *ch, char *argument)$/;"	f
do_unlock	act_move.c	/^void do_unlock( CHAR_DATA *ch, char *argument )$/;"	f
do_unread	comm.c	/^DECLARE_DO_FUN(do_unread    );$/;"	v
do_unread	nanny.c	/^DECLARE_DO_FUN(do_unread    );$/;"	v
do_up	act_move.c	/^void do_up( CHAR_DATA *ch, char *argument )$/;"	f
do_uppercut	fight.c	/^DECLARE_DO_FUN(do_uppercut  );$/;"	v
do_uppercut	fight2.c	/^void do_uppercut(CHAR_DATA *ch, char *argument )$/;"	f
do_value	act_obj.c	/^void do_value( CHAR_DATA *ch, char *argument )$/;"	f
do_violate	act_wiz.c	/^void do_violate( CHAR_DATA *ch, char *argument )$/;"	f
do_visible	act_move.c	/^void do_visible( CHAR_DATA *ch, char *argument )$/;"	f
do_visible	remort.c	/^DECLARE_DO_FUN( do_visible );$/;"	v
do_vlist	buildutil.c	/^void do_vlist (CHAR_DATA *ch, char *argument)$/;"	f
do_vnum	buildutil.c	/^void do_vnum(CHAR_DATA *ch, char *argument)$/;"	f
do_wake	act_move.c	/^void do_wake( CHAR_DATA *ch, char *argument )$/;"	f
do_wake	act_obj.c	/^DECLARE_DO_FUN(do_wake      );$/;"	v
do_war_cry	fight.c	/^DECLARE_DO_FUN(do_war_cry   ); $/;"	v
do_war_cry	fight2.c	/^void do_war_cry( CHAR_DATA *ch, char *argument)$/;"	f
do_warsit	warfare.c	/^void do_warsit( CHAR_DATA *ch, char *argument )$/;"	f
do_warstatus	warfare.c	/^void do_warstatus( CHAR_DATA *ch, char *argument )$/;"	f
do_wear	act_obj.c	/^void do_wear( CHAR_DATA *ch, char *argument )$/;"	f
do_weather	act_info.c	/^void do_weather( CHAR_DATA *ch, char *argument )$/;"	f
do_west	act_move.c	/^void do_west( CHAR_DATA *ch, char *argument )$/;"	f
do_where	act_info.c	/^void do_where( CHAR_DATA *ch, char *argument )$/;"	f
do_where	magic2.c	/^DECLARE_DO_FUN(do_where );$/;"	v
do_who	act_info.c	/^void do_who( CHAR_DATA *ch, char *argument )$/;"	f
do_whois	act_info.c	/^void do_whois (CHAR_DATA *ch, char *argument)$/;"	f
do_wimpy	act_info.c	/^void do_wimpy( CHAR_DATA *ch, char *argument )$/;"	f
do_withdraw	act_obj.c	/^void do_withdraw ( CHAR_DATA *ch, char *argument )$/;"	f
do_wizhelp	interp.c	/^void do_wizhelp( CHAR_DATA *ch, char *argument )$/;"	f
do_wizlist	wizlist.c	/^void do_wizlist(CHAR_DATA *ch, char *argument)$/;"	f
do_wizlock	act_wiz.c	/^void do_wizlock( CHAR_DATA *ch, char *argument )$/;"	f
do_wiznet	act_wiz.c	/^void do_wiznet( CHAR_DATA *ch, char *argument )$/;"	f
do_worth	act_info.c	/^DECLARE_DO_FUN(do_worth);$/;"	v
do_worth	act_info.c	/^void do_worth( CHAR_DATA *ch, char *argument )$/;"	f
do_yell	act_comm.c	/^void do_yell( CHAR_DATA *ch, char *argument )$/;"	f
do_yell	act_obj.c	/^DECLARE_DO_FUN(do_yell      );$/;"	v
do_yell	fight.c	/^DECLARE_DO_FUN(do_yell      );$/;"	v
do_yell	special.c	/^DECLARE_DO_FUN(do_yell      );$/;"	v
do_zap	act_obj.c	/^void do_zap( CHAR_DATA *ch, char *argument )$/;"	f
do_zecho	act_wiz.c	/^void do_zecho(CHAR_DATA *ch, char *argument)$/;"	f
donothing	hunt.c	/^void donothing()$/;"	f
door_reset_desc	redit-ilab.c	/^static char* door_reset_desc (int state)$/;"	f	file:
door_resets	tables.c	/^const struct flag_type door_resets[] =$/;"	v
dragon	special.c	/^bool dragon( CHAR_DATA *ch, char *spell_name )$/;"	f
drop_align	update.c	/^void drop_align( CHAR_DATA *ch )$/;"	f
drop_eq	handler.c	/^void drop_eq( CHAR_DATA *ch )$/;"	f
dumb_effect	effects.c	/^void dumb_effect(void *vo, int level, int dam, int target)$/;"	f
durability	smith.c	/^int durability(OBJ_DATA *obj)$/;"	f
dye_table	smith.c	/^const struct dye_type dye_table[] =$/;"	v
dye_type	smith.c	/^struct dye_type$/;"	s	file:
echo_off_str	comm.c	/^const   char    echo_off_str    [] = { '\\0' };$/;"	v
echo_off_str	comm.c	/^const   char    echo_off_str    [] = { IAC, WILL, TELOPT_ECHO, '\\0' };$/;"	v
echo_on_str	comm.c	/^const   char    echo_on_str     [] = { IAC, WONT, TELOPT_ECHO, '\\0' };$/;"	v
echo_on_str	comm.c	/^const   char    echo_on_str [] = { '\\0' };$/;"	v
echo_on_str	comm.c	/^const   char    echo_on_str [] = { IAC, WONT, TELOPT_ECHO, '\\0' };$/;"	v
edit_done	olc.c	/^bool edit_done( CHAR_DATA *ch )$/;"	f
editor_table	olc.c	/^const struct editor_cmd_type editor_table[] =$/;"	v
enchant_obj	enchant.c	/^void enchant_obj( OBJ_DATA *obj, int ops )$/;"	f
enchant_obj_max	enchant.c	/^void enchant_obj_max( OBJ_DATA *obj, int ops )$/;"	f
enchant_obj_roll	enchant.c	/^void enchant_obj_roll( OBJ_DATA *obj, int ops )$/;"	f
enchant_obj_stat	enchant.c	/^void enchant_obj_stat( OBJ_DATA *obj, int ops )$/;"	f
enter_game	nanny.c	/^void enter_game ( DESCRIPTOR_DATA *d )$/;"	f
equip_char	handler.c	/^void equip_char( CHAR_DATA *ch, OBJ_DATA *obj, int iWear )$/;"	f
equip_new_arrows	fight.c	/^void equip_new_arrows( CHAR_DATA *ch )$/;"	f
exists_player	auth.c	/^bool exists_player( char *name )$/;"	f
exit_flags	tables.c	/^const struct flag_type exit_flags[] =$/;"	v
exit_free	mem.c	/^EXIT_DATA		*	exit_free;$/;"	v
exit_ok	hunt.c	/^int exit_ok( EXIT_DATA *pexit )$/;"	f
exits_fixed	db.c	/^bool            exits_fixed = FALSE;$/;"	v
exp_per_level	skills.c	/^int exp_per_level(CHAR_DATA *ch, int points)$/;"	f
expand_arg	mob_prog.c	/^void expand_arg( char *buf, $/;"	f
expl_in_container	act_obj.c	/^bool expl_in_container( OBJ_DATA *obj)$/;"	f
explode	update.c	/^void explode(OBJ_DATA *obj)$/;"	f
extra	smith.c	/^	tflag extra;$/;"	m	struct:workmanship_type	file:
extra_bit_name	handler.c	/^char* extra_bit_name( int flag )$/;"	f
extra_bits_name	handler.c	/^char* extra_bits_name( tflag flag )$/;"	f
extra_descr_free	mem.c	/^EXTRA_DESCR_DATA	*	extra_descr_free;$/;"	v
extra_descr_free	recycle.c	/^EXTRA_DESCR_DATA *extra_descr_free;$/;"	v
extra_flags	tables.c	/^const struct flag_type extra_flags[] =$/;"	v
extract_char	handler.c	/^void extract_char( CHAR_DATA *ch, bool fPull )$/;"	f
extract_char_eq	handler.c	/^void extract_char_eq( CHAR_DATA *ch, OBJ_CHECK_FUN *extract_it, int to_loc )$/;"	f
extract_char_new	handler.c	/^void extract_char_new( CHAR_DATA *ch, bool fPull, bool extract_objects)$/;"	f
extract_char_obj	handler.c	/^void extract_char_obj( CHAR_DATA *ch, OBJ_CHECK_FUN *extract_it, int to_loc,$/;"	f
extract_obj	handler.c	/^void extract_obj( OBJ_DATA *obj )$/;"	f
extract_update	update.c	/^void extract_update( void )$/;"	f
fBootDb	db.c	/^bool            fBootDb;$/;"	v
fLogAll	interp.c	/^bool                fLogAll     = FALSE;$/;"	v
fgetf	pipe.c	/^char *fgetf( char *s, int n, register FILE *iop )$/;"	f
final_player_save	simsave.c	/^void final_player_save()$/;"	f
findFTPChar	ftp.c	/^static CHAR_DATA *findFTPChar(DESCRIPTOR_DATA *d) {$/;"	f	file:
find_command	interp.c	/^int find_command( CHAR_DATA *ch, char *command, bool exact )$/;"	f
find_door	act_move.c	/^int find_door( CHAR_DATA *ch, char *arg )$/;"	f
find_help_data	act_info.c	/^HELP_DATA* find_help_data( CHAR_DATA *ch, char *argument, BUFFER *output )$/;"	f
find_jail_room	penalty.c	/^ROOM_INDEX_DATA *find_jail_room(void)$/;"	f
find_keeper	act_obj.c	/^CHAR_DATA *find_keeper( CHAR_DATA *ch )$/;"	f
find_key	act_move.c	/^OBJ_DATA *find_key( CHAR_DATA *ch, int key )$/;"	f
find_location	handler.c	/^ROOM_INDEX_DATA *find_location( CHAR_DATA *ch, char *arg )$/;"	f
find_location_new	handler.c	/^ROOM_INDEX_DATA *find_location_new( CHAR_DATA *ch, char *arg, bool area )$/;"	f
find_mem_size	buffer.c	/^int find_mem_size (int min_size)$/;"	f
find_mob_area	redit-ilab.c	/^static MOB_INDEX_DATA* find_mob_area (AREA_DATA *area, char* keyword)$/;"	f	file:
find_mob_here	redit-ilab.c	/^static RESET_DATA *find_mob_here (ROOM_INDEX_DATA *room, char* argument)$/;"	f	file:
find_mp_location	mob_cmds.c	/^ROOM_INDEX_DATA* find_mp_location( CHAR_DATA *ch, char *arg )$/;"	f
find_note	board.c	/^static NOTE_DATA* find_note (CHAR_DATA *ch, BOARD_DATA *board, int num)$/;"	f	file:
find_obj_area	redit-ilab.c	/^static OBJ_INDEX_DATA* find_obj_area (AREA_DATA *area, char* keyword)$/;"	f	file:
find_obj_here	redit-ilab.c	/^static RESET_DATA *find_obj_here (ROOM_INDEX_DATA *room, char* argument)$/;"	f	file:
find_path	hunt.c	/^int find_path( int in_room_vnum, int out_room_vnum, CHAR_DATA *ch, $/;"	f
find_spell	magic.c	/^int find_spell( CHAR_DATA *ch, const char *name )$/;"	f
fingertime	bsave.c	/^int fingertime;$/;"	v
finish_file	ftp.c	/^static void finish_file(DESCRIPTOR_DATA *d) {$/;"	f	file:
finish_note	board.c	/^void finish_note (BOARD_DATA *board, NOTE_DATA *note)$/;"	f
fire_effect	effects.c	/^void fire_effect(void *vo, int level, int dam, int target)$/;"	f
first_arg	string.c	/^char *first_arg( char *argument, char *arg_first, bool fCase )$/;"	f
first_auth_name	auth.c	/^AUTH_LIST *first_auth_name;$/;"	v
first_line	buildutil.c	/^char* first_line( char* str )$/;"	f
first_reserved	act_wiz.c	/^RESERVED_DATA *first_reserved;$/;"	v
fix_exits	db.c	/^void fix_exits( void )$/;"	f
fix_mobprogs	db.c	/^void fix_mobprogs( void )$/;"	f
fix_sex	comm.c	/^void fix_sex(CHAR_DATA *ch)$/;"	f
fix_string	olc_save.c	/^char *fix_string( const char *str )$/;"	f
flag_add_malus	act_obj.c	/^int flag_add_malus( OBJ_DATA *weapon )$/;"	f
flag_bit_name	handler.c	/^char* flag_bit_name( struct flag_type flag_table[], int flag )$/;"	f
flag_bits_name	handler.c	/^char* flag_bits_name( struct flag_type flag_table[], tflag flag )$/;"	f
flag_clear	tflag.c	/^void flag_clear( tflag f )$/;"	f
flag_convert	db.c	/^long flag_convert(char letter )$/;"	f
flag_convert_old	tflag.c	/^int flag_convert_old( long vector )$/;"	f
flag_copy	tflag.c	/^void flag_copy( tflag target, tflag source )$/;"	f
flag_copy_vector	tflag.c	/^void flag_copy_vector( tflag f, long vector )$/;"	f
flag_equal	tflag.c	/^bool flag_equal( tflag f1, tflag f2 )$/;"	f
flag_is_empty	tflag.c	/^bool flag_is_empty( tflag f )$/;"	f
flag_is_set	tflag.c	/^bool flag_is_set( tflag f, int bit )$/;"	f
flag_lookup	lookup.c	/^int flag_lookup (const char *name, const struct flag_type *flag_table)$/;"	f
flag_remove	tflag.c	/^void flag_remove( tflag f, int bit )$/;"	f
flag_remove_field	tflag.c	/^void flag_remove_field( tflag f, tflag f_rem )$/;"	f
flag_remove_vector	tflag.c	/^void flag_remove_vector( tflag f, long vector )$/;"	f
flag_set	tflag.c	/^void flag_set( tflag f, int bit )$/;"	f
flag_set_field	tflag.c	/^void flag_set_field( tflag f, tflag f_set )$/;"	f
flag_set_vector	tflag.c	/^void flag_set_vector( tflag f, long vector )$/;"	f
flag_stat_string	bit.c	/^char *flag_stat_string( const struct flag_type *flag_table, int bit )$/;"	f
flag_stat_table	bit.c	/^const struct flag_stat_type flag_stat_table[] =$/;"	v
flag_stat_type	bit.c	/^struct flag_stat_type$/;"	s	file:
flag_string	bit.c	/^char *flag_string( const struct flag_type *flag_table, tflag bits )$/;"	f
flag_toggle	tflag.c	/^void flag_toggle( tflag f, int bit )$/;"	f
flag_value	bit.c	/^int flag_value( const struct flag_type *flag_table, char *argument)$/;"	f
flush_descriptor	comm.c	/^bool flush_descriptor( DESCRIPTOR_DATA *d )$/;"	f
fn_evals	mob_prog.c	/^const keyword_list fn_evals =$/;"	v
fn_keyword	mob_prog.c	/^const keyword_list fn_keyword =$/;"	v
follower_get_rank	religion.c	/^int follower_get_rank( FOLLOWER_DATA *fol )$/;"	f
follower_is_priest	religion.c	/^bool follower_is_priest( FOLLOWER_DATA *fol )$/;"	f
follower_load_from_file	religion.c	/^FOLLOWER_DATA* follower_load_from_file( RELIGION_DATA *religion, FILE *fp )$/;"	f
follower_save_to_buffer	religion.c	/^void follower_save_to_buffer( FOLLOWER_DATA *list, DBUFFER *fp )$/;"	f
force_full_save	simsave.c	/^void force_full_save()$/;"	f
force_wrap	string.c	/^char *force_wrap( char *old_string )$/;"	f
forget_attacker	hunt.c	/^void forget_attacker(CHAR_DATA *ch, CHAR_DATA *attacker)$/;"	f
forget_attacks	hunt.c	/^void forget_attacks(CHAR_DATA *ch)$/;"	f
form	aclone.c	/^	tflag        form;$/;"	m	struct:mob_index_data	file:
form_bit_name	handler.c	/^char* form_bit_name( int flag )$/;"	f
form_bits_name	handler.c	/^char* form_bits_name( tflag flag )$/;"	f
form_flags	tables.c	/^const struct flag_type form_flags[] =$/;"	v
format_init_flags	db.c	/^void format_init_flags( void )$/;"	f
format_obj_to_char	act_info.c	/^char *format_obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch, bool fShort )$/;"	f
format_race_flags	db.c	/^void format_race_flags( void )$/;"	f
format_smithy_flags	smith.c	/^void format_smithy_flags( void )$/;"	f
format_string	string.c	/^char *format_string( char *oldstring \/*, bool fSpace *\/)$/;"	f
fpArea	db.c	/^FILE *          fpArea;$/;"	v
fpReserve	comm.c	/^FILE *          fpReserve;      \/* Reserved file handle     *\/$/;"	v
fread_auth	auth.c	/^void fread_auth( FILE *fp )$/;"	f
fread_clan	clan.c	/^void fread_clan( FILE *fp, int clannum )$/;"	f
fread_clan_rank	clan.c	/^void fread_clan_rank( FILE *fp, int clannum, int ranknum )$/;"	f
fread_flag	db.c	/^long fread_flag( FILE *fp)$/;"	f
fread_letter	db.c	/^char fread_letter( FILE *fp )$/;"	f
fread_number	db.c	/^int fread_number( FILE *fp )$/;"	f
fread_string	db.c	/^char *fread_string( FILE *fp )$/;"	f
fread_string_eol	db.c	/^char *fread_string_eol( FILE *fp )$/;"	f
fread_string_eol_old	db.c	/^char *fread_string_eol_old( FILE *fp )$/;"	f
fread_tflag	tflag.c	/^void fread_tflag( FILE *fp, tflag f )$/;"	f
fread_to_eol	db.c	/^void fread_to_eol( FILE *fp )$/;"	f
fread_word	db.c	/^char *fread_word( FILE *fp )$/;"	f
free_affect	recycle.c	/^void free_affect(AFFECT_DATA *af)$/;"	f
free_area	mem.c	/^void free_area( AREA_DATA *pArea )$/;"	f
free_ban	recycle.c	/^void free_ban(BAN_DATA *ban)$/;"	f
free_buf	recycle.c	/^void free_buf(BUFFER *buffer)$/;"	f
free_char	recycle.c	/^void free_char (CHAR_DATA *ch)$/;"	f
free_crime	recycle.c	/^void free_crime(CRIME_DATA *crime)$/;"	f
free_descriptor	recycle.c	/^void free_descriptor(DESCRIPTOR_DATA *d)$/;"	f
free_exit	mem.c	/^void free_exit( EXIT_DATA *pExit )$/;"	f
free_extra_descr	recycle.c	/^void free_extra_descr(EXTRA_DESCR_DATA *ed)$/;"	f
free_follower	religion.c	/^void free_follower( FOLLOWER_DATA *fol )$/;"	f
free_follower_list	religion.c	/^void free_follower_list( FOLLOWER_DATA *list )$/;"	f
free_gen_data	recycle.c	/^void free_gen_data(GEN_DATA *gen)$/;"	f
free_grep_data	grep.c	/^void free_grep_data( GREP_DATA *gd )$/;"	f
free_grep_list	grep.c	/^void free_grep_list( GREP_DATA *gd )$/;"	f
free_mem	db.c	/^void free_mem( void *pMem, int sMem )$/;"	f
free_mem_data	recycle.c	/^void free_mem_data(MEM_DATA *memory)$/;"	f
free_mob_index	mem.c	/^void free_mob_index( MOB_INDEX_DATA *pMob )$/;"	f
free_mpcode	mem.c	/^void free_mpcode(MPROG_CODE *pMcode)$/;"	f
free_mprog	recycle.c	/^void free_mprog(MPROG_LIST *mp)$/;"	f
free_note	recycle.c	/^void free_note(NOTE_DATA *note)$/;"	f
free_obj	recycle.c	/^void free_obj(OBJ_DATA *obj)$/;"	f
free_obj_index	mem.c	/^void free_obj_index( OBJ_INDEX_DATA *pObj )$/;"	f
free_pcdata	recycle.c	/^void free_pcdata(PC_DATA *pcdata)$/;"	f
free_portal	recycle.c	/^void free_portal( PORTAL_DATA *portal )$/;"	f
free_quest	recycle.c	/^void free_quest(QUEST_DATA *quest)$/;"	f
free_relic	religion.c	/^void free_relic( OBJ_DATA *obj )$/;"	f
free_religion	religion.c	/^void free_religion( RELIGION_DATA* religion )$/;"	f
free_religion_war	religion.c	/^void free_religion_war( RELIGION_WAR_DATA *war )$/;"	f
free_religion_war_list	religion.c	/^void free_religion_war_list( RELIGION_WAR_DATA *war )$/;"	f
free_reset_data	mem.c	/^void free_reset_data( RESET_DATA *pReset )$/;"	f
free_room_index	mem.c	/^void free_room_index( ROOM_INDEX_DATA *pRoom )$/;"	f
free_shop	mem.c	/^void free_shop( SHOP_DATA *pShop )$/;"	f
free_sort	recycle.c	/^void free_sort(SORT_TABLE *sort)$/;"	f
free_string	db.c	/^void free_string( char *pstr )$/;"	f
free_who_data	recycle.c	/^void free_who_data(WHO_DATA *who)$/;"	f
free_wiz	recycle.c	/^void free_wiz(WIZ_DATA *wiz)$/;"	f
ftag_chamber	freeze.c	/^int ftag_chamber=0;$/;"	v
ftag_next	freeze.c	/^int ftag_next=0;$/;"	v
ftag_reset_player	freeze.c	/^void ftag_reset_player(CHAR_DATA *ch, char *argument)$/;"	f
ftag_reward	freeze.c	/^int ftag_reward = 0;$/;"	v
ftag_table	freeze.c	/^int ftag_table[4][2]=$/;"	v
ftp_checksum	ftp.c	/^static const char *ftp_checksum(const char *string) {$/;"	f	file:
ftp_control	comm.c	/^int             ftp_control = -1;   \/* Control socket of FTP (-1 if inactive) *\/$/;"	v
ftp_push	ftp.c	/^bool ftp_push(DESCRIPTOR_DATA *d) {$/;"	f
ftpport	comm.c	/^u_short ftpport;$/;"	v
full_dam	fight.c	/^bool full_dam( CHAR_DATA *ch,CHAR_DATA *victim,int dam,int dt,int dam_type,$/;"	f
fun	religion.c	/^    GOD_FUN *fun;$/;"	m	struct:god_action	file:
furniture_flags	tables.c	/^const struct flag_type furniture_flags[]=$/;"	v
fwrite_flag	olc_save.c	/^char *fwrite_flag( long flags, char buf[] )$/;"	f
gain_condition	update.c	/^void gain_condition( CHAR_DATA *ch, int iCond, int value )$/;"	f
gain_exp	update.c	/^void gain_exp( CHAR_DATA *ch, int gain)$/;"	f
gain_faith	religion.c	/^void gain_faith( CHAR_DATA *ch, int gain )$/;"	f
gain_mod	update.c	/^int gain_mod(int x)$/;"	f
game_loop_mac_msdos	comm.c	/^void game_loop_mac_msdos( void )$/;"	f
game_loop_unix	comm.c	/^void game_loop_unix( int control )$/;"	f
gen_data_free	recycle.c	/^GEN_DATA *gen_data_free;$/;"	v
gen_groups	nanny.c	/^bool	gen_groups ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
generate_quest	quest.c	/^void generate_quest(CHAR_DATA *ch, CHAR_DATA *questman)$/;"	f
get_ac	stats.c	/^int get_ac( CHAR_DATA *ch, int type )$/;"	f
get_affect_ops	grep.c	/^float get_affect_ops( AFFECT_DATA *aff )$/;"	f
get_age	handler.c	/^int get_age( CHAR_DATA *ch )$/;"	f
get_alignment	nanny.c	/^bool	get_alignment ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_area_data	olc.c	/^AREA_DATA *get_area_data( int vnum )$/;"	f
get_auth_name	auth.c	/^AUTH_LIST *get_auth_name( char *name )$/;"	f
get_auth_state	auth.c	/^int get_auth_state( CHAR_DATA *ch )$/;"	f
get_ch_rank_name	religion.c	/^char* get_ch_rank_name( CHAR_DATA *ch )$/;"	f
get_char_area	handler.c	/^CHAR_DATA *get_char_area( CHAR_DATA *ch, char *argument )$/;"	f
get_char_new	handler.c	/^CHAR_DATA *get_char_new( CHAR_DATA *ch, char *argument, bool area, bool exact )$/;"	f
get_char_room	handler.c	/^CHAR_DATA *get_char_room( CHAR_DATA *ch, char *argument )$/;"	f
get_char_room_new	handler.c	/^CHAR_DATA *get_char_room_new( CHAR_DATA *ch, char *argument, bool exact )$/;"	f
get_char_world	handler.c	/^CHAR_DATA *get_char_world( CHAR_DATA *ch, char *argument )$/;"	f
get_colour	nanny.c	/^bool get_colour( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_combat_victim	fight.c	/^CHAR_DATA* get_combat_victim( CHAR_DATA *ch, char *argument )$/;"	f
get_cost	act_obj.c	/^int get_cost( CHAR_DATA *keeper, OBJ_DATA *obj, bool fBuy )$/;"	f
get_creation_mode	nanny.c	/^bool get_creation_mode(DESCRIPTOR_DATA *d, char *argument)$/;"	f
get_crime_count	penalty.c	/^int get_crime_count( CHAR_DATA *ch, char *crime_name, char *imm_name )$/;"	f
get_curr_stat	stats.c	/^int get_curr_stat( CHAR_DATA *ch, int stat )$/;"	f
get_damroll	stats.c	/^int get_damroll( CHAR_DATA *ch )$/;"	f
get_disguise_vnum	act_info.c	/^MOB_INDEX_DATA* get_disguise_vnum( char *name )$/;"	f
get_enchant_ops	enchant.c	/^int get_enchant_ops( OBJ_DATA *obj, int level )$/;"	f
get_encumberance	stats.c	/^int get_encumberance( CHAR_DATA *ch )$/;"	f
get_eq_char	handler.c	/^OBJ_DATA *get_eq_char( CHAR_DATA *ch, int iWear )$/;"	f
get_eq_corpse	handler.c	/^void get_eq_corpse( CHAR_DATA *ch, OBJ_DATA *corpse )$/;"	f
get_extra_descr	db.c	/^char *get_extra_descr( const char *name, EXTRA_DESCR_DATA *ed )$/;"	f
get_faith	religion.c	/^int get_faith( CHAR_DATA *ch )$/;"	f
get_final_master	fight.c	/^CHAR_DATA* get_final_master( CHAR_DATA *ch )$/;"	f
get_god_name	religion.c	/^char* get_god_name( CHAR_DATA *ch )$/;"	f
get_hitroll	stats.c	/^int get_hitroll( CHAR_DATA *ch )$/;"	f
get_last_reset	db.c	/^RESET_DATA* get_last_reset( RESET_DATA *reset_list )$/;"	f
get_level_stats	olc_act.c	/^int* get_level_stats( int level )$/;"	f
get_max_train	stats.c	/^int get_max_train( CHAR_DATA *ch, int stat )$/;"	f
get_mimic	handler.c	/^MOB_INDEX_DATA* get_mimic( CHAR_DATA *ch )$/;"	f
get_mimic_PERS	handler.c	/^char* get_mimic_PERS( CHAR_DATA *ch, CHAR_DATA *looker )$/;"	f
get_mob_id	recycle.c	/^long get_mob_id(void)$/;"	f
get_mob_index	db.c	/^MOB_INDEX_DATA *get_mob_index( int vnum )$/;"	f
get_mob_vnum_room	mob_prog.c	/^bool get_mob_vnum_room( CHAR_DATA *ch, sh_int vnum )$/;"	f
get_mob_vnum_world	handler.c	/^CHAR_DATA* get_mob_vnum_world( int vnum )$/;"	f
get_morph_pc_race_type	stats.c	/^struct pc_race_type* get_morph_pc_race_type( CHAR_DATA *ch )$/;"	f
get_morph_race_type	stats.c	/^struct race_type* get_morph_race_type( CHAR_DATA *ch )$/;"	f
get_mp_char	mob_cmds.c	/^CHAR_DATA* get_mp_char( CHAR_DATA *ch, char *argument )$/;"	f
get_mp_obj	mob_cmds.c	/^OBJ_DATA* get_mp_obj( CHAR_DATA *ch, char *argument )$/;"	f
get_mprog_index	db.c	/^MPROG_CODE *get_mprog_index( int vnum )$/;"	f
get_name	nanny.c	/^bool get_name ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_new_class	nanny.c	/^bool	get_new_class ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_new_password	nanny.c	/^bool	get_new_password ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_new_race	nanny.c	/^bool get_new_race ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_new_sex	nanny.c	/^bool	get_new_sex ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_next_victim	magic.c	/^CHAR_DATA* get_next_victim( CHAR_DATA *ch, CHAR_DATA *start_victim )$/;"	f
get_obj	act_obj.c	/^void get_obj( CHAR_DATA *ch, OBJ_DATA *obj, OBJ_DATA *container )$/;"	f
get_obj_area	handler.c	/^OBJ_DATA *get_obj_area( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_carry	handler.c	/^OBJ_DATA *get_obj_carry( CHAR_DATA *ch, char *argument, CHAR_DATA *viewer )$/;"	f
get_obj_carry_new	handler.c	/^OBJ_DATA *get_obj_carry_new( CHAR_DATA *ch, char *arg, CHAR_DATA *viewer,$/;"	f
get_obj_char	handler.c	/^CHAR_DATA* get_obj_char( OBJ_DATA *obj )$/;"	f
get_obj_faith_worth	act_obj.c	/^int get_obj_faith_worth( OBJ_DATA *obj )$/;"	f
get_obj_here	handler.c	/^OBJ_DATA *get_obj_here( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_here_new	handler.c	/^OBJ_DATA *get_obj_here_new( CHAR_DATA *ch, char *argument, bool exact )$/;"	f
get_obj_index	db.c	/^OBJ_INDEX_DATA *get_obj_index( int vnum )$/;"	f
get_obj_index_ops	grep.c	/^int get_obj_index_ops( OBJ_INDEX_DATA *obj )$/;"	f
get_obj_index_spec	grep.c	/^int get_obj_index_spec( OBJ_INDEX_DATA *obj )$/;"	f
get_obj_keeper	act_obj.c	/^OBJ_DATA *get_obj_keeper( CHAR_DATA *ch, CHAR_DATA *keeper, char *argument )$/;"	f
get_obj_list	handler.c	/^OBJ_DATA *get_obj_list( CHAR_DATA *ch, char *argument, OBJ_DATA *list )$/;"	f
get_obj_list_new	handler.c	/^OBJ_DATA *get_obj_list_new( CHAR_DATA *ch, char *arg, OBJ_DATA *list, $/;"	f
get_obj_new	handler.c	/^OBJ_DATA *get_obj_new( CHAR_DATA *ch, char *argument, bool area, bool exact )$/;"	f
get_obj_number	handler.c	/^int get_obj_number( OBJ_DATA *obj )$/;"	f
get_obj_ops	grep.c	/^int get_obj_ops( OBJ_DATA *obj )$/;"	f
get_obj_room	handler.c	/^ROOM_INDEX_DATA *get_obj_room(OBJ_DATA *obj)$/;"	f
get_obj_spec	grep.c	/^int get_obj_spec( OBJ_DATA *obj )$/;"	f
get_obj_type	handler.c	/^OBJ_DATA *get_obj_type( OBJ_INDEX_DATA *pObjIndex )$/;"	f
get_obj_vnum_room	mob_prog.c	/^bool get_obj_vnum_room( CHAR_DATA *ch, sh_int vnum )$/;"	f
get_obj_wear	handler.c	/^OBJ_DATA *get_obj_wear( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_wear_new	handler.c	/^OBJ_DATA *get_obj_wear_new( CHAR_DATA *ch, char *arg,$/;"	f
get_obj_weight	handler.c	/^int get_obj_weight( OBJ_DATA *obj )$/;"	f
get_obj_world	handler.c	/^OBJ_DATA *get_obj_world( CHAR_DATA *ch, char *argument )$/;"	f
get_old_password	nanny.c	/^bool	get_old_password ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_order	mob_prog.c	/^int get_order( CHAR_DATA *ch )$/;"	f
get_pc_id	recycle.c	/^long get_pc_id(void)$/;"	f
get_pkflag	act_info.c	/^char get_pkflag( CHAR_DATA *ch, CHAR_DATA *wch )$/;"	f
get_pkgrade	act_info.c	/^char *get_pkgrade( int pts )$/;"	f
get_player	handler.c	/^CHAR_DATA* get_player( char *name )$/;"	f
get_portal_room	act_enter.c	/^ROOM_INDEX_DATA* get_portal_room( char *name )$/;"	f
get_race_skill	skills.c	/^int get_race_skill( CHAR_DATA *ch, int sn )$/;"	f
get_random_char	mob_prog.c	/^CHAR_DATA *get_random_char( CHAR_DATA *mob )$/;"	f
get_random_room	act_enter.c	/^ROOM_INDEX_DATA  *get_random_room(CHAR_DATA *ch)$/;"	f
get_random_room_area	act_enter.c	/^ROOM_INDEX_DATA  *get_random_room_area(CHAR_DATA *ch)$/;"	f
get_random_room_range	act_enter.c	/^ROOM_INDEX_DATA  *get_random_room_range(CHAR_DATA *ch, int min_vnum, int max_vnum)$/;"	f
get_random_stats	stats.c	/^void get_random_stats(CHAR_DATA *ch)$/;"	f
get_random_war_room	act_enter.c	/^ROOM_INDEX_DATA  *get_random_war_room(CHAR_DATA *ch)$/;"	f
get_rating_name	olc_act.c	/^char* get_rating_name( int rating )$/;"	f
get_reaction	hunt.c	/^int get_reaction( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
get_religion	religion.c	/^RELIGION_DATA *get_religion( CHAR_DATA *ch )$/;"	f
get_religion_bonus	religion.c	/^int get_religion_bonus( CHAR_DATA *ch )$/;"	f
get_religion_by_ID	religion.c	/^RELIGION_DATA* get_religion_by_ID( int ID )$/;"	f
get_religion_by_name	religion.c	/^RELIGION_DATA* get_religion_by_name( char *name )$/;"	f
get_religion_follower_data	religion.c	/^FOLLOWER_DATA* get_religion_follower_data( char *name )$/;"	f
get_religion_of_altar	religion.c	/^RELIGION_DATA *get_religion_of_altar( ROOM_INDEX_DATA *room )$/;"	f
get_religion_of_guard	religion.c	/^RELIGION_DATA *get_religion_of_guard( CHAR_DATA *guard )$/;"	f
get_religion_rank_name	religion.c	/^char* get_religion_rank_name( int rank )$/;"	f
get_reset_number	olc.c	/^int get_reset_number( ROOM_INDEX_DATA *room, char command, int vnum )$/;"	f
get_revers_exit	olc_act.c	/^EXIT_DATA* get_revers_exit( ROOM_INDEX_DATA *pRoom, int door, bool changed )$/;"	f
get_room_area	handler.c	/^ROOM_INDEX_DATA* get_room_area( AREA_DATA *area, char *argument )$/;"	f
get_room_in_range	handler.c	/^ROOM_INDEX_DATA* get_room_in_range( int min_vnum, int max_vnum, char *argument, bool exact )$/;"	f
get_room_index	db.c	/^ROOM_INDEX_DATA *get_room_index( int vnum )$/;"	f
get_room_world	handler.c	/^ROOM_INDEX_DATA* get_room_world( char *argument )$/;"	f
get_save	magic.c	/^int get_save(CHAR_DATA *ch)$/;"	f
get_size	recycle.c	/^int get_size (int val)$/;"	f
get_skill	skills.c	/^int get_skill(CHAR_DATA *ch, int sn)$/;"	f
get_sn_damage	magic.c	/^int get_sn_damage( int sn, int level, CHAR_DATA *ch )$/;"	f
get_sn_heal	magic.c	/^int get_sn_heal( int sn, int level, CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
get_spell_damage	magic.c	/^int get_spell_damage( int mana, int lag, int level )$/;"	f
get_spell_heal	magic.c	/^int get_spell_heal( int mana, int lag, int level )$/;"	f
get_spell_target	magic.c	/^bool get_spell_target( CHAR_DATA *ch, char *arg, int sn, \/* input *\/$/;"	f
get_stat_priority	nanny.c	/^bool	get_stat_priority ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_tattoo	tattoo.c	/^int get_tattoo( tattoo_list tl, int loc )$/;"	f
get_tattoo_ch	tattoo.c	/^int get_tattoo_ch( CHAR_DATA *ch, int loc )$/;"	f
get_true_weight	handler.c	/^int get_true_weight(OBJ_DATA *obj)$/;"	f
get_trust	handler.c	/^int get_trust( CHAR_DATA *ch )$/;"	f
get_vnum_area	olc_act.c	/^AREA_DATA *get_vnum_area( int vnum )$/;"	f
get_waiting_desc	auth.c	/^CHAR_DATA *get_waiting_desc( CHAR_DATA *ch, char *name ) $/;"	f
get_war_status_by_name	religion.c	/^int get_war_status_by_name( char *name )$/;"	f
get_weapon_damage	fight.c	/^int get_weapon_damage( OBJ_DATA *wield )$/;"	f
get_weapon_damtype	fight.c	/^int get_weapon_damtype( OBJ_DATA *wield )$/;"	f
get_weapon_skill	skills.c	/^int get_weapon_skill(CHAR_DATA *ch, int sn)$/;"	f
get_weapon_sn	handler.c	/^int get_weapon_sn(CHAR_DATA *ch)$/;"	f
get_weapon_sn_new	handler.c	/^int get_weapon_sn_new(CHAR_DATA *ch, bool secondary)$/;"	f
getline	string.c	/^char *getline( char *str, char *buf )$/;"	f
gettimeofday	comm.c	/^int gettimeofday( struct timeval *tp, void *tzp )$/;"	f
gettimeofday	comm.c	/^void gettimeofday( struct timeval *tp, void *tzp )$/;"	f
give_ftag_reward	freeze.c	/^void give_ftag_reward(int team, int amount)$/;"	f
global_immediate_flush	act_wiz.c	/^bool global_immediate_flush = FALSE;$/;"	v
global_immediate_flush	act_wiz.c	/^bool global_immediate_flush = TRUE;$/;"	v
gn_add	skills.c	/^void gn_add( CHAR_DATA *ch, int gn)$/;"	f
gn_remove	skills.c	/^void gn_remove( CHAR_DATA *ch, int gn)$/;"	f
go_ahead_str	comm.c	/^const   char    go_ahead_str    [] = { '\\0' };$/;"	v
go_ahead_str	comm.c	/^const   char    go_ahead_str    [] = { IAC, GA, '\\0' };$/;"	v
god	comm.c	/^bool            god;        \/* All new chars are gods!  *\/$/;"	v
god_action	religion.c	/^struct god_action$/;"	s	file:
god_bless	religion.c	/^bool god_bless( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_cleanse	religion.c	/^bool god_cleanse( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_confuse	religion.c	/^bool god_confuse( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_curse	religion.c	/^bool god_curse( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_defy	religion.c	/^bool god_defy( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_enlighten	religion.c	/^bool god_enlighten( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_haunt	religion.c	/^bool god_haunt( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_heal	religion.c	/^bool god_heal( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_plague	religion.c	/^bool god_plague( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_protect	religion.c	/^bool god_protect( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_slow	religion.c	/^bool god_slow( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_speed	religion.c	/^bool god_speed( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
god_table	religion.c	/^GOD_ACTION god_table[] =$/;"	v
going	freeze.c	/^bool going=FALSE;$/;"	v
grant_add	grant.c	/^void grant_add(CHAR_DATA *ch, char *name, DO_FUN *do_fun, int duration, int level)$/;"	f
grant_duration	grant.c	/^int grant_duration(CHAR_DATA *ch, DO_FUN *do_fun)$/;"	f
grant_level	grant.c	/^void grant_level( CHAR_DATA *ch, CHAR_DATA *victim, int level, int duration )$/;"	f
grant_remove	grant.c	/^void grant_remove(CHAR_DATA *ch, DO_FUN *do_fun, bool mshow)$/;"	f
greet_ftp	ftp.c	/^void greet_ftp (DESCRIPTOR_DATA *d, const char *argument) {$/;"	f
grep_data	grep.c	/^struct grep_data$/;"	s	file:
grep_mob	grep.c	/^void grep_mob( CHAR_DATA *ch, char *argument, int min_vnum, int max_vnum )$/;"	f
grep_obj	grep.c	/^void grep_obj( CHAR_DATA *ch, char *argument, int min_vnum, int max_vnum )$/;"	f
grep_room	grep.c	/^void grep_room( CHAR_DATA *ch, char *argument, int min_vnum, int max_vnum )$/;"	f
group_add	skills.c	/^void group_add( CHAR_DATA *ch, const char *name, bool deduct)$/;"	f
group_gain	fight.c	/^void group_gain( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
group_lookup	skills.c	/^int group_lookup( const char *name )$/;"	f
group_remove	skills.c	/^void group_remove(CHAR_DATA *ch, const char *name)$/;"	f
group_table	const.c	/^const   struct  group_type      group_table     [MAX_GROUP]     =$/;"	v
gsn_absolute_zero	db.c	/^sh_int  gsn_absolute_zero;$/;"	v
gsn_aim	db.c	/^sh_int  gsn_aim;$/;"	v
gsn_alchemy	db.c	/^sh_int  gsn_alchemy;$/;"	v
gsn_alertness	db.c	/^sh_int  gsn_alertness;$/;"	v
gsn_ambush	db.c	/^sh_int  gsn_ambush;$/;"	v
gsn_anatomy	db.c	/^sh_int  gsn_anatomy;$/;"	v
gsn_anklebiter	db.c	/^sh_int  gsn_anklebiter;$/;"	v
gsn_appraise	db.c	/^sh_int  gsn_appraise;$/;"	v
gsn_arcana	db.c	/^sh_int  gsn_arcana;$/;"	v
gsn_arcane_lore	db.c	/^sh_int	gsn_arcane_lore;$/;"	v
gsn_ashura	db.c	/^sh_int  gsn_ashura;$/;"	v
gsn_assassination	db.c	/^sh_int  gsn_assassination;$/;"	v
gsn_astral	db.c	/^sh_int  gsn_astral;$/;"	v
gsn_avoidance	db.c	/^sh_int  gsn_avoidance;$/;"	v
gsn_axe	db.c	/^sh_int  gsn_axe;$/;"	v
gsn_back_leap	db.c	/^sh_int  gsn_back_leap;$/;"	v
gsn_backstab	db.c	/^sh_int  gsn_backstab;$/;"	v
gsn_bash	db.c	/^sh_int  gsn_bash;$/;"	v
gsn_bear	db.c	/^sh_int  gsn_bear;$/;"	v
gsn_beheading	db.c	/^sh_int  gsn_beheading;$/;"	v
gsn_berserk	db.c	/^sh_int  gsn_berserk;$/;"	v
gsn_bite	db.c	/^sh_int  gsn_bite;$/;"	v
gsn_blackjack	db.c	/^sh_int  gsn_blackjack;$/;"	v
gsn_blade_dance	db.c	/^sh_int  gsn_blade_dance;$/;"	v
gsn_bless	db.c	/^sh_int	gsn_bless;$/;"	v
gsn_blessed_darkness	db.c	/^sh_int  gsn_blessed_darkness;$/;"	v
gsn_blindfighting	db.c	/^sh_int  gsn_blindfighting;$/;"	v
gsn_blindness	db.c	/^sh_int  gsn_blindness;$/;"	v
gsn_bloodbath	db.c	/^sh_int  gsn_bloodbath;$/;"	v
gsn_boa	db.c	/^sh_int  gsn_boa;$/;"	v
gsn_bodyguard	db.c	/^sh_int  gsn_bodyguard;$/;"	v
gsn_bow	db.c	/^sh_int  gsn_bow;   $/;"	v
gsn_brawl	db.c	/^sh_int  gsn_brawl;$/;"	v
gsn_brutal_damage	db.c	/^sh_int  gsn_brutal_damage;$/;"	v
gsn_bunny	db.c	/^sh_int	gsn_bunny;$/;"	v
gsn_burst	db.c	/^sh_int  gsn_burst;$/;"	v
gsn_cacophony	song.c	/^sh_int gsn_cacophony;$/;"	v
gsn_camp_fire	db.c	/^sh_int  gsn_camp_fire;$/;"	v
gsn_charge	db.c	/^sh_int  gsn_charge;$/;"	v
gsn_charm_person	db.c	/^sh_int  gsn_charm_person;$/;"	v
gsn_choke_hold	db.c	/^sh_int  gsn_choke_hold;$/;"	v
gsn_chop	db.c	/^sh_int  gsn_chop;$/;"	v
gsn_circle	db.c	/^sh_int  gsn_circle;$/;"	v
gsn_climbing	db.c	/^sh_int  gsn_climbing;$/;"	v
gsn_cone_of_exhaustion	db.c	/^sh_int  gsn_cone_of_exhaustion;$/;"	v
gsn_confusion	db.c	/^sh_int  gsn_confusion;$/;"	v
gsn_crush	db.c	/^sh_int  gsn_crush;$/;"	v
gsn_curse	db.c	/^sh_int  gsn_curse;$/;"	v
gsn_dagger	db.c	/^sh_int  gsn_dagger;$/;"	v
gsn_deaths_door	db.c	/^sh_int  gsn_deaths_door;$/;"	v
gsn_decompose	db.c	/^sh_int  gsn_decompose;$/;"	v
gsn_detoxify	db.c	/^sh_int  gsn_detoxify;$/;"	v
gsn_dimensional_blade	db.c	/^sh_int  gsn_dimensional_blade;$/;"	v
gsn_dirt	db.c	/^sh_int  gsn_dirt;$/;"	v
gsn_disarm	db.c	/^sh_int  gsn_disarm;$/;"	v
gsn_disarm_trap	db.c	/^sh_int  gsn_disarm_trap;$/;"	v
gsn_disguise	db.c	/^sh_int  gsn_disguise;$/;"	v
gsn_distract	db.c	/^sh_int  gsn_distract;$/;"	v
gsn_dodge	db.c	/^sh_int  gsn_dodge;$/;"	v
gsn_double_strike	db.c	/^sh_int  gsn_double_strike;$/;"	v
gsn_dowsing	db.c	/^sh_int  gsn_dowsing;$/;"	v
gsn_dragon	db.c	/^sh_int  gsn_dragon;$/;"	v
gsn_drain_life	db.c	/^sh_int  gsn_drain_life;$/;"	v
gsn_drunken_fury	db.c	/^sh_int  gsn_drunken_fury;$/;"	v
gsn_dual_axe	db.c	/^sh_int  gsn_dual_axe;$/;"	v
gsn_dual_dagger	db.c	/^sh_int  gsn_dual_dagger;$/;"	v
gsn_dual_gun	db.c	/^sh_int  gsn_dual_gun;$/;"	v
gsn_dual_sword	db.c	/^sh_int  gsn_dual_sword;$/;"	v
gsn_dual_wield	db.c	/^sh_int  gsn_dual_wield;$/;"	v
gsn_duck	db.c	/^sh_int  gsn_duck;$/;"	v
gsn_eagle	db.c	/^sh_int  gsn_eagle;$/;"	v
gsn_eel	db.c	/^sh_int  gsn_eel;$/;"	v
gsn_electrocution	db.c	/^sh_int  gsn_electrocution;$/;"	v
gsn_elemental_blade	db.c	/^sh_int  gsn_elemental_blade;$/;"	v
gsn_elude	db.c	/^sh_int  gsn_elude;$/;"	v
gsn_enchant_arrow	db.c	/^sh_int  gsn_enchant_arrow;$/;"	v
gsn_endurance	db.c	/^sh_int  gsn_endurance;$/;"	v
gsn_enhanced_damage	db.c	/^sh_int  gsn_enhanced_damage;$/;"	v
gsn_entrapment	db.c	/^sh_int	gsn_entrapment;$/;"	v
gsn_envenom	db.c	/^sh_int  gsn_envenom;$/;"	v
gsn_epidemic	db.c	/^sh_int  gsn_epidemic;$/;"	v
gsn_estimate	db.c	/^sh_int  gsn_estimate;$/;"	v
gsn_evasive	db.c	/^sh_int  gsn_evasive;$/;"	v
gsn_extra_attack	db.c	/^sh_int  gsn_extra_attack;$/;"	v
gsn_fade	db.c	/^sh_int  gsn_fade;$/;"	v
gsn_fast_healing	db.c	/^sh_int  gsn_fast_healing;$/;"	v
gsn_fatal_blow	db.c	/^sh_int  gsn_fatal_blow;$/;"	v
gsn_fear	db.c	/^sh_int  gsn_fear;$/;"	v
gsn_feint	db.c	/^sh_int  gsn_feint;$/;"	v
gsn_finesse	db.c	/^sh_int  gsn_finesse;$/;"	v
gsn_fire_breath	db.c	/^sh_int  gsn_fire_breath;$/;"	v
gsn_firewitchs_seance	db.c	/^sh_int  gsn_firewitchs_seance;$/;"	v
gsn_firstaid	db.c	/^sh_int  gsn_firstaid;$/;"	v
gsn_fishing	db.c	/^sh_int  gsn_fishing;$/;"	v
gsn_flail	db.c	/^sh_int  gsn_flail;$/;"	v
gsn_fledging	db.c	/^sh_int  gsn_fledging;$/;"	v
gsn_flee	db.c	/^sh_int	gsn_flee;$/;"	v
gsn_fly	db.c	/^sh_int  gsn_fly;$/;"	v
gsn_focus	db.c	/^sh_int  gsn_focus;$/;"	v
gsn_forage	db.c	/^sh_int  gsn_forage;$/;"	v
gsn_fullauto	db.c	/^sh_int  gsn_fullauto;$/;"	v
gsn_giantfeller	db.c	/^sh_int  gsn_giantfeller;$/;"	v
gsn_goblincleaver	db.c	/^sh_int  gsn_goblincleaver;$/;"	v
gsn_god_bless	db.c	/^sh_int  gsn_god_bless;$/;"	v
gsn_god_curse	db.c	/^sh_int  gsn_god_curse;$/;"	v
gsn_gouge	db.c	/^sh_int  gsn_gouge;$/;"	v
gsn_guard	db.c	/^sh_int  gsn_guard;$/;"	v
gsn_gun	db.c	/^sh_int  gsn_gun;   $/;"	v
gsn_haggle	db.c	/^sh_int  gsn_haggle;$/;"	v
gsn_hand_to_hand	db.c	/^sh_int  gsn_hand_to_hand;$/;"	v
gsn_haste	db.c	/^sh_int  gsn_haste;$/;"	v
gsn_headbutt	db.c	/^sh_int  gsn_headbutt;$/;"	v
gsn_hide	db.c	/^sh_int  gsn_hide;$/;"	v
gsn_hogtie	db.c	/^sh_int  gsn_hogtie;$/;"	v
gsn_hunt	db.c	/^sh_int  gsn_hunt;     $/;"	v
gsn_hurl	db.c	/^sh_int  gsn_hurl;$/;"	v
gsn_ignite	db.c	/^sh_int  gsn_ignite;$/;"	v
gsn_immolation	db.c	/^sh_int  gsn_immolation;$/;"	v
gsn_inquisition	db.c	/^sh_int  gsn_inquisition;$/;"	v
gsn_intimidation	db.c	/^sh_int  gsn_intimidation;$/;"	v
gsn_introspection	db.c	/^sh_int  gsn_introspection;$/;"	v
gsn_invis	db.c	/^sh_int  gsn_invis;$/;"	v
gsn_jihad	db.c	/^sh_int  gsn_jihad;$/;"	v
gsn_jump_up	db.c	/^sh_int  gsn_jump_up;$/;"	v
gsn_kamikaze	db.c	/^sh_int	gsn_kamikaze;$/;"	v
gsn_kick	db.c	/^sh_int  gsn_kick;$/;"	v
gsn_korinns_inspiration	db.c	/^sh_int  gsn_korinns_inspiration;$/;"	v
gsn_kung_fu	db.c	/^sh_int  gsn_kung_fu;$/;"	v
gsn_laughing_fit	db.c	/^sh_int  gsn_laughing_fit;$/;"	v
gsn_leadership	db.c	/^sh_int  gsn_leadership;$/;"	v
gsn_leg_sweep	db.c	/^sh_int  gsn_leg_sweep;$/;"	v
gsn_lion	db.c	/^sh_int  gsn_lion;$/;"	v
gsn_lore	db.c	/^sh_int  gsn_lore;$/;"	v
gsn_lust_life	song.c	/^sh_int gsn_lust_life;$/;"	v
gsn_mace	db.c	/^sh_int  gsn_mace;$/;"	v
gsn_mana_shield	db.c	/^sh_int  gsn_mana_shield;$/;"	v
gsn_mass_combat	db.c	/^sh_int  gsn_mass_combat;$/;"	v
gsn_mass_confusion	db.c	/^sh_int  gsn_mass_confusion;$/;"	v
gsn_mass_invis	db.c	/^sh_int  gsn_mass_invis;$/;"	v
gsn_maul	db.c	/^sh_int  gsn_maul;$/;"	v
gsn_meditation	db.c	/^sh_int  gsn_meditation;$/;"	v
gsn_melee	db.c	/^sh_int  gsn_melee;$/;"	v
gsn_mimic	db.c	/^sh_int  gsn_mimic;$/;"	v
gsn_mirror_image	db.c	/^sh_int  gsn_mirror_image;$/;"	v
gsn_mug	db.c	/^sh_int  gsn_mug;$/;"	v
gsn_necrosis	db.c	/^sh_int  gsn_necrosis;$/;"	v
gsn_net	db.c	/^sh_int  gsn_net;$/;"	v
gsn_parademias_bile	db.c	/^sh_int  gsn_parademias_bile;$/;"	v
gsn_parry	db.c	/^sh_int  gsn_parry;$/;"	v
gsn_pathfind	db.c	/^sh_int  gsn_pathfind;$/;"	v
gsn_peek	db.c	/^sh_int  gsn_peek;$/;"	v
gsn_peel	db.c	/^sh_int  gsn_peel;$/;"	v
gsn_phoenix	db.c	/^sh_int  gsn_phoenix;$/;"	v
gsn_pick_lock	db.c	/^sh_int  gsn_pick_lock;$/;"	v
gsn_pied_piper	song.c	/^sh_int gsn_pied_piper;$/;"	v
gsn_pistol_whip	db.c	/^sh_int  gsn_pistol_whip;$/;"	v
gsn_plague	db.c	/^sh_int  gsn_plague;$/;"	v
gsn_poison	db.c	/^sh_int  gsn_poison;$/;"	v
gsn_polearm	db.c	/^sh_int  gsn_polearm;$/;"	v
gsn_porcupine	db.c	/^sh_int  gsn_porcupine;$/;"	v
gsn_prayer	db.c	/^sh_int	gsn_prayer;$/;"	v
gsn_prot_magic	db.c	/^sh_int  gsn_prot_magic;$/;"	v
gsn_puncture	db.c	/^sh_int  gsn_puncture;$/;"	v
gsn_puppetry	db.c	/^sh_int  gsn_puppetry;$/;"	v
gsn_quick_draw	db.c	/^sh_int  gsn_quick_draw;$/;"	v
gsn_quirkys_insanity	db.c	/^sh_int  gsn_quirkys_insanity;$/;"	v
gsn_raft	db.c	/^sh_int  gsn_raft;  $/;"	v
gsn_rage	db.c	/^sh_int  gsn_rage;$/;"	v
gsn_razor_claws	db.c	/^sh_int  gsn_razor_claws;$/;"	v
gsn_recall	db.c	/^sh_int  gsn_recall;$/;"	v
gsn_reflection	db.c	/^sh_int  gsn_reflection;$/;"	v
gsn_regeneration	db.c	/^sh_int  gsn_regeneration;$/;"	v
gsn_rescue	db.c	/^sh_int  gsn_rescue;$/;"	v
gsn_retreat	db.c	/^sh_int	gsn_retreat;$/;"	v
gsn_retribution	db.c	/^sh_int  gsn_retribution;$/;"	v
gsn_rhino	db.c	/^sh_int  gsn_rhino;$/;"	v
gsn_ritual	db.c	/^sh_int  gsn_ritual;$/;"	v
gsn_round_swing	db.c	/^sh_int  gsn_round_swing;$/;"	v
gsn_roundhouse	db.c	/^sh_int  gsn_roundhouse;$/;"	v
gsn_rustle_grub	db.c	/^sh_int  gsn_rustle_grub;$/;"	v
gsn_sanctuary	db.c	/^sh_int  gsn_sanctuary;$/;"	v
gsn_scorpion	db.c	/^sh_int  gsn_scorpion;$/;"	v
gsn_scribe	db.c	/^sh_int  gsn_scribe;$/;"	v
gsn_scrolls	db.c	/^sh_int  gsn_scrolls;$/;"	v
gsn_second_attack	db.c	/^sh_int  gsn_second_attack;$/;"	v
gsn_semiauto	db.c	/^sh_int  gsn_semiauto;$/;"	v
gsn_set_snare	db.c	/^sh_int  gsn_set_snare;$/;"	v
gsn_shadowclaw	db.c	/^sh_int  gsn_shadowclaw;$/;"	v
gsn_shadowessence	db.c	/^sh_int  gsn_shadowessence;$/;"	v
gsn_shadowsoul	db.c	/^sh_int  gsn_shadowsoul;$/;"	v
gsn_shadowwalk	db.c	/^sh_int  gsn_shadowwalk;$/;"	v
gsn_shafts_theme	song.c	/^sh_int gsn_shafts_theme;$/;"	v
gsn_shan_ya	db.c	/^sh_int  gsn_shan_ya;$/;"	v
gsn_sharp_shooting	db.c	/^sh_int  gsn_sharp_shooting;$/;"	v
gsn_shelter	db.c	/^sh_int  gsn_shelter;$/;"	v
gsn_shield_bash	db.c	/^sh_int  gsn_shield_bash;$/;"	v
gsn_shield_block	db.c	/^sh_int  gsn_shield_block;$/;"	v
gsn_shoot_lock	db.c	/^sh_int  gsn_shoot_lock;$/;"	v
gsn_showdown	db.c	/^sh_int  gsn_showdown;$/;"	v
gsn_slash_throat	db.c	/^sh_int  gsn_slash_throat;$/;"	v
gsn_sleep	db.c	/^sh_int  gsn_sleep;$/;"	v
gsn_slow	db.c	/^sh_int  gsn_slow;$/;"	v
gsn_sneak	db.c	/^sh_int  gsn_sneak;$/;"	v
gsn_snipe	db.c	/^sh_int  gsn_snipe;$/;"	v
gsn_soothe	db.c	/^sh_int  gsn_soothe;$/;"	v
gsn_spear	db.c	/^sh_int  gsn_spear;$/;"	v
gsn_spit	db.c	/^sh_int  gsn_spit;$/;"	v
gsn_stalk	db.c	/^sh_int  gsn_stalk;$/;"	v
gsn_staves	db.c	/^sh_int  gsn_staves;$/;"	v
gsn_steal	db.c	/^sh_int  gsn_steal;$/;"	v
gsn_streetwise	db.c	/^sh_int  gsn_streetwise;$/;"	v
gsn_survey	db.c	/^sh_int  gsn_survey;$/;"	v
gsn_sustenance	db.c	/^sh_int  gsn_sustenance;   $/;"	v
gsn_swaydes_mercy	db.c	/^sh_int  gsn_swaydes_mercy;$/;"	v
gsn_swimming	db.c	/^sh_int  gsn_swimming;$/;"	v
gsn_sword	db.c	/^sh_int  gsn_sword;$/;"	v
gsn_tame	db.c	/^sh_int  gsn_tame;$/;"	v
gsn_target_practice	db.c	/^sh_int  gsn_target_practice;$/;"	v
gsn_taxidermy	db.c	/^sh_int  gsn_taxidermy;$/;"	v
gsn_tempest	db.c	/^sh_int  gsn_tempest;$/;"	v
gsn_third_attack	db.c	/^sh_int  gsn_third_attack;$/;"	v
gsn_thousand_yard_stare	db.c	/^sh_int  gsn_thousand_yard_stare;$/;"	v
gsn_tiger	db.c	/^sh_int  gsn_tiger;$/;"	v
gsn_toad	db.c	/^sh_int  gsn_toad;$/;"	v
gsn_tomb_rot	db.c	/^sh_int  gsn_tomb_rot;$/;"	v
gsn_torch	db.c	/^sh_int  gsn_torch;$/;"	v
gsn_tortoise	db.c	/^sh_int  gsn_tortoise;$/;"	v
gsn_treat_weapon	db.c	/^sh_int  gsn_treat_weapon;$/;"	v
gsn_trip	db.c	/^sh_int  gsn_trip;$/;"	v
gsn_tumbling	db.c	/^sh_int  gsn_tumbling;$/;"	v
gsn_two_handed	db.c	/^sh_int  gsn_two_handed;$/;"	v
gsn_unicorn	db.c	/^sh_int  gsn_unicorn;$/;"	v
gsn_unjam	db.c	/^sh_int  gsn_unjam;$/;"	v
gsn_uppercut	db.c	/^sh_int  gsn_uppercut;$/;"	v
gsn_vampire_hunting	db.c	/^sh_int  gsn_vampire_hunting;$/;"	v
gsn_vampiric_bite	db.c	/^sh_int  gsn_vampiric_bite;$/;"	v
gsn_venom_bite	db.c	/^sh_int  gsn_venom_bite;$/;"	v
gsn_wands	db.c	/^sh_int  gsn_wands;$/;"	v
gsn_war_cry	db.c	/^sh_int  gsn_war_cry;$/;"	v
gsn_weapons_lore	db.c	/^sh_int  gsn_weapons_lore;$/;"	v
gsn_wendigo	db.c	/^sh_int  gsn_wendigo;$/;"	v
gsn_werewolf_hunting	db.c	/^sh_int  gsn_werewolf_hunting;$/;"	v
gsn_whip	db.c	/^sh_int  gsn_whip;$/;"	v
gsn_white_noise	song.c	/^sh_int gsn_white_noise;$/;"	v
gsn_witch_hunting	db.c	/^sh_int  gsn_witch_hunting;$/;"	v
gsn_woodland_combat	db.c	/^sh_int  gsn_woodland_combat;$/;"	v
gsn_word_of_recall	db.c	/^sh_int  gsn_word_of_recall;$/;"	v
gsn_wrist_shield	db.c	/^sh_int  gsn_wrist_shield;$/;"	v
gsn_zombie_breath	db.c	/^sh_int  gsn_zombie_breath;$/;"	v
gsn_zone_of_damnation	db.c	/^sh_int  gsn_zone_of_damnation;$/;"	v
had_free	recycle.c	/^HELP_AREA * had_free;$/;"	v
had_list	db.c	/^HELP_AREA *     had_list;$/;"	v
haggle_cost	act_obj.c	/^int haggle_cost( CHAR_DATA *ch, int cost, int base_cost )$/;"	f
handle_arrow_shot	fight.c	/^void handle_arrow_shot( CHAR_DATA *ch, CHAR_DATA *victim, bool hit )$/;"	f
handle_con_note_expire	board.c	/^void handle_con_note_expire(DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_finish	board.c	/^void handle_con_note_finish (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_subject	board.c	/^void handle_con_note_subject (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_text	board.c	/^void handle_con_note_text (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_to	board.c	/^void handle_con_note_to (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_death	fight.c	/^void handle_death( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
handle_ftp_auth	ftp.c	/^void handle_ftp_auth (DESCRIPTOR_DATA *d, const char *argument) {$/;"	f
handle_ftp_command	ftp.c	/^void handle_ftp_command (DESCRIPTOR_DATA *d, const char *argument) {$/;"	f
handle_ftp_data	ftp.c	/^void handle_ftp_data (DESCRIPTOR_DATA *d, const char *argument) {$/;"	f
handle_player_save	simsave.c	/^void handle_player_save()$/;"	f
hands	smith.c	/^	int hands;$/;"	m	struct:weapon_subtype	file:
hard	smith.c	/^	bool	hard;$/;"	m	struct:blacksmith_material_type	file:
hard	smith.c	/^	bool hard;$/;"	m	struct:armor_subtype	file:
hard	smith.c	/^	bool hard;$/;"	m	struct:weapon_smith_type	file:
has_affect	grep.c	/^bool has_affect( OBJ_INDEX_DATA *obj, int loc, char *msg )$/;"	f
has_item	mob_prog.c	/^bool has_item( CHAR_DATA *ch, sh_int vnum, sh_int item_type, bool fWear )$/;"	f
has_key	act_move.c	/^bool has_key( CHAR_DATA *ch, int key )$/;"	f
has_mprog	grep.c	/^bool has_mprog( MOB_INDEX_DATA *mob, int vnum )$/;"	f
has_prev_reset	olc.c	/^bool has_prev_reset( ROOM_INDEX_DATA *room, char command, int vnum, int insert_loc )$/;"	f
has_race_skill	skills.c	/^bool has_race_skill( int skill, int rn )$/;"	f
has_spell	grep.c	/^bool has_spell( OBJ_INDEX_DATA *obj, int ID )$/;"	f
hash_add_mob	vshift.c	/^void hash_add_mob( MOB_INDEX_DATA *target )$/;"	f
hash_add_obj	vshift.c	/^void hash_add_obj( OBJ_INDEX_DATA *target )$/;"	f
hash_add_room	vshift.c	/^void hash_add_room( ROOM_INDEX_DATA *target )$/;"	f
hash_enter	hunt.c	/^int hash_enter(struct hash_header *ht,int key,void *data)$/;"	f
hash_find	hunt.c	/^void *hash_find(struct hash_header *ht,int key)$/;"	f
hash_find_or_create	hunt.c	/^void *hash_find_or_create(struct hash_header *ht,int key)$/;"	f
hash_header	hunt.c	/^struct hash_header$/;"	s	file:
hash_iterate	hunt.c	/^void hash_iterate(struct hash_header *ht,void (*func)(),void *cdata)$/;"	f
hash_link	hunt.c	/^struct hash_link$/;"	s	file:
hash_remove	hunt.c	/^void *hash_remove(struct hash_header *ht,int key)$/;"	f
hash_remove_mob	vshift.c	/^void hash_remove_mob( MOB_INDEX_DATA *target )$/;"	f
hash_remove_obj	vshift.c	/^void hash_remove_obj( OBJ_INDEX_DATA *target )$/;"	f
hash_remove_room	vshift.c	/^void hash_remove_room( ROOM_INDEX_DATA *target )$/;"	f
hear_song	song.c	/^void hear_song( CHAR_DATA *singer, CHAR_DATA *victim, int sn)$/;"	f
hedit	olc.c	/^void hedit( CHAR_DATA *ch, char *argument)$/;"	f
hedit_table	olc.c	/^const struct olc_cmd_type hedit_table[] =$/;"	v
help_first	db.c	/^HELP_DATA *     help_first;$/;"	v
help_free	mem.c	/^HELP_DATA		*	help_free;$/;"	v
help_free	recycle.c	/^HELP_DATA * help_free;$/;"	v
help_greeting	db.c	/^char *          help_greeting;$/;"	v
help_last	db.c	/^HELP_DATA *     help_last;$/;"	v
help_last	mem.c	/^HELP_DATA		*	help_last;$/;"	v
help_table	olc_act.c	/^const struct olc_help_type help_table[] =$/;"	v
helper_visible	handler.c	/^bool helper_visible = FALSE;$/;"	v
herb_table	alchemy.c	/^struct herb_type herb_table[] =$/;"	v
herb_type	alchemy.c	/^struct herb_type$/;"	s	file:
herb_vnum	alchemy.c	/^    int herb_vnum[MAX_HERB];$/;"	m	struct:recipe_type	file:
hit	aclone.c	/^	sh_int      hit[3];$/;"	m	struct:mob_index_data	file:
hit_gain	update.c	/^int hit_gain( CHAR_DATA *ch )$/;"	f
hitroll	aclone.c	/^	sh_int      hitroll;$/;"	m	struct:mob_index_data	file:
hitroll	smith.c	/^	int	hitroll;$/;"	m	struct:blacksmith_material_type	file:
hp	smith.c	/^	int	hp;$/;"	m	struct:blacksmith_material_type	file:
hunt_victim	hunt.c	/^void hunt_victim( CHAR_DATA *ch )$/;"	f
hunting_data	hunt.c	/^struct hunting_data$/;"	s	file:
i_flag_bits_name	handler.c	/^char* i_flag_bits_name( struct flag_type flag_table[], long flag )$/;"	f
i_flag_string	bit.c	/^char *i_flag_string( const struct flag_type *flag_table, long bits )$/;"	f
ignore_invisible	handler.c	/^bool ignore_invisible = FALSE; \/\/ hunt etc.$/;"	v
imm_bit_name	handler.c	/^char* imm_bit_name( int flag )$/;"	f
imm_bits_name	handler.c	/^char* imm_bits_name( tflag flag )$/;"	f
imm_flags	aclone.c	/^	tflag        imm_flags;$/;"	m	struct:mob_index_data	file:
imm_flags	tables.c	/^const struct flag_type imm_flags[] =$/;"	v
in_donation_room	act_obj.c	/^bool in_donation_room(OBJ_DATA *obj)$/;"	f
in_pkill_battle	fight.c	/^bool in_pkill_battle( CHAR_DATA *ch )$/;"	f
in_religion_war	warfare.c	/^bool in_religion_war( CHAR_DATA *ch )$/;"	f
info_message	act_comm.c	/^void info_message( CHAR_DATA *ch, char *argument, bool show_to_char )$/;"	f
info_message_new	act_comm.c	/^void info_message_new( CHAR_DATA *ch, char *argument, bool show_to_char,$/;"	f
init_descriptor	comm.c	/^void init_descriptor( int control, ndesc_t type )$/;"	f
init_hash_table	hunt.c	/^void init_hash_table(struct hash_header *ht,int rec_size,int table_size)$/;"	f
init_mm	db.c	/^void init_mm( )$/;"	f
init_socket	comm.c	/^int init_socket( u_short port )$/;"	f
init_world	hunt.c	/^void init_world(ROOM_INDEX_DATA *room_db[])$/;"	f
install_other_handlers	comm.c	/^void install_other_handlers ()$/;"	f
int_app_field	stats.c	/^int int_app_field(int x)$/;"	f
int_app_learn	stats.c	/^int int_app_learn(int x)$/;"	f
interpolate	db.c	/^int interpolate( int level, int value_00, int value_maxL )$/;"	f
interpret	interp.c	/^void interpret( CHAR_DATA *ch, char *argument )$/;"	f
is_affected	handler.c	/^bool is_affected( CHAR_DATA *ch, int sn )$/;"	f
is_affected_parse	mob_prog.c	/^bool is_affected_parse( CHAR_DATA *ch, char *buf )$/;"	f
is_aggro_room	magic.c	/^bool is_aggro_room( ROOM_INDEX_DATA *room, CHAR_DATA *victim )$/;"	f
is_always_safe	fight.c	/^bool is_always_safe( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_ch_name	handler.c	/^bool is_ch_name( char *str, CHAR_DATA *ch, bool exact, CHAR_DATA *viewer )$/;"	f
is_clan	handler.c	/^bool is_clan(CHAR_DATA *ch)$/;"	f
is_clanwar_opp	clanwar.c	/^bool is_clanwar_opp( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_command	act_info.c	/^bool is_command( char *arg )$/;"	f
is_command_pending	comm.c	/^bool is_command_pending( DESCRIPTOR_DATA *d )$/;"	f
is_disguised	act_info.c	/^bool is_disguised( CHAR_DATA *ch )$/;"	f
is_drop_obj	handler.c	/^bool is_drop_obj( OBJ_DATA *obj )$/;"	f
is_either_name	handler.c	/^bool is_either_name( char *str, char *namelist, bool exact )$/;"	f
is_either_str	interp.c	/^bool is_either_str( char *prefix, char *str, bool exact )$/;"	f
is_empty_string	string.c	/^bool is_empty_string( char *s )$/;"	f
is_exact_name	handler.c	/^bool is_exact_name( char *str, char *namelist )$/;"	f
is_friend	handler.c	/^bool is_friend(CHAR_DATA *ch,CHAR_DATA *victim)$/;"	f
is_granted	grant.c	/^bool is_granted( CHAR_DATA *ch, DO_FUN *do_fun)$/;"	f
is_granted_name	grant.c	/^bool is_granted_name( CHAR_DATA *ch, char *name)$/;"	f
is_guild_room	quest.c	/^bool is_guild_room( int vnum )$/;"	f
is_here	redit-ilab.c	/^static bool is_here (RESET_DATA* pReset, int vnum, bool last_mob_here)$/;"	f	file:
is_high_priest	religion.c	/^bool is_high_priest( CHAR_DATA *ch )$/;"	f
is_in_group	skills.c	/^bool is_in_group( int skill, int group )$/;"	f
is_mental	magic.c	/^bool is_mental( int sn )$/;"	f
is_mimic	handler.c	/^bool is_mimic( CHAR_DATA *ch )$/;"	f
is_mob_in_spec	grep.c	/^bool is_mob_in_spec( MOB_INDEX_DATA *mob, char *msg )$/;"	f
is_mob_ingame	grep.c	/^bool is_mob_ingame( MOB_INDEX_DATA *mob )$/;"	f
is_name	handler.c	/^bool is_name ( char *str, char *namelist )$/;"	f
is_normal_hit	fight.c	/^bool is_normal_hit( int dt )$/;"	f
is_note_to	board.c	/^bool is_note_to (CHAR_DATA *ch, NOTE_DATA *note)$/;"	f
is_number	interp.c	/^bool is_number ( char *arg )$/;"	f
is_obj_in_spec	grep.c	/^bool is_obj_in_spec( OBJ_INDEX_DATA *obj, char *msg )$/;"	f
is_obj_ingame	grep.c	/^bool is_obj_ingame( OBJ_INDEX_DATA *obj )$/;"	f
is_obj_owner	handler.c	/^bool is_obj_owner(CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
is_offensive	magic.c	/^bool is_offensive( int sn )$/;"	f
is_old_mob	handler.c	/^bool is_old_mob(CHAR_DATA *ch)$/;"	f
is_opponent	fight.c	/^bool is_opponent( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_priest	religion.c	/^bool is_priest( CHAR_DATA *ch )$/;"	f
is_r_number	mob_cmds.c	/^bool is_r_number( char *arg )$/;"	f
is_relic_obj	religion.c	/^bool is_relic_obj( OBJ_DATA *obj )$/;"	f
is_religion_member	religion.c	/^bool is_religion_member( CHAR_DATA *ch )$/;"	f
is_religion_opp	religion.c	/^bool is_religion_opp( CHAR_DATA *ch, CHAR_DATA *opp )$/;"	f
is_remort_obj	handler.c	/^bool is_remort_obj( OBJ_DATA *obj )$/;"	f
is_reserved_name	nanny.c	/^bool is_reserved_name( char *name )$/;"	f
is_room_ingame	grep.c	/^bool is_room_ingame( ROOM_INDEX_DATA *room )$/;"	f
is_room_owner	handler.c	/^bool is_room_owner(CHAR_DATA *ch, ROOM_INDEX_DATA *room)$/;"	f
is_safe	fight.c	/^bool is_safe( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_safe_check	fight.c	/^bool is_safe_check( CHAR_DATA *ch, CHAR_DATA *victim, $/;"	f
is_safe_spell	fight.c	/^bool is_safe_spell( CHAR_DATA *ch, CHAR_DATA *victim, bool area )$/;"	f
is_same_clan	handler.c	/^bool is_same_clan(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
is_same_group	act_comm.c	/^bool is_same_group( CHAR_DATA *ach, CHAR_DATA *bch )$/;"	f
is_same_player	comm.c	/^bool is_same_player( CHAR_DATA *ch1, CHAR_DATA *ch2 )$/;"	f
is_same_team	warfare.c	/^bool is_same_team( CHAR_DATA *ch1, CHAR_DATA *ch2 )$/;"	f
is_settable	tables.c	/^bool is_settable( int flag, struct flag_type *flag_table )$/;"	f
is_stat	bit.c	/^bool is_stat( const struct flag_type *flag_table )$/;"	f
is_sticky_obj	handler.c	/^bool is_sticky_obj( OBJ_DATA *obj )$/;"	f
is_substr	buildutil.c	/^bool is_substr( char *sub, char *str )$/;"	f
is_tattoo_list_empty	tattoo.c	/^bool is_tattoo_list_empty( tattoo_list tl )$/;"	f
is_tattoo_loc	tattoo.c	/^bool is_tattoo_loc( int loc )$/;"	f
is_vnum	redit-ilab.c	44;"	d	file:
is_waiting_for_auth	auth.c	/^bool is_waiting_for_auth( CHAR_DATA *ch )$/;"	f
is_wilderness	hunt.c	/^bool is_wilderness( int sector )$/;"	f
isascii	comm.c	269;"	d	file:
item_lookup	lookup.c	/^int item_lookup(const char *name)$/;"	f
item_name	handler.c	/^char *item_name(int item_type)$/;"	f
item_table	const.c	/^const struct item_type      item_table  []  =$/;"	v
jail_room_list	db.c	/^int             jail_room_list[MAX_JAIL_ROOM];$/;"	v
key	hunt.c	/^    int           key;$/;"	m	struct:hash_link	file:
keylist	hunt.c	/^    int           *keylist, klistsize, klistlen; \/* this is really lame, AMAZINGLY lame *\/$/;"	m	struct:hash_header	file:
keyword_list	mob_prog.c	/^typedef char* keyword_list[][2];$/;"	t	file:
keyword_list	olc_mpcode.c	/^typedef char* keyword_list[][2];$/;"	t	file:
keyword_lookup	mob_prog.c	/^int keyword_lookup( const keyword_list table, char *keyword )$/;"	f
kill_table	db.c	/^KILL_DATA       kill_table  [MAX_LEVEL];$/;"	v
klistlen	hunt.c	/^    int           *keylist, klistsize, klistlen; \/* this is really lame, AMAZINGLY lame *\/$/;"	m	struct:hash_header	file:
klistsize	hunt.c	/^    int           *keylist, klistsize, klistlen; \/* this is really lame, AMAZINGLY lame *\/$/;"	m	struct:hash_header	file:
last_auth_name	auth.c	/^AUTH_LIST *last_auth_name;$/;"	v
last_command	interp.c	/^char last_command[MSL] = ""; \/* Global variable to hold the last input line *\/$/;"	v
last_debug	mob_prog.c	/^char last_debug[MSL] = "";$/;"	v
last_delete_name	auth.c	/^char last_delete_name[MIL] = "";$/;"	v
last_mob_id	recycle.c	/^long    last_mob_id;$/;"	v
last_mprog	mob_prog.c	/^char last_mprog[MSL] = "";$/;"	v
last_note_stamp	board.c	/^long last_note_stamp = 0; \/* To generate unique timestamps on notes *\/$/;"	v
last_pc_id	recycle.c	/^long    last_pc_id;$/;"	v
last_reserved	act_wiz.c	/^RESERVED_DATA *last_reserved;$/;"	v
last_war_time	warfare.c	/^long last_war_time = 0;$/;"	v
level	aclone.c	/^	sh_int      level;$/;"	m	struct:mob_index_data	file:
level	alchemy.c	/^    int level;$/;"	m	struct:recipe_type	file:
level	smith.c	/^	int	level;$/;"	m	struct:blacksmith_material_type	file:
level_power	fight.c	/^int level_power( CHAR_DATA *ch )$/;"	f
level_stats	olc_act.c	/^static int level_stats[][LVL_STAT_NR] = {$/;"	v	file:
light_status	handler.c	/^int light_status( CHAR_DATA *ch )$/;"	f
limit	remort.c	/^    time_t limit;	$/;"	m	struct:remort_table	file:
line_count	ftp.c	/^int line_count (const char *s) {$/;"	f
liq_lookup	lookup.c	/^int liq_lookup (const char *name)$/;"	f
liq_table	const.c	/^const   struct  liq_type    liq_table   []  =$/;"	v
list_group_chosen	skills.c	/^void list_group_chosen(CHAR_DATA *ch)$/;"	f
list_group_costs	skills.c	/^void list_group_costs(CHAR_DATA *ch)$/;"	f
list_quest_items	quest.c	/^char* list_quest_items()$/;"	f
list_religions	religion.c	/^void list_religions( CHAR_DATA *ch )$/;"	f
load_area	db.c	/^void load_area( FILE *fp )$/;"	f
load_area_file	db.c	/^void load_area_file( FILE *fp, bool clone )$/;"	f
load_auth_list	auth.c	/^void load_auth_list()$/;"	f
load_bans	ban.c	/^void load_bans(void)$/;"	f
load_board	board.c	/^static void load_board (BOARD_DATA *board)$/;"	f	file:
load_boards	board.c	/^void load_boards ()$/;"	f
load_char_obj	simsave.c	/^bool load_char_obj( DESCRIPTOR_DATA *d, char *name )$/;"	f
load_clan_file	clan.c	/^void load_clan_file(const char *filename)$/;"	f
load_clans	clan.c	/^void load_clans( )$/;"	f
load_clanwars	clanwar.c	/^void load_clanwars()$/;"	f
load_crime_list	penalty.c	/^void load_crime_list(void)$/;"	f
load_disabled	interp.c	/^void load_disabled()$/;"	f
load_file_to_buffer	buffer_util.c	/^DBUFFER* load_file_to_buffer( FILE *fp )$/;"	f
load_helps	db.c	/^void load_helps( FILE *fp, char *fname )$/;"	f
load_mobiles	db2.c	/^void load_mobiles( FILE *fp )$/;"	f
load_mobprogs	db.c	/^void load_mobprogs( FILE *fp )$/;"	f
load_objects	db2.c	/^void load_objects( FILE *fp )$/;"	f
load_old_mob	db.c	/^void load_old_mob( FILE *fp )$/;"	f
load_old_obj	db.c	/^void load_old_obj( FILE *fp )$/;"	f
load_penalties	penalty.c	/^void load_penalties()$/;"	f
load_portal_list	act_enter.c	/^void load_portal_list()$/;"	f
load_religions	religion.c	/^void load_religions()$/;"	f
load_reserved	db.c	/^void load_reserved( void )$/;"	f
load_resets	db.c	/^ void load_resets( FILE *fp )$/;"	f
load_rooms	db.c	/^ void load_rooms( FILE *fp )$/;"	f
load_shops	db.c	/^void load_shops( FILE *fp )$/;"	f
load_skill	skills.c	/^void load_skill(FILE *f, int cnum)$/;"	f
load_skills	skills.c	/^void load_skills()$/;"	f
load_social	social-edit.c	/^void load_social (FILE *fp, struct social_type *social)$/;"	f
load_social_table	social-edit.c	/^void load_social_table ()$/;"	f
load_songs	music.c	/^void load_songs(void)$/;"	f
load_specials	db.c	/^void load_specials( FILE *fp )$/;"	f
load_wizlist	wizlist.c	/^void load_wizlist(void)$/;"	f
log_buf	db.c	/^char            log_buf     [2*MAX_INPUT_LENGTH];$/;"	v
log_error	db.c	/^void log_error( const char *str )$/;"	f
log_string	db.c	/^void log_string( const char *str )$/;"	f
logpf	comm.c	/^void logpf (char * fmt, ...)$/;"	f
look_obj	act_info.c	/^OBJ_DATA* look_obj( CHAR_DATA *ch, char *argument )$/;"	f
lpad	string.c	/^char *lpad( char *argument, int width, char fill )$/;"	f
magic	smith.c	/^	int	magic;$/;"	m	struct:blacksmith_material_type	file:
mail_notify	board.c	/^void mail_notify( CHAR_DATA *ch, NOTE_DATA *pnote, BOARD_DATA *board )$/;"	f
main	comm.c	/^int main( int argc, char **argv )$/;"	f
make_corpse	fight.c	/^void make_corpse( CHAR_DATA *victim, CHAR_DATA *killer, bool go_morgue)$/;"	f
make_note	board.c	/^void make_note (const char* board_name, const char *sender, const char *to, const char *subject, const int expire_days, const char *text)$/;"	f
make_visible	act_move.c	/^void make_visible( CHAR_DATA *ch )$/;"	f
makedrunk	act_comm.c	/^char * makedrunk (char *string, CHAR_DATA * ch)$/;"	f
mana	aclone.c	/^	sh_int      mana[3];$/;"	m	struct:mob_index_data	file:
mana	smith.c	/^	int	mana;$/;"	m	struct:blacksmith_material_type	file:
mana_cost	magic.c	/^int mana_cost (CHAR_DATA *ch, int sn, int skill)$/;"	f
mana_cost_song	song.c	/^int mana_cost_song (CHAR_DATA *ch, int sn)$/;"	f
mana_gain	update.c	/^int mana_gain( CHAR_DATA *ch )$/;"	f
martial_damage	fight.c	/^int martial_damage( CHAR_DATA *ch, int sn )$/;"	f
match_grep_mob	grep.c	/^bool match_grep_mob( GREP_DATA *gd, MOB_INDEX_DATA *mob, char *info )$/;"	f
match_grep_obj	grep.c	/^bool match_grep_obj( GREP_DATA *gd, OBJ_INDEX_DATA *obj, char *info )$/;"	f
match_grep_room	grep.c	/^bool match_grep_room( GREP_DATA *gd, ROOM_INDEX_DATA *room, char *info )$/;"	f
material	aclone.c	/^	char *      material;$/;"	m	struct:mob_index_data	file:
material_lookup	handler.c	/^int material_lookup (const char *name)$/;"	f
maxSocial	social-edit.c	/^int maxSocial;$/;"	v
max_hmm_train	stats.c	/^int max_hmm_train( int level )$/;"	f
max_on	act_info.c	/^int max_on = 0;$/;"	v
mean	religion.c	/^    bool mean;$/;"	m	struct:god_action	file:
medit	olc.c	/^void medit( CHAR_DATA *ch, char *argument )$/;"	f
medit_table	olc.c	/^const struct olc_cmd_type medit_table[] =$/;"	v
mem_data_free	recycle.c	/^MEM_DATA *mem_data_free;$/;"	v
mem_load_char_obj	bsave.c	/^void mem_load_char_obj( DESCRIPTOR_DATA *d, MEMFILE *mf )$/;"	f
mem_save_char_obj	bsave.c	/^MEMFILE* mem_save_char_obj( CHAR_DATA *ch )$/;"	f
mem_save_clan_file	clan.c	/^MEMFILE* mem_save_clan_file( int clannum )$/;"	f
mem_sim_save_other	simsave.c	/^void mem_sim_save_other()$/;"	f
memfile_free	buffer_util.c	/^void memfile_free(MEMFILE *mf)$/;"	f
memfile_in_list	simsave.c	/^bool memfile_in_list( char *filename, MEMFILE *list )$/;"	f
memfile_new	buffer_util.c	/^MEMFILE *memfile_new( char *filename, int min_size )$/;"	f
memfile_wrap_buffer	buffer_util.c	/^MEMFILE* memfile_wrap_buffer( char *filename, DBUFFER *buf )$/;"	f
memfile_wrap_free	buffer_util.c	/^void memfile_wrap_free( MEMFILE *mf )$/;"	f
merc_down	comm.c	/^bool            merc_down;      \/* Shutdown         *\/$/;"	v
merge_arrows	act_obj.c	/^void merge_arrows( CHAR_DATA *ch, OBJ_DATA *obj1, OBJ_DATA *obj2 )$/;"	f
message	act_comm.c	/^    char *  message[8];$/;"	m	struct:pose_table_type	file:
mob_cmd_table	mob_cmds.c	/^const	struct	mob_cmd_type	mob_cmd_table	[] =$/;"	v
mob_get_skill	skills.c	/^int mob_get_skill(CHAR_DATA *ch, int sn)$/;"	f
mob_has_skill	skills.c	/^int mob_has_skill(CHAR_DATA *ch, int sn)$/;"	f
mob_hit	fight.c	/^void mob_hit (CHAR_DATA *ch, CHAR_DATA *victim, int dt)$/;"	f
mob_index_data	aclone.c	/^struct  mob_index_data$/;"	s	file:
mob_index_free	mem.c	/^MOB_INDEX_DATA		*	mob_index_free;$/;"	v
mob_index_hash	db.c	/^MOB_INDEX_DATA *    mob_index_hash      [MAX_KEY_HASH];$/;"	v
mob_interpret	mob_cmds.c	/^void mob_interpret( CHAR_DATA *ch, char *argument )$/;"	f
mobile_count	db.c	/^int  mobile_count = 0;$/;"	v
mobile_special_update	update.c	/^void mobile_special_update( void )$/;"	f
mobile_update	update.c	/^void mobile_update( void )$/;"	f
money_weight	handler.c	/^int money_weight( int silver, int gold )$/;"	f
month_name	act_info.c	/^char *  const   month_name  [] =$/;"	v
morph_pc_race_table	const.c	/^struct pc_race_type morph_pc_race_table[] = $/;"	v
morph_race_table	const.c	/^struct race_type morph_race_table[] = $/;"	v
morph_update	act_move.c	/^void morph_update( CHAR_DATA *ch )$/;"	f
move	smith.c	/^	int	move;$/;"	m	struct:blacksmith_material_type	file:
move_char	act_move.c	/^int move_char( CHAR_DATA *ch, int door, bool follow )$/;"	f
move_gain	update.c	/^int move_gain( CHAR_DATA *ch )$/;"	f
movement_loss	act_move.c	/^const   sh_int  movement_loss   [SECT_MAX]  =$/;"	v
mp_act_trigger	mob_prog.c	/^bool mp_act_trigger( $/;"	f
mp_bribe_trigger	mob_prog.c	/^void mp_bribe_trigger( CHAR_DATA *mob, CHAR_DATA *ch, int amount )$/;"	f
mp_exit_trigger	mob_prog.c	/^bool mp_exit_trigger( CHAR_DATA *ch, int dir )$/;"	f
mp_give_trigger	mob_prog.c	/^void mp_give_trigger( CHAR_DATA *mob, CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
mp_greet_trigger	mob_prog.c	/^void mp_greet_trigger( CHAR_DATA *ch )$/;"	f
mp_hprct_trigger	mob_prog.c	/^void mp_hprct_trigger( CHAR_DATA *mob, CHAR_DATA *ch )$/;"	f
mp_percent_trigger	mob_prog.c	/^bool mp_percent_trigger( $/;"	f
mp_try_trigger	mob_prog.c	/^bool mp_try_trigger( char* argument, CHAR_DATA *ch )$/;"	f
mpcode_free	mem.c	/^MPROG_CODE              *       mpcode_free;$/;"	v
mpedit	olc_mpcode.c	/^void mpedit( CHAR_DATA *ch, char *argument)$/;"	f
mpedit_table	olc_mpcode.c	/^const struct olc_cmd_type mpedit_table[] =$/;"	v
mprog_flags	aclone.c	/^	tflag        mprog_flags;$/;"	m	struct:mob_index_data	file:
mprog_flags	tables.c	/^const struct flag_type mprog_flags[] =$/;"	v
mprog_free	recycle.c	/^MPROG_LIST *mprog_free;$/;"	v
mprog_list	db.c	/^MPROG_CODE *    mprog_list;$/;"	v
mprog_type_to_name	mob_cmds.c	/^char *mprog_type_to_name( int type )$/;"	f
mprogs	aclone.c	/^	MPROG_LIST *        mprogs;$/;"	m	struct:mob_index_data	file:
mudftp_notify	ftp.c	/^static void mudftp_notify(const char *fmt, ... ) {$/;"	f	file:
mudftp_str_replace	ftp.c	/^static void mudftp_str_replace(char *buf, const char *s, const char *repl) {$/;"	f	file:
mult_argument	interp.c	/^int mult_argument(char *argument, char *arg)$/;"	f
multi_hit	fight.c	/^void multi_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt )$/;"	f
must_save_area	olc_save.c	/^bool must_save_area( AREA_DATA *area )$/;"	f
nAllocPerm	db.c	/^int         nAllocPerm;$/;"	v
nAllocString	db.c	/^int         nAllocString;$/;"	v
name	alchemy.c	/^    char *name;$/;"	m	struct:recipe_type	file:
name	healer.c	/^    char *name;$/;"	m	struct:spell_cost	file:
name	hunt.c	/^    char          *name;$/;"	m	struct:hunting_data	file:
name	quest.c	/^    char name[MIL];$/;"	m	struct:quest_item	file:
name	religion.c	/^    char *name;$/;"	m	struct:god_action	file:
name	remort.c	/^    char *name;$/;"	m	struct:remort_chamber	file:
name	remort.c	/^    char *name;$/;"	m	struct:remort_table	file:
name	smith.c	/^	char *name;$/;"	m	struct:armor_smith_type	file:
name	smith.c	/^	char *name;$/;"	m	struct:armor_subtype	file:
name	smith.c	/^	char *name;$/;"	m	struct:blacksmith_material_type	file:
name	smith.c	/^	char *name;$/;"	m	struct:dye_type	file:
name	smith.c	/^	char *name;$/;"	m	struct:weapon_smith_type	file:
name	smith.c	/^	char *name;$/;"	m	struct:weapon_subtype	file:
name	smith.c	/^	char *name;$/;"	m	struct:workmanship_type	file:
nanny	nanny.c	/^void nanny( DESCRIPTOR_DATA *d, char *argument )$/;"	f
nasty_signal_handler	comm.c	/^void nasty_signal_handler (int no)$/;"	f
ndesc_t	comm.c	/^typedef enum {NDESC_NORMAL, NDESC_FTP } ndesc_t;$/;"	t	file:
negate	grep.c	/^    bool negate;$/;"	m	struct:grep_data	file:
new_affect	recycle.c	/^AFFECT_DATA *new_affect(void)$/;"	f
new_area	mem.c	/^AREA_DATA *new_area( void )$/;"	f
new_ban	recycle.c	/^BAN_DATA *new_ban(void)$/;"	f
new_buf	recycle.c	/^BUFFER *new_buf()$/;"	f
new_buf_size	recycle.c	/^BUFFER *new_buf_size(int size)$/;"	f
new_char	recycle.c	/^CHAR_DATA *new_char (void)$/;"	f
new_crime	recycle.c	/^CRIME_DATA *new_crime(void)$/;"	f
new_descriptor	recycle.c	/^DESCRIPTOR_DATA *new_descriptor(void)$/;"	f
new_exit	mem.c	/^EXIT_DATA *new_exit( void )$/;"	f
new_extra_descr	recycle.c	/^EXTRA_DESCR_DATA *new_extra_descr(void)$/;"	f
new_follower	religion.c	/^FOLLOWER_DATA* new_follower( RELIGION_DATA *religion, char *name )$/;"	f
new_gen_data	recycle.c	/^GEN_DATA *new_gen_data(void)$/;"	f
new_grep_data	grep.c	/^GREP_DATA* new_grep_data( sh_int stat, int value, char *str_value, bool negate )$/;"	f
new_had	recycle.c	/^HELP_AREA * new_had ( void )$/;"	f
new_help	recycle.c	/^HELP_DATA * new_help ( void )$/;"	f
new_load_area	db.c	/^void new_load_area( FILE *fp )$/;"	f
new_mem_data	recycle.c	/^MEM_DATA *new_mem_data(void)$/;"	f
new_mob_index	mem.c	/^MOB_INDEX_DATA *new_mob_index( void )$/;"	f
new_mpcode	mem.c	/^MPROG_CODE *new_mpcode(void)$/;"	f
new_mprog	recycle.c	/^MPROG_LIST *new_mprog(void)$/;"	f
new_note	recycle.c	/^NOTE_DATA *new_note ()$/;"	f
new_obj	recycle.c	/^OBJ_DATA *new_obj(void)$/;"	f
new_obj_index	mem.c	/^OBJ_INDEX_DATA *new_obj_index( void )$/;"	f
new_pcdata	recycle.c	/^PC_DATA *new_pcdata(void)$/;"	f
new_penalty	penalty.c	/^PENALTY_DATA *new_penalty(CHAR_DATA *imm, CHAR_DATA *victim)$/;"	f
new_portal	recycle.c	/^PORTAL_DATA *new_portal( void )$/;"	f
new_quest	recycle.c	/^QUEST_DATA *new_quest(void)$/;"	f
new_religion	religion.c	/^RELIGION_DATA* new_religion()$/;"	f
new_religion_war	religion.c	/^RELIGION_WAR_DATA* new_religion_war( RELIGION_DATA *opp, int status )$/;"	f
new_reset	db.c	/^ void new_reset( ROOM_INDEX_DATA *pR, RESET_DATA *pReset )$/;"	f
new_reset	redit-ilab.c	/^static RESET_DATA* new_reset ()$/;"	f	file:
new_reset_data	mem.c	/^RESET_DATA *new_reset_data( void )$/;"	f
new_room_index	mem.c	/^ROOM_INDEX_DATA *new_room_index( void )$/;"	f
new_shop	mem.c	/^SHOP_DATA *new_shop( void )$/;"	f
new_sort	recycle.c	/^SORT_TABLE *new_sort(void)$/;"	f
new_who_data	recycle.c	/^WHO_DATA *new_who_data(void)$/;"	f
new_wiz	recycle.c	/^WIZ_DATA *new_wiz(void)$/;"	f
newbie_alert	nanny.c	/^void newbie_alert(DESCRIPTOR_DATA *d)$/;"	f
newlock	comm.c	/^bool            newlock;        \/* Game is newlocked        *\/$/;"	v
newmobs	db.c	/^int  newmobs = 0;$/;"	v
newobjs	db.c	/^int  newobjs = 0;$/;"	v
next	grep.c	/^    GREP_DATA *next;$/;"	m	struct:grep_data	file:
next	hunt.c	/^    struct hash_link  *next;$/;"	m	struct:hash_link	file:
next	remort.c	/^    REMORT_TABLE *next;$/;"	m	struct:remort_table	file:
next_board	board.c	/^static bool next_board (CHAR_DATA *ch)$/;"	f	file:
next_q	hunt.c	/^    struct room_q *next_q;$/;"	m	struct:room_q	file:
next_sr_buf	buffer.c	/^char* next_sr_buf( SR_BUF *sr_buf )$/;"	f
nodes	hunt.c	/^struct nodes$/;"	s	file:
note_free	db.c	/^NOTE_DATA *     note_free;$/;"	v
note_free	recycle.c	/^NOTE_DATA *note_free;$/;"	v
note_line	board.c	/^const static char* note_line = $/;"	v	file:
nt_act	comm.c	/^void nt_act ( const char *format, CHAR_DATA *ch, const void *arg1, const void *arg2,$/;"	f
nt_act_new	comm.c	/^void nt_act_new ( const char *format, CHAR_DATA *ch, const void *arg1, const void *arg2,$/;"	f
nuke_pets	act_comm.c	/^void nuke_pets( CHAR_DATA *ch )$/;"	f
num_eval	mob_prog.c	/^int num_eval( int lval, int oper, int rval )$/;"	f
num_varieties	smith.c	/^	int num_varieties;$/;"	m	struct:armor_smith_type	file:
num_varieties	smith.c	/^	int num_varieties;$/;"	m	struct:weapon_smith_type	file:
number_argument	interp.c	/^int number_argument( char *argument, char *arg )$/;"	f
number_bits	db.c	/^int number_bits( int width )$/;"	f
number_door	db.c	/^int number_door( void )$/;"	f
number_fuzzy	db.c	/^int number_fuzzy( int number )$/;"	f
number_mm	db.c	/^long number_mm( void )$/;"	f
number_percent	db.c	/^int number_percent( void )$/;"	f
number_range	db.c	/^int number_range( int from, int to )$/;"	f
numlineas	string.c	/^char *numlineas( char *string )$/;"	f
obj_cast_spell	magic.c	/^bool obj_cast_spell( int sn, int level, CHAR_DATA *ch, OBJ_DATA *obj, char *arg )$/;"	f
obj_check	act_wiz.c	/^bool obj_check (CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
obj_free	recycle.c	/^OBJ_DATA *obj_free;$/;"	v
obj_from_char	handler.c	/^void obj_from_char( OBJ_DATA *obj )$/;"	f
obj_from_obj	handler.c	/^void obj_from_obj( OBJ_DATA *obj )$/;"	f
obj_from_room	handler.c	/^void obj_from_room( OBJ_DATA *obj )$/;"	f
obj_from_world	handler.c	/^void obj_from_world( OBJ_DATA *obj )$/;"	f
obj_index_free	mem.c	/^OBJ_INDEX_DATA		*	obj_index_free;$/;"	v
obj_index_hash	db.c	/^OBJ_INDEX_DATA *    obj_index_hash      [MAX_KEY_HASH];$/;"	v
obj_on_char	alchemy.c	/^OBJ_DATA* obj_on_char( CHAR_DATA *ch, int vnum )$/;"	f
obj_to_char	handler.c	/^void obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch )$/;"	f
obj_to_keeper	act_obj.c	/^void obj_to_keeper( OBJ_DATA *obj, CHAR_DATA *ch )$/;"	f
obj_to_obj	handler.c	/^void obj_to_obj( OBJ_DATA *obj, OBJ_DATA *obj_to )$/;"	f
obj_to_room	handler.c	/^void obj_to_room( OBJ_DATA *obj, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
obj_update	update.c	/^void obj_update( void )$/;"	f
object_list	db.c	/^OBJ_DATA *      object_list;$/;"	v
oedit	olc.c	/^void oedit( CHAR_DATA *ch, char *argument )$/;"	f
oedit_table	olc.c	/^const struct olc_cmd_type oedit_table[] =$/;"	v
oedit_values	olc_act.c	/^bool oedit_values( CHAR_DATA *ch, char *argument, int value )$/;"	f
off_bit_name	handler.c	/^char* off_bit_name( int flag )$/;"	f
off_bits_name	handler.c	/^char* off_bits_name( tflag flag )$/;"	f
off_flags	aclone.c	/^	tflag        off_flags;$/;"	m	struct:mob_index_data	file:
off_flags	tables.c	/^const struct flag_type off_flags[] =$/;"	v
olc_ed_name	olc.c	/^char *olc_ed_name( CHAR_DATA *ch )$/;"	f
olc_ed_vnum	olc.c	/^char *olc_ed_vnum( CHAR_DATA *ch )$/;"	f
olc_help_type	olc_act.c	/^struct olc_help_type$/;"	s	file:
one_argument	interp.c	/^char *one_argument( char *argument, char *arg_first )$/;"	f
one_argument_keep_case	interp.c	/^char *one_argument_keep_case( char *argument, char *arg_first )$/;"	f
one_hit	fight.c	/^void one_hit ( CHAR_DATA *ch, CHAR_DATA *victim, int dt, bool secondary )$/;"	f
one_hit_damage	fight.c	/^int one_hit_damage( CHAR_DATA *ch, int dt, OBJ_DATA *wield )$/;"	f
ooze_effect	breath.c	/^void ooze_effect( void *vo, int level, int dam, int target )$/;"	f
org_max_vnum	vshift.c	/^static int org_max_vnum = 0;$/;"	v	file:
org_min_vnum	vshift.c	/^static int org_min_vnum = 0;$/;"	v	file:
original_char	comm.c	/^CHAR_DATA* original_char( CHAR_DATA *ch )$/;"	f
other_save_list	simsave.c	/^MEMFILE *other_save_list = NULL;$/;"	v
pShop	aclone.c	/^	SHOP_DATA *     pShop;$/;"	m	struct:mob_index_data	file:
page_to_char	comm.c	/^void page_to_char( const char *txt, CHAR_DATA *ch )$/;"	f
page_to_char_bw	comm.c	/^void page_to_char_bw( const char *txt, CHAR_DATA *ch )$/;"	f
pair_table	grant.c	/^const   struct  pair_type        pair_table       [] =$/;"	v
parse_door_state	redit-ilab.c	/^static int parse_door_state (char* state)$/;"	f	file:
parse_gen_groups	skills.c	/^bool parse_gen_groups(CHAR_DATA *ch,char *argument)$/;"	f
parse_mob_grep	grep.c	/^GREP_DATA* parse_mob_grep( CHAR_DATA *ch, char *argument )$/;"	f
parse_obj_grep	grep.c	/^GREP_DATA* parse_obj_grep( CHAR_DATA *ch, char *argument )$/;"	f
parse_roll_stats	stats.c	/^bool parse_roll_stats (CHAR_DATA *ch,char *argument)$/;"	f
parse_room_grep	grep.c	/^GREP_DATA* parse_room_grep( CHAR_DATA *ch, char *argument )$/;"	f
parse_stat_priority	stats.c	/^bool parse_stat_priority (CHAR_DATA *ch, char *argument)$/;"	f
parse_vnum	redit-ilab.c	43;"	d	file:
part_bit_name	handler.c	/^char* part_bit_name( int flag )$/;"	f
part_bits_name	handler.c	/^char* part_bits_name( tflag flag )$/;"	f
part_flags	tables.c	/^const struct flag_type part_flags[] =$/;"	v
parts	aclone.c	/^	tflag        parts;$/;"	m	struct:mob_index_data	file:
pc_get_skill	skills.c	/^int pc_get_skill(CHAR_DATA *ch, int sn)$/;"	f
pc_race_table	const.c	/^struct  pc_race_type    pc_race_table   [MAX_PC_RACE]  =$/;"	v
pcdata_free	recycle.c	/^PC_DATA *pcdata_free;$/;"	v
pclose	pipe.c	15;"	d	file:
penalty_bits_name	handler.c	/^char *penalty_bits_name( tflag penalty_flags )$/;"	f
penalty_confirm	penalty.c	/^void  penalty_confirm ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_finish	penalty.c	/^void penalty_finish  ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_handled	penalty.c	/^bool penalty_handled( CHAR_DATA *ch, CHAR_DATA *victim, char *pentype )$/;"	f
penalty_hours	penalty.c	/^void penalty_hours ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_list	penalty.c	/^PENALTY_DATA *penalty_list;$/;"	v
penalty_penlist	penalty.c	/^void penalty_penlist ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_points	penalty.c	/^void  penalty_points  ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_severity	penalty.c	/^void  penalty_severity( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_status_name	penalty.c	/^char *penalty_status_name(int status)$/;"	f
penalty_table	tables.c	/^const struct penalty_type penalty_table[] = $/;"	v
penalty_table_lookup	lookup.c	/^int penalty_table_lookup(const char *name)$/;"	f
penalty_update	penalty.c	/^void penalty_update(CHAR_DATA *ch)$/;"	f
per_chance	quest.c	/^bool per_chance(int num)$/;"	f
personal_message	board.c	/^void personal_message (const char *sender, const char *to, const char *subject, const int expire_days, const char *text)$/;"	f
pfile_exists	simsave.c	/^bool pfile_exists( char *name )$/;"	f
pfile_version	bsave.c	/^static int pfile_version = 0;$/;"	v	file:
pick_weapon	nanny.c	/^bool	pick_weapon ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
piercemod	smith.c	/^	int piercemod;$/;"	m	struct:armor_subtype	file:
pkgrade_table	tables.c	/^const struct pkgrade_type pkgrade_table[] =$/;"	v
place_in_who_list	nanny.c	/^void place_in_who_list( WHO_DATA *new_who )$/;"	f
plague_effect	breath.c	/^void plague_effect( void *vo, int level, int dam, int target )$/;"	f
player_quit_list	simsave.c	/^MEMFILE *player_quit_list = NULL;$/;"	v
player_save_list	simsave.c	/^MEMFILE *player_save_list = NULL;$/;"	v
player_save_state	simsave.c	/^static int player_save_state = SAVE_STATE_SIMSAVE;$/;"	v	file:
plr_flags	tables.c	/^const struct flag_type plr_flags[] =$/;"	v
poison_effect	effects.c	/^void poison_effect(void *vo,int level, int dam, int target)$/;"	f
popen	pipe.c	14;"	d	file:
port	comm.c	/^u_short port;$/;"	v
portal_flags	tables.c	/^const struct flag_type portal_flags[]=$/;"	v
portal_free	recycle.c	/^PORTAL_DATA *portal_free;$/;"	v
portal_list	act_enter.c	/^PORTAL_DATA *portal_list = NULL;$/;"	v
pose_table	act_comm.c	/^const   struct  pose_table_type pose_table  [MAX_POSE]  =$/;"	v
pose_table_type	act_comm.c	/^struct  pose_table_type$/;"	s	file:
position_flags	tables.c	/^const struct flag_type position_flags[] =$/;"	v
position_lookup	lookup.c	/^int position_lookup (const char *name)$/;"	f
position_table	tables.c	/^const struct position_type position_table[] =$/;"	v
potion_vnum	alchemy.c	/^    int potion_vnum;$/;"	m	struct:recipe_type	file:
precolor	smith.c	/^	char *precolor;$/;"	m	struct:dye_type	file:
print_flags	bsave.c	/^char *print_flags(int flag)$/;"	f
print_gag	act_comm.c	/^void print_gag(char* info_str, long value, CHAR_DATA *ch)$/;"	f
print_tattoos	tattoo.c	/^char* print_tattoos( tattoo_list tl )$/;"	f
print_tflag	tflag.c	/^char* print_tflag( tflag f )$/;"	f
printf_to_char	comm.c	/^void printf_to_char (CHAR_DATA *ch, char *fmt, ...)$/;"	f
printf_to_wiznet	comm.c	/^void printf_to_wiznet(CHAR_DATA *ch, OBJ_DATA *obj,$/;"	f
proc_startwar	warfare.c	/^void proc_startwar( CHAR_DATA *ch, char *argument, bool pay )$/;"	f
process_output	comm.c	/^bool process_output( DESCRIPTOR_DATA *d, bool fPrompt )$/;"	f
process_penalty	penalty.c	/^bool process_penalty( CHAR_DATA *ch, char *argument, char *pentype )$/;"	f
program_flow	mob_prog.c	/^void program_flow( $/;"	f
proto_spell_breath	breath.c	/^void proto_spell_breath( int sn, int level, CHAR_DATA *ch, CHAR_DATA *victim, $/;"	f
punish_spam	alias.c	/^void punish_spam()$/;"	f
purge_area	db.c	/^void purge_area( AREA_DATA *pArea )$/;"	f
purge_room	db.c	/^void purge_room( ROOM_INDEX_DATA *pRoom )$/;"	f
quality	smith.c	/^	int	quality;$/;"	m	struct:blacksmith_material_type	file:
quality	smith.c	/^	int quality;$/;"	m	struct:workmanship_type	file:
quality	smith.c	/^int quality(int workmanship, int level)$/;"	f
quest_free	recycle.c	/^QUEST_DATA *quest_free;$/;"	v
quest_item	quest.c	/^struct quest_item$/;"	s	file:
quest_item_table	quest.c	/^QUEST_ITEM quest_item_table[] =$/;"	v
quest_level_diff	quest.c	/^bool quest_level_diff( CHAR_DATA *ch, int mlevel)$/;"	f
quest_status	quest.c	/^int quest_status( CHAR_DATA *ch, int id )$/;"	f
quest_timer	quest.c	/^int quest_timer;$/;"	v
quest_update	quest.c	/^void quest_update(void)$/;"	f
quit_char	act_comm.c	/^void quit_char( CHAR_DATA *ch )$/;"	f
quit_save_char_obj	simsave.c	/^void quit_save_char_obj( CHAR_DATA *ch )$/;"	f
r_atoi	mob_cmds.c	/^int r_atoi( CHAR_DATA *ch, char *arg )$/;"	f
race	aclone.c	/^	sh_int      race;$/;"	m	struct:mob_index_data	file:
race_doppelganger	db.c	/^sh_int race_doppelganger;$/;"	v
race_lookup	lookup.c	/^int race_lookup (const char *name)$/;"	f
race_naga	db.c	/^sh_int race_naga;$/;"	v
race_table	const.c	/^\/*const*\/   struct  race_type   race_table  []      =$/;"	v
race_vampire	db.c	/^sh_int race_vampire;$/;"	v
race_werewolf	db.c	/^sh_int race_werewolf;$/;"	v
random_attack_type	db.c	/^int random_attack_type()$/;"	f
range_is_free	aclone.c	/^bool range_is_free( int min_vnum, int max_vnum )$/;"	f
range_is_free	vshift.c	/^bool range_is_free( int min_vnum, int max_vnum )$/;"	f
rank_available	clan.c	/^bool rank_available(int clan, int current_rank, int new_rank)$/;"	f
rarity	alchemy.c	/^    int rarity;$/;"	m	struct:herb_type	file:
raw_kill	fight.c	/^void raw_kill( CHAR_DATA *victim, CHAR_DATA *killer, bool to_morgue )$/;"	f
rbuffer_free	buffer_util.c	/^void rbuffer_free( RBUFFER *rbuf )$/;"	f
rbuffer_new	buffer_util.c	/^RBUFFER* rbuffer_new( int min_size )$/;"	f
rbuffer_reset	buffer_util.c	/^void rbuffer_reset( RBUFFER *rbuf )$/;"	f
read_from_buffer	comm.c	/^void read_from_buffer( DESCRIPTOR_DATA *d )$/;"	f
read_from_descriptor	comm.c	/^bool read_from_descriptor( DESCRIPTOR_DATA *d )$/;"	f
read_imotd	nanny.c	/^bool	read_imotd ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
read_motd	nanny.c	/^bool	read_motd ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
read_wrap_buffer	buffer_util.c	/^RBUFFER* read_wrap_buffer( DBUFFER *buf )$/;"	f
read_wrap_free	buffer_util.c	/^void read_wrap_free( RBUFFER *rbuf )$/;"	f
ready_to_save	simsave.c	/^bool ready_to_save( CHAR_DATA *ch )$/;"	f
rec_size	hunt.c	/^    int           rec_size;$/;"	m	struct:hash_header	file:
recipe_table	alchemy.c	/^struct recipe_type recipe_table[] =$/;"	v
recipe_type	alchemy.c	/^struct recipe_type$/;"	s	file:
recursive_clone	act_wiz.c	/^void recursive_clone(CHAR_DATA *ch, OBJ_DATA *obj, OBJ_DATA *clone)$/;"	f
redit	olc.c	/^void redit( CHAR_DATA *ch, char *argument )$/;"	f
redit_add_reset	redit-ilab.c	/^static void redit_add_reset (ROOM_INDEX_DATA *pRoom, RESET_DATA *pReset)$/;"	f	file:
redit_table	olc.c	/^const struct olc_cmd_type redit_table[] =$/;"	v
rel_area	vshift.c	/^void rel_area( AREA_DATA *area )$/;"	f
rel_mprog_code	vshift.c	/^void rel_mprog_code( MPROG_CODE *mprog, int min_vnum, int max_vnum )$/;"	f
rel_mprog_list	vshift.c	/^void rel_mprog_list( MPROG_LIST *list, int min_vnum, int max_vnum )$/;"	f
rel_string	vshift.c	/^char* rel_string( char *str, int min_vnum, int max_vnum )$/;"	f
religion_add_follower	religion.c	/^void religion_add_follower( RELIGION_DATA *religion, CHAR_DATA *ch )$/;"	f
religion_check_priest_exist	religion.c	/^void religion_check_priest_exist( RELIGION_DATA *religion )$/;"	f
religion_create_relic	religion.c	/^void religion_create_relic( RELIGION_DATA *religion )$/;"	f
religion_get_follower	religion.c	/^FOLLOWER_DATA* religion_get_follower( RELIGION_DATA *religion, char *name )$/;"	f
religion_get_war_status	religion.c	/^int religion_get_war_status( RELIGION_DATA *religion, RELIGION_DATA *opp )$/;"	f
religion_list	religion.c	/^static RELIGION_DATA *religion_list = NULL;$/;"	v	file:
religion_load_from_file	religion.c	/^RELIGION_DATA* religion_load_from_file( FILE *fp )$/;"	f
religion_ranks	religion.c	/^static RELIGION_RANK_DATA religion_ranks[RELIGION_MAX_RANK] =$/;"	v	file:
religion_relic_damage	religion.c	/^void religion_relic_damage( RELIGION_DATA *religion )$/;"	f
religion_remove_follower	religion.c	/^void religion_remove_follower( CHAR_DATA *ch )$/;"	f
religion_remove_war_status	religion.c	/^void religion_remove_war_status( RELIGION_DATA *religion, RELIGION_DATA *opp )$/;"	f
religion_restore_relic	religion.c	/^void religion_restore_relic( RELIGION_DATA *religion )$/;"	f
religion_save_to_buffer	religion.c	/^void religion_save_to_buffer( RELIGION_DATA *rel, DBUFFER *fp )$/;"	f
religion_set_war_status	religion.c	/^void religion_set_war_status( RELIGION_DATA *religion, RELIGION_DATA *opp, int status )$/;"	f
religion_update_followers	religion.c	/^void religion_update_followers( RELIGION_DATA *religion )$/;"	f
religion_update_priests	religion.c	/^void religion_update_priests( RELIGION_DATA *religion )$/;"	f
religion_war_load_from_file	religion.c	/^RELIGION_WAR_DATA* religion_war_load_from_file( FILE *fp )$/;"	f
religion_war_save_to_buffer	religion.c	/^void religion_war_save_to_buffer( RELIGION_WAR_DATA *war, DBUFFER *fp )$/;"	f
remember_attack	hunt.c	/^void remember_attack(CHAR_DATA *ch, CHAR_DATA *victim, int dam)$/;"	f
remort_begin	remort.c	/^void remort_begin(CHAR_DATA *ch)$/;"	f
remort_bonus	stats.c	/^int remort_bonus (CHAR_DATA *ch, int stat )$/;"	f
remort_cancel	remort.c	/^void remort_cancel(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_chamber	remort.c	/^struct remort_chamber$/;"	s	file:
remort_complete	remort.c	/^void remort_complete(CHAR_DATA *ch)$/;"	f
remort_enter	remort.c	/^void remort_enter(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_load	remort.c	/^void remort_load()$/;"	f
remort_lower	remort.c	/^void remort_lower( CHAR_DATA *ch, char *arg )$/;"	f
remort_mem_save	remort.c	/^MEMFILE* remort_mem_save()$/;"	f
remort_remove	remort.c	/^void remort_remove(CHAR_DATA *ch, bool success)$/;"	f
remort_reset_area	remort.c	/^void remort_reset_area( AREA_DATA *pArea )$/;"	f
remort_save	remort.c	/^void remort_save()$/;"	f
remort_save_needed	remort.c	/^static bool remort_save_needed = FALSE;$/;"	v	file:
remort_signup	remort.c	/^void remort_signup(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_speed	remort.c	/^void remort_speed(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_status	remort.c	/^void remort_status(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_table	remort.c	/^struct remort_table$/;"	s	file:
remort_update	remort.c	/^void remort_update()$/;"	f
remorts	remort.c	/^    int remorts;$/;"	m	struct:remort_table	file:
remove_bounty	update.c	/^void remove_bounty(CHAR_DATA *ch)$/;"	f
remove_color	comm.c	/^char* remove_color( const char *txt )$/;"	f
remove_from_auth	auth.c	/^void remove_from_auth( char *name )$/;"	f
remove_from_list	simsave.c	/^bool remove_from_list( char *name, MEMFILE **list )$/;"	f
remove_from_quit_list	simsave.c	/^bool remove_from_quit_list( char *name )$/;"	f
remove_from_save_list	simsave.c	/^bool remove_from_save_list( char *name )$/;"	f
remove_from_who_list	nanny.c	/^void remove_from_who_list( DESCRIPTOR_DATA *d )$/;"	f
remove_obj	act_obj.c	/^bool remove_obj( CHAR_DATA *ch, int iWear, bool fReplace )$/;"	f
remove_priest	religion.c	/^void remove_priest( CHAR_DATA *ch )$/;"	f
remove_religion	religion.c	/^void remove_religion( RELIGION_DATA *religion )$/;"	f
remove_reset	redit-ilab.c	/^static void remove_reset (ROOM_INDEX_DATA *pRoom, RESET_DATA *pReset)$/;"	f	file:
remove_smart	act_obj.c	/^bool remove_smart( CHAR_DATA *ch, OBJ_DATA *new_obj, int iWear1, int iWear2, bool fReplace )$/;"	f
remove_tattoo	tattoo.c	/^void remove_tattoo( tattoo_list tl, int loc )$/;"	f
rename_obj	db.c	/^void rename_obj( OBJ_DATA *obj, char *name, char *short_descr, char *description )$/;"	f
renew_affect	magic2.c	/^void renew_affect( CHAR_DATA *ch, int sn, int level )$/;"	f
res_flags	aclone.c	/^	tflag        res_flags;$/;"	m	struct:mob_index_data	file:
res_flags	tables.c	/^const struct flag_type res_flags[] =$/;"	v
reset_area	db.c	/^void reset_area( AREA_DATA *pArea )$/;"	f
reset_char	handler.c	/^void reset_char(CHAR_DATA *ch)$/;"	f
reset_free	mem.c	/^RESET_DATA		*	reset_free;$/;"	v
reset_herbs	alchemy.c	/^void reset_herbs( ROOM_INDEX_DATA *room )$/;"	f
reset_herbs_area	alchemy.c	/^void reset_herbs_area( AREA_DATA *pArea )$/;"	f
reset_herbs_world	alchemy.c	/^void reset_herbs_world()$/;"	f
reset_level	redit-ilab.c	/^static int reset_level (ROOM_INDEX_DATA *pRoom, RESET_DATA *pReset)$/;"	f	file:
reset_nr	alchemy.c	/^    int reset_nr; \/\/ for counting nr of herbs reset$/;"	m	struct:herb_type	file:
reset_room	db.c	/^void reset_room( ROOM_INDEX_DATA *pRoom )$/;"	f
restore_char	act_wiz.c	/^void restore_char( CHAR_DATA *victim )$/;"	f
rev_dir	act_move.c	/^const   sh_int  rev_dir     []      =$/;"	v
reverse_affect_order	olc_save.c	/^void reverse_affect_order(OBJ_INDEX_DATA *pObjIndex)$/;"	f
reverse_char_list	fight.c	/^void reverse_char_list()$/;"	f
reverse_mprog_order	olc_save.c	/^void reverse_mprog_order(MOB_INDEX_DATA *pMobIndex)$/;"	f
revoke_level	grant.c	/^void revoke_level( CHAR_DATA *ch, CHAR_DATA *victim, int level )$/;"	f
rgFreeList	db.c	/^void *          rgFreeList  [MAX_MEM_LIST];$/;"	v
rgObjNest	bsave.c	/^static  OBJ_DATA *  rgObjNest   [MAX_NEST];$/;"	v	file:
rgSizeList	db.c	/^const int       rgSizeList  [MAX_MEM_LIST]  =$/;"	v
rgiState	db.c	/^static  int     rgiState[2+55];$/;"	v	file:
roll_dice	stats.c	/^void roll_dice (CHAR_DATA *ch, bool take_default)$/;"	f
roll_stats	nanny.c	/^bool roll_stats ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
room_enter	hunt.c	/^int room_enter(ROOM_INDEX_DATA *rb[],int key,ROOM_INDEX_DATA *rm)$/;"	f
room_find	hunt.c	/^ROOM_INDEX_DATA *room_find(ROOM_INDEX_DATA *room_db[],int key)$/;"	f
room_find_or_create	hunt.c	/^ROOM_INDEX_DATA *room_find_or_create(ROOM_INDEX_DATA *rb[],int key)$/;"	f
room_flags	tables.c	/^const struct flag_type room_flags[] =$/;"	v
room_index_free	mem.c	/^ROOM_INDEX_DATA		*	room_index_free;$/;"	v
room_index_hash	db.c	/^ROOM_INDEX_DATA *   room_index_hash     [MAX_KEY_HASH];$/;"	v
room_is_dark	handler.c	/^bool room_is_dark( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_is_dim	handler.c	/^bool room_is_dim( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_is_private	handler.c	/^bool room_is_private( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_is_sunlit	handler.c	/^bool room_is_sunlit( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_iterate	hunt.c	/^void room_iterate(ROOM_INDEX_DATA *rb[],void (*func)(),void *cdata)$/;"	f
room_nr	hunt.c	/^    int       room_nr;$/;"	m	struct:room_q	file:
room_q	hunt.c	/^struct room_q$/;"	s	file:
room_remove	hunt.c	/^int room_remove(ROOM_INDEX_DATA *rb[],int key)$/;"	f
rot_herbs	alchemy.c	/^int rot_herbs( int vnum )$/;"	f
rpad	string.c	/^char *rpad( char *argument, int width, char fill )$/;"	f
run_combat_action	fight.c	/^void run_combat_action( DESCRIPTOR_DATA *d )$/;"	f
run_olc_editor	olc.c	/^bool run_olc_editor( DESCRIPTOR_DATA *d )$/;"	f
sAllocPerm	db.c	/^int         sAllocPerm;$/;"	v
sAllocString	db.c	/^int         sAllocString;$/;"	v
save_area	olc_save.c	/^void save_area( AREA_DATA *pArea )$/;"	f
save_area_list	olc_save.c	/^void save_area_list()$/;"	f
save_auth_list	auth.c	/^void save_auth_list()$/;"	f
save_bans	ban.c	/^void save_bans(void)$/;"	f
save_board	board.c	/^static void save_board (BOARD_DATA *board)$/;"	f	file:
save_body_affect	fight.c	/^bool save_body_affect( CHAR_DATA *ch, int level )$/;"	f
save_clanwars	clanwar.c	/^void save_clanwars()$/;"	f
save_crime_list	penalty.c	/^void save_crime_list(void)$/;"	f
save_disabled	interp.c	/^void save_disabled()$/;"	f
save_door_resets	olc_save.c	/^void save_door_resets( FILE *fp, AREA_DATA *pArea )$/;"	f
save_helps	olc_save.c	/^void save_helps( FILE *fp, HELP_AREA *ha )$/;"	f
save_mobile	olc_save.c	/^void save_mobile( FILE *fp, MOB_INDEX_DATA *pMobIndex )$/;"	f
save_mobiles	olc_save.c	/^void save_mobiles( FILE *fp, AREA_DATA *pArea )$/;"	f
save_mobprogs	olc_save.c	/^void save_mobprogs( FILE *fp, AREA_DATA *pArea )$/;"	f
save_notes	board.c	/^void save_notes ()$/;"	f
save_number	update.c	/^int save_number = 0;$/;"	v
save_object	olc_save.c	/^void save_object( FILE *fp, OBJ_INDEX_DATA *pObjIndex )$/;"	f
save_objects	olc_save.c	/^void save_objects( FILE *fp, AREA_DATA *pArea )$/;"	f
save_other_helps	olc_save.c	/^void save_other_helps( void )$/;"	f
save_penalties	penalty.c	/^void save_penalties()$/;"	f
save_portal_list	act_enter.c	/^void save_portal_list()$/;"	f
save_quest	bsave.c	/^void save_quest( CHAR_DATA *ch, DBUFFER *buf )$/;"	f
save_religions	religion.c	/^MEMFILE* save_religions()$/;"	f
save_reserved	act_wiz.c	/^void save_reserved(void)$/;"	f
save_resets	olc_save.c	/^void save_resets( FILE *fp, AREA_DATA *pArea )$/;"	f
save_rooms	olc_save.c	/^void save_rooms( FILE *fp, AREA_DATA *pArea )$/;"	f
save_shops	olc_save.c	/^void save_shops( FILE *fp, AREA_DATA *pArea )$/;"	f
save_skill	skills.c	/^void save_skill(FILE *f, int sn)$/;"	f
save_skills	skills.c	/^void save_skills()$/;"	f
save_social	social-edit.c	/^void save_social (const struct social_type *s, FILE *fp)$/;"	f
save_social_table	social-edit.c	/^void save_social_table()$/;"	f
save_specials	olc_save.c	/^void save_specials( FILE *fp, AREA_DATA *pArea )$/;"	f
save_to_dir	buffer_util.c	/^bool save_to_dir( MEMFILE *mf, char *dir )$/;"	f
save_wizlist	wizlist.c	/^void save_wizlist(void)$/;"	f
saves_dispel	magic.c	/^bool saves_dispel( int dis_level, int spell_level, int duration )$/;"	f
saves_song	song.c	/^bool saves_song( int level, CHAR_DATA *ch, CHAR_DATA *victim, int base_chance )$/;"	f
saves_spell	magic.c	/^bool saves_spell( int level, CHAR_DATA *victim, int dam_type )$/;"	f
saves_spell_hard	magic.c	/^bool saves_spell_hard( int level, CHAR_DATA *victim, int dam_type )$/;"	f
say_basic_obj_data	act_info.c	/^void say_basic_obj_data( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
say_basic_obj_index_data	act_info.c	/^void say_basic_obj_index_data( CHAR_DATA *ch, OBJ_INDEX_DATA *obj )$/;"	f
say_spell	magic.c	/^void say_spell( CHAR_DATA *ch, int sn )$/;"	f
scan_char	scan.c	/^void scan_char(CHAR_DATA *victim, CHAR_DATA *ch, sh_int depth, sh_int door)$/;"	f
scan_list	scan.c	/^void scan_list(ROOM_INDEX_DATA *scan_room, CHAR_DATA *ch, sh_int depth,$/;"	f
sector	alchemy.c	/^    int sector;$/;"	m	struct:herb_type	file:
sector_flags	tables.c	/^const struct flag_type sector_flags[] =$/;"	v
sell_quest_item	quest.c	/^bool sell_quest_item( CHAR_DATA *ch, OBJ_DATA *obj, CHAR_DATA *quest_man )$/;"	f
send_to_char	comm.c	/^void send_to_char( const char *txt, CHAR_DATA *ch )$/;"	f
send_to_char_bw	comm.c	/^void send_to_char_bw( const char *txt, CHAR_DATA *ch )$/;"	f
set_affect_flag	stats.c	/^void set_affect_flag( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
set_con_state	nanny.c	/^void set_con_state(DESCRIPTOR_DATA *d, int cstate)$/;"	f
set_creation_state	nanny.c	/^void set_creation_state(DESCRIPTOR_DATA *d, int cmode)$/;"	f
set_fighting	fight.c	/^void set_fighting( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
set_fighting_new	fight.c	/^void set_fighting_new( CHAR_DATA *ch, CHAR_DATA *victim, bool kill_trigger )$/;"	f
set_hunting	hunt.c	/^void set_hunting(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
set_level_exp	skills.c	/^void set_level_exp( CHAR_DATA *ch )$/;"	f
set_mob_level	olc_act.c	/^void set_mob_level( CHAR_DATA *mob, int level )$/;"	f
set_obj_values	olc_act.c	/^bool set_obj_values( CHAR_DATA *ch, OBJ_INDEX_DATA *pObj, int value_num, char *argument)$/;"	f
set_pos	fight.c	/^void set_pos( CHAR_DATA *ch, int position )$/;"	f
set_quest_status	quest.c	/^void set_quest_status( CHAR_DATA *ch, int id, int status )$/;"	f
set_title	act_info.c	/^void set_title( CHAR_DATA *ch, char *title )$/;"	f
set_value	olc_act.c	/^bool set_value( CHAR_DATA *ch, OBJ_INDEX_DATA *pObj, char *argument, int value )$/;"	f
sex	aclone.c	/^	sh_int      sex;$/;"	m	struct:mob_index_data	file:
sex_flags	tables.c	/^const struct flag_type sex_flags[] =$/;"	v
sex_lookup	lookup.c	/^int sex_lookup (const char *name)$/;"	f
sex_table	tables.c	/^const struct sex_type sex_table[] =$/;"	v
shift	vshift.c	/^int shift( int vnum )$/;"	f
shift_area	vshift.c	/^void shift_area( AREA_DATA *area, int shift, bool area_only )$/;"	f
shift_area_data	vshift.c	/^void shift_area_data( AREA_DATA *area )$/;"	f
shift_exit	vshift.c	/^void shift_exit( EXIT_DATA *exit )$/;"	f
shift_mob	vshift.c	/^void shift_mob( MOB_INDEX_DATA *mob )$/;"	f
shift_mprog_code	vshift.c	/^void shift_mprog_code( MPROG_CODE *mprog )$/;"	f
shift_mprog_list	vshift.c	/^void shift_mprog_list( MPROG_LIST *list )$/;"	f
shift_obj	vshift.c	/^void shift_obj( OBJ_INDEX_DATA *obj )$/;"	f
shift_reset_list	vshift.c	/^void shift_reset_list( RESET_DATA *reset )$/;"	f
shift_room	vshift.c	/^void shift_room( ROOM_INDEX_DATA *room )$/;"	f
shift_shop	vshift.c	/^void shift_shop( SHOP_DATA *shop )$/;"	f
shock_effect	effects.c	/^void shock_effect(void *vo,int level, int dam, int target)$/;"	f
shop_first	db.c	/^SHOP_DATA *     shop_first;$/;"	v
shop_free	mem.c	/^SHOP_DATA		*	shop_free;$/;"	v
shop_last	db.c	/^SHOP_DATA *     shop_last;$/;"	v
show_affect	act_info.c	/^void show_affect( CHAR_DATA *ch, AFFECT_DATA *paf, bool say_it )$/;"	f
show_affects	act_info.c	/^void show_affects(CHAR_DATA *ch, CHAR_DATA *to_ch, bool show_long, bool show_all)$/;"	f
show_char_to_char	act_info.c	/^void show_char_to_char( CHAR_DATA *list, CHAR_DATA *ch )$/;"	f
show_char_to_char_0	act_info.c	/^void show_char_to_char_0( CHAR_DATA *victim, CHAR_DATA *ch )$/;"	f
show_char_to_char_1	act_info.c	/^void show_char_to_char_1( CHAR_DATA *victim, CHAR_DATA *ch, bool glance )$/;"	f
show_commands	olc.c	/^bool show_commands( CHAR_DATA *ch, char *argument )$/;"	f
show_damlist	olc_act.c	/^void show_damlist(CHAR_DATA *ch)$/;"	f
show_dependants	redit-ilab.c	/^static bool show_dependants (CHAR_DATA *ch, const RESET_DATA *p, bool fInside, bool fLevelChange)$/;"	f	file:
show_disguise_list	act_info.c	/^void show_disguise_list( CHAR_DATA *ch )$/;"	f
show_flag_cmds	olc_act.c	/^void show_flag_cmds( CHAR_DATA *ch, const struct flag_type *flag_table )$/;"	f
show_ftag_status	freeze.c	/^void show_ftag_status( CHAR_DATA *ch, bool final )$/;"	f
show_god_syntax	religion.c	/^void show_god_syntax( CHAR_DATA *ch )$/;"	f
show_grep_syntax	grep.c	/^void show_grep_syntax( CHAR_DATA *ch )$/;"	f
show_groups	skills.c	/^void show_groups( int skill, BUFFER *buffer )$/;"	f
show_help	olc_act.c	/^bool show_help( CHAR_DATA *ch, char *argument )$/;"	f
show_liqlist	olc_act.c	/^void show_liqlist(CHAR_DATA *ch)$/;"	f
show_list_to_char	act_info.c	/^void show_list_to_char( OBJ_DATA *list, CHAR_DATA *ch, bool fShort, bool fShowNothing )$/;"	f
show_note_to_char	board.c	/^static void show_note_to_char (CHAR_DATA *ch, NOTE_DATA *note, int num)$/;"	f	file:
show_obj_values	olc_act.c	/^void show_obj_values( CHAR_DATA *ch, OBJ_INDEX_DATA *obj )$/;"	f
show_olc_cmds	olc.c	/^void show_olc_cmds( CHAR_DATA *ch, const struct olc_cmd_type *olc_table )$/;"	f
show_pc_race_ratings	stats.c	/^void show_pc_race_ratings( CHAR_DATA *ch, int race )$/;"	f
show_penalties_by_player	penalty.c	/^int show_penalties_by_player(CHAR_DATA *ch, char *victim_name, int victim_played, int format)$/;"	f
show_penalty_type	penalty.c	/^void show_penalty_type(CHAR_DATA *ch, char *penname)$/;"	f
show_portal_names	act_enter.c	/^void show_portal_names( CHAR_DATA *ch )$/;"	f
show_pray_syntax	religion.c	/^void show_pray_syntax( CHAR_DATA *ch )$/;"	f
show_quests	quest.c	/^void show_quests( CHAR_DATA *ch, CHAR_DATA *to_ch )$/;"	f
show_races	skills.c	/^void show_races( int skill, BUFFER *buffer )$/;"	f
show_races_to_d	nanny.c	/^void show_races_to_d( DESCRIPTOR_DATA *d )$/;"	f
show_ratings	olc_act.c	/^void show_ratings( CHAR_DATA *ch )$/;"	f
show_religion_info	religion.c	/^void show_religion_info( RELIGION_DATA *rel, CHAR_DATA *ch )$/;"	f
show_religion_syntax	religion.c	/^void show_religion_syntax( CHAR_DATA *ch )$/;"	f
show_remort_bonus	stats.c	/^void show_remort_bonus( CHAR_DATA *ch, int race )$/;"	f
show_reset	redit-ilab.c	/^static void show_reset (CHAR_DATA *ch, int number, RESET_DATA *pReset, int nesting, int last_level)$/;"	f	file:
show_skill	skills.c	/^void show_skill(char *argument, BUFFER *buffer)$/;"	f
show_skill_cmds	olc_act.c	/^void show_skill_cmds( CHAR_DATA *ch, int tar )$/;"	f
show_spec_cmds	olc_act.c	/^void show_spec_cmds( CHAR_DATA *ch )$/;"	f
show_string	comm.c	/^void show_string(struct descriptor_data *d, char *input)$/;"	f
show_tattoo_loc	tattoo.c	/^void show_tattoo_loc( CHAR_DATA *ch )$/;"	f
show_tattoo_syntax	tattoo.c	/^void show_tattoo_syntax( CHAR_DATA *ch )$/;"	f
show_tattoos	tattoo.c	/^void show_tattoos( CHAR_DATA *ch )$/;"	f
show_version	olc_act.c	/^bool show_version( CHAR_DATA *ch, char *argument )$/;"	f
signup	remort.c	/^    time_t signup;$/;"	m	struct:remort_table	file:
sim_save_other	simsave.c	/^void sim_save_other()$/;"	f
sim_save_to_mem	simsave.c	/^void sim_save_to_mem()$/;"	f
size	aclone.c	/^	sh_int      size;$/;"	m	struct:mob_index_data	file:
size	smith.c	/^	int size;	$/;"	m	struct:armor_subtype	file:
size	smith.c	/^	int size;	$/;"	m	struct:weapon_subtype	file:
size_flags	tables.c	/^const struct flag_type size_flags[] =$/;"	v
size_lookup	lookup.c	/^int size_lookup (const char *name)$/;"	f
size_table	tables.c	/^const struct size_type size_table[] =$/;"	v
skill_lookup	magic.c	/^int skill_lookup( const char *name )$/;"	f
skill_table	const.c	/^struct  skill_type  skill_table [MAX_SKILL] =$/;"	v
slashmod	smith.c	/^	int slashmod;$/;"	m	struct:armor_subtype	file:
slot_lookup	magic.c	/^int slot_lookup( int slot )$/;"	f
slow_effect	breath.c	/^void slow_effect( void *vo, int level, int dam, int target )$/;"	f
smash_beep_n_blink	act_info.c	/^void smash_beep_n_blink( char *str )$/;"	f
smash_tilde	db.c	/^void smash_tilde( char *str )$/;"	f
smith_color	smith.c	/^bool smith_color (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_cost	smith.c	/^long smith_cost(OBJ_DATA *obj, int material, CHAR_DATA *ch)$/;"	f
smith_finish_armor	smith.c	/^void smith_finish_armor(OBJ_DATA *obj)$/;"	f
smith_finish_obj	smith.c	/^bool smith_finish_obj (CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
smith_finish_weapon	smith.c	/^void smith_finish_weapon(OBJ_DATA *obj)$/;"	f
smith_inventory	smith.c	/^bool smith_inventory (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_keyword	smith.c	/^char *smith_keyword (OBJ_DATA *obj, char *name)$/;"	f
smith_keywords	smith.c	/^bool smith_keywords (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_level	smith.c	/^bool smith_level (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_material	smith.c	/^bool smith_material (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_name	smith.c	/^char *smith_name (OBJ_DATA *obj, char *name)$/;"	f
smith_personal	smith.c	/^bool smith_personal (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_purchase	smith.c	/^bool smith_purchase (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_quality	smith.c	/^bool smith_quality (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_select	smith.c	/^bool smith_select (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_show_armor	smith.c	/^void smith_show_armor (CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
smith_show_obj	smith.c	/^void smith_show_obj (CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
smith_show_weapon	smith.c	/^void smith_show_weapon (CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
smith_sticky_obj	smith.c	/^void smith_sticky_obj (CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
smith_subtype	smith.c	/^bool smith_subtype (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_type	smith.c	/^bool smith_type (DESCRIPTOR_DATA *d, char *argument)$/;"	f
smith_welcome	smith.c	/^bool smith_welcome (DESCRIPTOR_DATA *d, char *argument)$/;"	f
sn_first_song	song.c	/^sh_int sn_first_song;$/;"	v
sn_last_song	song.c	/^sh_int sn_last_song;$/;"	v
social_lookup	social-edit.c	/^int social_lookup (const char *name)$/;"	f
social_table	social-edit.c	/^struct social_type *social_table;	   \/* and social table *\/$/;"	v
song_effect	song.c	/^void song_effect(CHAR_DATA *tar, int sn, int loc, int mod, int bit)$/;"	f
song_from_char	song.c	/^void song_from_char( CHAR_DATA *ch )$/;"	f
song_from_room	song.c	/^void song_from_room( CHAR_DATA *ch )$/;"	f
song_level	song.c	/^int song_level ( CHAR_DATA *ch, int sn )$/;"	f
song_lookup	song.c	/^int song_lookup(CHAR_DATA *ch, const char *name )$/;"	f
song_table	music.c	/^struct song_data song_table[MAX_SONGS];$/;"	v
song_to_char	song.c	/^void song_to_char( CHAR_DATA *ch )$/;"	f
song_to_room	song.c	/^void song_to_room( CHAR_DATA *ch )$/;"	f
song_update	music.c	/^void song_update(void)$/;"	f
sort_bounty	update.c	/^void sort_bounty(SORT_TABLE * sort)$/;"	f
sort_free	recycle.c	/^SORT_TABLE *sort_free;$/;"	v
sort_reserved	db.c	/^void sort_reserved( RESERVED_DATA *pRes )$/;"	f
spec_bounty_hunter	special.c	/^DECLARE_SPEC_FUN(   spec_bounty_hunter	);$/;"	v
spec_bounty_hunter	special.c	/^bool spec_bounty_hunter (CHAR_DATA *ch)$/;"	f
spec_breath_acid	special.c	/^DECLARE_SPEC_FUN(   spec_breath_acid    );$/;"	v
spec_breath_acid	special.c	/^bool spec_breath_acid( CHAR_DATA *ch )$/;"	f
spec_breath_any	special.c	/^DECLARE_SPEC_FUN(   spec_breath_any     );$/;"	v
spec_breath_any	special.c	/^bool spec_breath_any( CHAR_DATA *ch )$/;"	f
spec_breath_fire	special.c	/^DECLARE_SPEC_FUN(   spec_breath_fire    );$/;"	v
spec_breath_fire	special.c	/^bool spec_breath_fire( CHAR_DATA *ch )$/;"	f
spec_breath_frost	special.c	/^DECLARE_SPEC_FUN(   spec_breath_frost   );$/;"	v
spec_breath_frost	special.c	/^bool spec_breath_frost( CHAR_DATA *ch )$/;"	f
spec_breath_gas	special.c	/^DECLARE_SPEC_FUN(   spec_breath_gas     );$/;"	v
spec_breath_gas	special.c	/^bool spec_breath_gas( CHAR_DATA *ch )$/;"	f
spec_breath_lightning	special.c	/^DECLARE_SPEC_FUN(   spec_breath_lightning   );$/;"	v
spec_breath_lightning	special.c	/^bool spec_breath_lightning( CHAR_DATA *ch )$/;"	f
spec_cast_adept	special.c	/^DECLARE_SPEC_FUN(   spec_cast_adept     );$/;"	v
spec_cast_adept	special.c	/^bool spec_cast_adept( CHAR_DATA *ch )$/;"	f
spec_cast_cleric	special.c	/^DECLARE_SPEC_FUN(   spec_cast_cleric    );$/;"	v
spec_cast_cleric	special.c	/^bool spec_cast_cleric( CHAR_DATA *ch )$/;"	f
spec_cast_judge	special.c	/^DECLARE_SPEC_FUN(   spec_cast_judge     );$/;"	v
spec_cast_judge	special.c	/^bool spec_cast_judge( CHAR_DATA *ch )$/;"	f
spec_cast_mage	special.c	/^DECLARE_SPEC_FUN(   spec_cast_mage      );$/;"	v
spec_cast_mage	special.c	/^bool spec_cast_mage( CHAR_DATA *ch )$/;"	f
spec_cast_undead	special.c	/^DECLARE_SPEC_FUN(   spec_cast_undead    );$/;"	v
spec_cast_undead	special.c	/^bool spec_cast_undead( CHAR_DATA *ch )$/;"	f
spec_executioner	fight.c	/^DECLARE_SPEC_FUN(   spec_executioner    );$/;"	v
spec_executioner	special.c	/^DECLARE_SPEC_FUN(   spec_executioner    );$/;"	v
spec_executioner	special.c	/^bool spec_executioner( CHAR_DATA *ch )$/;"	f
spec_fido	special.c	/^DECLARE_SPEC_FUN(   spec_fido       );$/;"	v
spec_fido	special.c	/^bool spec_fido( CHAR_DATA *ch )$/;"	f
spec_guard	fight.c	/^DECLARE_SPEC_FUN(   spec_guard          );$/;"	v
spec_guard	special.c	/^DECLARE_SPEC_FUN(   spec_guard      );$/;"	v
spec_guard	special.c	/^bool spec_guard( CHAR_DATA *ch )$/;"	f
spec_janitor	special.c	/^DECLARE_SPEC_FUN(   spec_janitor        );$/;"	v
spec_janitor	special.c	/^bool spec_janitor( CHAR_DATA *ch )$/;"	f
spec_lookup	special.c	/^SPEC_FUN *spec_lookup( const char *name )$/;"	f
spec_mayor	special.c	/^DECLARE_SPEC_FUN(   spec_mayor      );$/;"	v
spec_mayor	special.c	/^bool spec_mayor( CHAR_DATA *ch )$/;"	f
spec_name	special.c	/^char *spec_name( SPEC_FUN *function)$/;"	f
spec_nasty	special.c	/^DECLARE_SPEC_FUN(   spec_nasty      );$/;"	v
spec_nasty	special.c	/^bool spec_nasty( CHAR_DATA *ch )$/;"	f
spec_ogre_member	special.c	/^DECLARE_SPEC_FUN(   spec_ogre_member    );$/;"	v
spec_ogre_member	special.c	/^bool spec_ogre_member( CHAR_DATA *ch)$/;"	f
spec_patrolman	special.c	/^DECLARE_SPEC_FUN(   spec_patrolman      );$/;"	v
spec_patrolman	special.c	/^bool spec_patrolman(CHAR_DATA *ch)$/;"	f
spec_poison	special.c	/^DECLARE_SPEC_FUN(   spec_poison     );$/;"	v
spec_poison	special.c	/^bool spec_poison( CHAR_DATA *ch )$/;"	f
spec_questmaster	special.c	/^DECLARE_SPEC_FUN(   spec_questmaster        );   \/* Vassago *\/$/;"	v
spec_questmaster	special.c	/^bool spec_questmaster (CHAR_DATA *ch)$/;"	f
spec_remort	special.c	/^DECLARE_SPEC_FUN(   spec_remort	);$/;"	v
spec_remort	special.c	/^bool spec_remort (CHAR_DATA *ch)$/;"	f
spec_table	special.c	/^const   struct  spec_type    spec_table[] =$/;"	v
spec_temple_guard	special.c	/^DECLARE_SPEC_FUN(   spec_temple_guard   );$/;"	v
spec_temple_guard	special.c	/^bool spec_temple_guard ( CHAR_DATA *ch )$/;"	f
spec_temple_guard	update.c	/^DECLARE_SPEC_FUN(   spec_temple_guard   );$/;"	v
spec_thief	special.c	/^DECLARE_SPEC_FUN(   spec_thief      );$/;"	v
spec_thief	special.c	/^bool spec_thief( CHAR_DATA *ch )$/;"	f
spec_troll_member	special.c	/^DECLARE_SPEC_FUN(   spec_troll_member   );$/;"	v
spec_troll_member	special.c	/^bool spec_troll_member( CHAR_DATA *ch)$/;"	f
special_affect_update	fight.c	/^void special_affect_update(CHAR_DATA *ch)$/;"	f
speed	remort.c	/^    bool speed;$/;"	m	struct:remort_chamber	file:
spell_absolute_zero	magic2.c	/^void spell_absolute_zero(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_acid_blast	magic.c	/^void spell_acid_blast( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_acid_breath	breath.c	/^void spell_acid_breath( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_angel_smite	magic.c	/^void spell_angel_smite(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_animate_dead	magic2.c	/^void spell_animate_dead( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_armor	magic.c	/^void spell_armor( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_astral	magic2.c	/^void spell_astral( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_base_cost	db.c	/^int spell_base_cost( int sn )$/;"	f
spell_betray	magic2.c	/^void spell_betray( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_bless	magic.c	/^void spell_bless( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_blessed_darkness	magic2.c	/^void spell_blessed_darkness( int sn, int level, CHAR_DATA *ch, void *vo, int target)   $/;"	f
spell_blindness	magic.c	/^void spell_blindness( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_breath_of_god	magic2.c	/^void spell_breath_of_god(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_breathe_water	magic2.c	/^void spell_breathe_water(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_burning_hands	magic.c	/^void spell_burning_hands(int sn,int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_call_lightning	fight.c	/^DECLARE_SPELL_FUN( spell_call_lightning );$/;"	v
spell_call_lightning	magic.c	/^void spell_call_lightning( int sn, int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_call_sidekick	magic2.c	/^void spell_call_sidekick( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_calm	magic.c	/^void spell_calm( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_cancellation	magic.c	/^void spell_cancellation( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_cannibalism	magic2.c	/^void spell_cannibalism( int sn, int level, CHAR_DATA *ch, void *vo ,int target)$/;"	f
spell_cause_critical	magic.c	/^void spell_cause_critical(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_cause_light	magic.c	/^void spell_cause_light( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_cause_serious	magic.c	/^void spell_cause_serious(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_chain_lightning	magic.c	/^void spell_chain_lightning(int sn,int level,CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_change_sex	magic.c	/^void spell_change_sex( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_charm_person	magic.c	/^void spell_charm_person( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_chill_touch	magic.c	/^void spell_chill_touch( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_colour_spray	magic.c	/^void spell_colour_spray( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_cone_of_exhaustion	breath.c	/^void spell_cone_of_exhaustion( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_confusion	fight.c	/^DECLARE_SPELL_FUN( spell_confusion      );$/;"	v
spell_confusion	magic.c	/^void spell_confusion( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_continual_light	magic.c	/^void spell_continual_light(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_control_weather	magic.c	/^void spell_control_weather(int sn,int level,CHAR_DATA *ch,void *vo,int target) $/;"	f
spell_cost	healer.c	/^struct spell_cost$/;"	s	file:
spell_create_bomb	magic.c	/^void spell_create_bomb( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_create_food	magic.c	/^void spell_create_food( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_create_rose	magic.c	/^void spell_create_rose( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_create_spring	magic.c	/^void spell_create_spring(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_create_water	magic.c	/^void spell_create_water( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_cure_blindness	magic.c	/^void spell_cure_blindness(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_cure_critical	magic2.c	/^void spell_cure_critical( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_cure_disease	magic.c	/^void spell_cure_disease( int sn, int level, CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_cure_light	magic2.c	/^void spell_cure_light( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_cure_mental	magic.c	/^void spell_cure_mental( int sn, int level, CHAR_DATA *ch,void *vo, int target )$/;"	f
spell_cure_mortal	magic2.c	/^void spell_cure_mortal( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_cure_poison	magic.c	/^void spell_cure_poison( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_cure_serious	magic2.c	/^void spell_cure_serious( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_curse	magic.c	/^void spell_curse( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_damned_blade	magic2.c	/^void spell_damned_blade( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_dancing_bones	magic2.c	/^void spell_dancing_bones( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_deaths_door	magic2.c	/^void spell_deaths_door( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_decompose	magic2.c	/^void spell_decompose(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_demonfire	magic.c	/^void spell_demonfire(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_detect_astral	magic2.c	/^void spell_detect_astral( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_detect_evil	magic.c	/^void spell_detect_evil( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_detect_good	magic.c	/^void spell_detect_good( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_detect_hidden	magic.c	/^void spell_detect_hidden(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_detect_invis	magic.c	/^void spell_detect_invis( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_detect_magic	magic.c	/^void spell_detect_magic( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_detect_poison	magic.c	/^void spell_detect_poison( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_dispel_evil	magic.c	/^void spell_dispel_evil( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_dispel_good	magic.c	/^void spell_dispel_good( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_dispel_magic	magic.c	/^void spell_dispel_magic( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_divine_light	magic2.c	/^void spell_divine_light(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_dominate_soul	magic2.c	/^void spell_dominate_soul( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_earthquake	magic.c	/^void spell_earthquake( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_electrocution	magic2.c	/^void spell_electrocution(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_enchant_armor	magic.c	/^void spell_enchant_armor( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_enchant_arrow	magic.c	/^void spell_enchant_arrow( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_enchant_weapon	magic.c	/^void spell_enchant_weapon( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_energy_drain	magic.c	/^void spell_energy_drain( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_entangle	magic2.c	/^void spell_entangle ( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_epidemic	magic2.c	/^void spell_epidemic(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_extinguish	magic2.c	/^void spell_extinguish(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_fade	magic2.c	/^void spell_fade(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_faerie_fire	magic.c	/^void spell_faerie_fire( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_faerie_fog	magic.c	/^void spell_faerie_fog( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_farsight	magic2.c	/^void spell_farsight( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_fear	magic2.c	/^void spell_fear( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_feeblemind	magic2.c	/^void spell_feeblemind ( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_fire_breath	breath.c	/^void spell_fire_breath( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_fireball	magic.c	/^void spell_fireball( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_fireproof	magic.c	/^void spell_fireproof(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_flamestrike	magic.c	/^void spell_flamestrike( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_floating_disc	magic.c	/^void spell_floating_disc( int sn, int level,CHAR_DATA *ch,void *vo,int target )$/;"	f
spell_fly	magic.c	/^void spell_fly( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_forboding_ooze	breath.c	/^void spell_forboding_ooze(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_frenzy	magic.c	/^void spell_frenzy(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_frost_breath	breath.c	/^void spell_frost_breath( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_gas_breath	breath.c	/^void spell_gas_breath( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_gate	magic.c	/^void spell_gate( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_general_purpose	magic.c	/^void spell_general_purpose(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_giant_strength	magic.c	/^void spell_giant_strength(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_glyph_of_evil	magic2.c	/^void spell_glyph_of_evil(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_goodberry	magic2.c	/^void spell_goodberry( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_group_heal	magic2.c	/^void spell_group_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_hailstorm	magic2.c	/^void spell_hailstorm( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_hand_of_god	magic2.c	/^void spell_hand_of_god(int sn,int level,CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_hand_of_siva	magic2.c	/^void spell_hand_of_siva( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_harm	magic.c	/^void spell_harm( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_haste	magic.c	/^void spell_haste( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_haunt	magic2.c	/^void spell_haunt(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_heal	magic.c	/^void spell_heal( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_heal_all	magic2.c	/^void spell_heal_all( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_heal_mind	magic2.c	/^void spell_heal_mind( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_heat_metal	magic.c	/^void spell_heat_metal( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_heroism	magic2.c	/^void spell_heroism( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_high_explosive	magic.c	/^void spell_high_explosive(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_holy_binding	magic2.c	/^void spell_holy_binding ( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_holy_word	magic.c	/^void spell_holy_word(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_identify	magic.c	/^void spell_identify( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_immolation	magic2.c	/^void spell_immolation(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_infravision	magic.c	/^void spell_infravision( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_invis	magic.c	/^void spell_invis( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_iron_maiden	magic2.c	/^void spell_iron_maiden( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_know_alignment	magic.c	/^void spell_know_alignment(int sn,int level,CHAR_DATA *ch,void *vo,int target )$/;"	f
spell_laughing_fit	fight.c	/^DECLARE_SPELL_FUN( spell_laughing_fit   );$/;"	v
spell_laughing_fit	magic2.c	/^void spell_laughing_fit( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_life_force	magic2.c	/^void spell_life_force ( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_lightning_bolt	fight.c	/^DECLARE_SPELL_FUN( spell_lightning_bolt );$/;"	v
spell_lightning_bolt	magic.c	/^void spell_lightning_bolt(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_lightning_breath	breath.c	/^void spell_lightning_breath(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_locate_object	magic.c	/^void spell_locate_object( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_lookup	magic.c	/^int spell_lookup( const char *name )$/;"	f
spell_magic_missile	magic.c	/^void spell_magic_missile( int sn, int level, CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_major_group_heal	magic2.c	/^void spell_major_group_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mana_burn	magic2.c	/^void spell_mana_burn( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mana_heal	magic2.c	/^void spell_mana_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mana_shield	magic2.c	/^void spell_mana_shield( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_mantra	magic2.c	/^void spell_mantra( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_mass_confusion	magic2.c	/^void spell_mass_confusion( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mass_healing	magic.c	/^void spell_mass_healing(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_mass_invis	magic.c	/^void spell_mass_invis( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mephistons_scrutiny	magic2.c	/^void spell_mephistons_scrutiny(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_meteor_swarm	magic2.c	/^void spell_meteor_swarm( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_mimic	magic2.c	/^void spell_mimic( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_minor_group_heal	magic2.c	/^void spell_minor_group_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mirror_image	magic2.c	/^void spell_mirror_image( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_monsoon	fight.c	/^DECLARE_SPELL_FUN( spell_monsoon        );$/;"	v
spell_monsoon	magic2.c	/^void spell_monsoon( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_necrosis	magic2.c	/^void spell_necrosis ( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_nexus	magic2.c	/^void spell_nexus( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_null	magic.c	/^void spell_null( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_obj_cost	db.c	/^int spell_obj_cost( int level, int base_cost )$/;"	f
spell_pacify	magic2.c	/^void spell_pacify(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_pass_door	magic.c	/^void spell_pass_door( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_pass_without_trace	magic2.c	/^void spell_pass_without_trace( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_plague	magic.c	/^void spell_plague( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_poison	magic.c	/^void spell_poison( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_portal	magic2.c	/^void spell_portal( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_prayer	magic2.c	/^void spell_prayer(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_protection_evil	magic.c	/^void spell_protection_evil(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_protection_good	magic.c	/^void spell_protection_good(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_protection_magic	magic2.c	/^void spell_protection_magic(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_quirkys_insanity	magic2.c	/^void spell_quirkys_insanity(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_ray_of_truth	magic.c	/^void spell_ray_of_truth (int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_recharge	magic.c	/^void spell_recharge( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_reflection	magic2.c	/^void spell_reflection( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_refresh	magic.c	/^void spell_refresh( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_remove_curse	magic.c	/^void spell_remove_curse( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_renewal	magic2.c	/^void spell_renewal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_restoration	magic2.c	/^void spell_restoration ( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_rimbols_invocation	magic2.c	/^void spell_rimbols_invocation(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_ritual_sacrifice	magic2.c	/^void spell_ritual_sacrifice ( int sn, int level, CHAR_DATA *ch, void *vo ,int target)$/;"	f
spell_sanctuary	magic.c	/^void spell_sanctuary( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_shield	magic.c	/^void spell_shield( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_shocking_grasp	magic.c	/^void spell_shocking_grasp(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_sivas_sacrifice	magic2.c	/^void spell_sivas_sacrifice( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_sleep	magic.c	/^void spell_sleep( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_slow	magic.c	/^void spell_slow( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_smotes_anachronism	magic2.c	/^void spell_smotes_anachronism( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_soreness	magic2.c	/^void spell_soreness( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_sticks_to_snakes	magic2.c	/^void spell_sticks_to_snakes( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_stone_skin	magic.c	/^void spell_stone_skin( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_stop	magic2.c	/^void spell_stop(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_summon	magic.c	/^void spell_summon( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_target_names	tables.c	/^const char* spell_target_names[] =$/;"	v
spell_teleport	magic.c	/^void spell_teleport( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_tomb_rot	magic2.c	/^void spell_tomb_rot( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_tomb_stench	breath.c	/^void spell_tomb_stench(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_tree_golem	magic2.c	/^void spell_tree_golem( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_turn_undead	magic2.c	/^void spell_turn_undead( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_ventriloquate	magic.c	/^void spell_ventriloquate( int sn, int level, CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_weaken	magic.c	/^void spell_weaken( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_windwar	fight.c	/^DECLARE_SPELL_FUN( spell_windwar        );$/;"	v
spell_windwar	magic2.c	/^void spell_windwar( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_word_of_recall	magic.c	/^void spell_word_of_recall( int sn, int level, CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_zombie_breath	breath.c	/^void spell_zombie_breath( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_zone_of_damnation	breath.c	/^void spell_zone_of_damnation( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
split_attack	fight2.c	/^void split_attack ( CHAR_DATA *ch, int dt )$/;"	f
stance	aclone.c	/^    sh_int      stance;$/;"	m	struct:mob_index_data	file:
stance_after_hit	fight.c	/^void stance_after_hit( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield )$/;"	f
stance_cost	fight.c	/^int stance_cost( CHAR_DATA *ch, int stance )$/;"	f
stance_hit	fight.c	/^void stance_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt )$/;"	f
stance_lookup	lookup.c	/^int stance_lookup(const char *name)$/;"	f
stances	tables.c	/^const struct stance_type stances [] =$/;"	v
start_pos	aclone.c	/^	sh_int      start_pos;$/;"	m	struct:mob_index_data	file:
stat	bit.c	/^    bool stat;$/;"	m	struct:flag_stat_type	file:
stat	grep.c	/^    sh_int stat;$/;"	m	struct:grep_data	file:
stat_gain	stats.c	/^int stat_gain(CHAR_DATA *ch, int stat)$/;"	f
stat_lookup	stats.c	/^int stat_lookup(char *stat)$/;"	f
stat_table	tables.c	/^const struct stat_type stat_table[] =$/;"	v
stop_attack	fight.c	/^bool stop_attack( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
stop_fighting	fight.c	/^void stop_fighting( CHAR_DATA *ch, bool fBoth )$/;"	f
stop_follower	act_comm.c	/^void stop_follower( CHAR_DATA *ch )$/;"	f
stop_hunting	hunt.c	/^void stop_hunting(CHAR_DATA *ch)$/;"	f
stop_idling	comm.c	/^void stop_idling( CHAR_DATA *ch )$/;"	f
stop_singing	song.c	/^void stop_singing( CHAR_DATA *ch )$/;"	f
strArea	db.c	/^char            strArea[MAX_INPUT_LENGTH];$/;"	v
str_app_carry	stats.c	/^int str_app_carry(int x)$/;"	f
str_app_todam	stats.c	/^int str_app_todam(int x)$/;"	f
str_app_wield	stats.c	/^int str_app_wield(int x)$/;"	f
str_boot_time	comm.c	/^char            str_boot_time[MAX_INPUT_LENGTH];$/;"	v
str_cmp	db.c	/^bool str_cmp( const char *astr, const char *bstr )$/;"	f
str_dup	db.c	/^char *str_dup( const char *str )$/;"	f
str_empty	db.c	/^char    str_empty   [1];$/;"	v
str_infix	db.c	/^bool str_infix( const char *astr, const char *bstr )$/;"	f
str_prefix	db.c	/^bool str_prefix( const char *astr, const char *bstr )$/;"	f
str_suffix	db.c	/^bool str_suffix( const char *astr, const char *bstr )$/;"	f
str_value	grep.c	/^    char str_value[MIL];$/;"	m	struct:grep_data	file:
strength	smith.c	/^	int	strength;$/;"	m	struct:blacksmith_material_type	file:
string_add	string.c	/^void string_add( CHAR_DATA *ch, char *argument )$/;"	f
string_append	string.c	/^void string_append( CHAR_DATA *ch, char **pString )$/;"	f
string_edit	string.c	/^void string_edit( CHAR_DATA *ch, char **pString )$/;"	f
string_hash	db.c	/^char *              string_hash     [MAX_KEY_HASH];$/;"	v
string_lineadd	string.c	/^char *string_lineadd( char *string, char *newstr, int line )$/;"	f
string_linedel	string.c	/^char *string_linedel( char *string, int line )$/;"	f
string_proper	string.c	/^char * string_proper( char * argument )$/;"	f
string_replace	string.c	/^char * string_replace( char * orig, char * old, char * new )$/;"	f
string_replace_ext	string.c	/^char * string_replace_ext( char * orig, char * old, char * new, $/;"	f
string_space	db.c	/^char *  string_space;$/;"	v
string_unpad	string.c	/^char * string_unpad( char * argument )$/;"	f
strlen_color	string.c	/^int strlen_color( char *argument )$/;"	f
structure	bit.c	/^    const struct flag_type *structure;$/;"	m	struct:flag_stat_type	file:
structure	olc_act.c	/^    const void *structure;$/;"	m	struct:olc_help_type	file:
substitute_alias	alias.c	/^void substitute_alias(DESCRIPTOR_DATA *d, char *argument)$/;"	f
szFinishPrompt	board.c	/^const char * szFinishPrompt = "({+C{x)ontinue, ({+V{x)iew, ({+P{x)ost or ({+F{x)orget it?";$/;"	v
table_size	hunt.c	/^    int           table_size;$/;"	m	struct:hash_header	file:
tail_chain	db.c	/^void tail_chain( void )$/;"	f
take_class_defaults	nanny.c	/^void take_class_defaults(DESCRIPTOR_DATA *d)$/;"	f
take_default_stats	stats.c	/^void take_default_stats(CHAR_DATA *ch)$/;"	f
take_default_weapon	nanny.c	/^void take_default_weapon(DESCRIPTOR_DATA *d)$/;"	f
take_rom_basics	nanny.c	/^void take_rom_basics(DESCRIPTOR_DATA *d)$/;"	f
target_name	magic.c	/^char *target_name = NULL;$/;"	v
tattoo_affect	tattoo.c	/^AFFECT_DATA* tattoo_affect( AFFECT_DATA *aff, int level, bool basic )$/;"	f
tattoo_bonus_ID	tattoo.c	/^int tattoo_bonus_ID( CHAR_DATA *ch, int loc )$/;"	f
tattoo_cost	tattoo.c	/^int tattoo_cost( int ID )$/;"	f
tattoo_data	tattoo.c	/^struct tattoo_data$/;"	s	file:
tattoo_data_list	tattoo.c	/^static const TATTOO_DATA tattoo_data_list[MAX_TATTOO] =$/;"	v	file:
tattoo_desc	tattoo.c	/^char* tattoo_desc( int ID )$/;"	f
tattoo_id	tattoo.c	/^int tattoo_id( char *name )$/;"	f
tattoo_modify_ID	tattoo.c	/^void tattoo_modify_ID( CHAR_DATA *ch, int ID, int level,$/;"	f
tattoo_modify_equip	tattoo.c	/^void tattoo_modify_equip( CHAR_DATA *ch, int loc, bool fAdd, bool basic )$/;"	f
tattoo_modify_level	tattoo.c	/^void tattoo_modify_level( CHAR_DATA *ch, int old_level, int new_level )$/;"	f
tattoo_modify_reset	tattoo.c	/^void tattoo_modify_reset( CHAR_DATA *ch )$/;"	f
tattoo_name	tattoo.c	/^char* tattoo_name( int ID )$/;"	f
tattoo_obj	tattoo.c	/^OBJ_INDEX_DATA* tattoo_obj( int ID )$/;"	f
tattoo_wear	tattoo.c	/^static const bool tattoo_wear[MAX_WEAR] =$/;"	v	file:
tell_char	act_comm.c	/^void tell_char( CHAR_DATA *ch, CHAR_DATA *victim, char *argument )$/;"	f
theKeys	comm.c	/^static  long            theKeys [4];$/;"	v	file:
time_format	remort.c	/^char *time_format(time_t t, char *b)$/;"	f
time_info	db.c	/^TIME_INFO_DATA  time_info;$/;"	v
timeval	comm.c	/^struct  timeval$/;"	s	file:
title_table	const.c	/^char *  const           title_table [MAX_CLASS][23] =$/;"	v
to_bit_name	handler.c	/^char* to_bit_name( int where, int flag )$/;"	f
top_affect	db.c	/^int  top_affect;$/;"	v
top_area	db.c	/^int  top_area;$/;"	v
top_ed	db.c	/^int  top_ed;$/;"	v
top_exit	db.c	/^int  top_exit;$/;"	v
top_help	db.c	/^int  top_help;$/;"	v
top_jail_room	db.c	/^int  top_jail_room = -1;$/;"	v
top_mob_index	db.c	/^int  top_mob_index;$/;"	v
top_mprog_index	db.c	/^int  top_mprog_index;    \/* OLC *\/$/;"	v
top_obj_index	db.c	/^int  top_obj_index;$/;"	v
top_reset	db.c	/^int  top_reset;$/;"	v
top_room	db.c	/^int  top_room;$/;"	v
top_shop	db.c	/^int  top_shop;$/;"	v
top_string	db.c	/^char *  top_string;$/;"	v
top_vnum_mob	db.c	/^int  top_vnum_mob;       \/* OLC *\/$/;"	v
top_vnum_obj	db.c	/^int  top_vnum_obj;       \/* OLC *\/$/;"	v
top_vnum_room	db.c	/^int  top_vnum_room;      \/* OLC *\/$/;"	v
train_stat	stats.c	/^bool train_stat(int trained, CHAR_DATA *ch)$/;"	f
train_stat_inc	stats.c	/^int train_stat_inc( CHAR_DATA *ch, int stat )$/;"	f
trap_damage	act_move.c	/^void trap_damage( CHAR_DATA *ch, bool can_behead )$/;"	f
tv_sec	comm.c	/^	time_t  tv_sec;$/;"	m	struct:timeval	file:
tv_usec	comm.c	/^	time_t  tv_usec;$/;"	m	struct:timeval	file:
two	smith.c	/^	bool two;$/;"	m	struct:armor_smith_type	file:
type	smith.c	/^	int type;$/;"	m	struct:armor_smith_type	file:
type	smith.c	/^	int type;$/;"	m	struct:weapon_smith_type	file:
type_flags	tables.c	/^const struct flag_type type_flags[] =$/;"	v
unequip_char	handler.c	/^void unequip_char( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
unlink_note	board.c	/^static void unlink_note (BOARD_DATA *board, NOTE_DATA *note)$/;"	f	file:
unlink_pfile	simsave.c	/^int unlink_pfile( char *filename )$/;"	f
unread_notes	board.c	/^int unread_notes (CHAR_DATA *ch, BOARD_DATA *board)$/;"	f
update_bounty	update.c	/^void update_bounty(CHAR_DATA *ch)$/;"	f
update_field	update.c	/^void update_field( CHAR_DATA *ch)$/;"	f
update_fighting	update.c	/^void update_fighting( void )$/;"	f
update_flags	stats.c	/^void update_flags( CHAR_DATA *ch )$/;"	f
update_handler	update.c	/^void update_handler( void )$/;"	f
update_herb_reset	alchemy.c	/^void update_herb_reset()$/;"	f
update_memory	hunt.c	/^void update_memory(CHAR_DATA *ch)$/;"	f
update_mprog_flags	olc_act.c	/^void update_mprog_flags( MOB_INDEX_DATA *pMob )$/;"	f
update_perm_hp_mana_move	stats.c	/^void update_perm_hp_mana_move(CHAR_DATA *ch)$/;"	f
update_pos	fight.c	/^void update_pos( CHAR_DATA *victim )$/;"	f
update_relic_bonus	religion.c	/^void update_relic_bonus()$/;"	f
update_room_fighting	update.c	/^void update_room_fighting( ROOM_INDEX_DATA *room )$/;"	f
update_song	song.c	/^void update_song( CHAR_DATA *ch )$/;"	f
update_who_position	nanny.c	/^void update_who_position( DESCRIPTOR_DATA *d )$/;"	f
update_wizlist	wizlist.c	/^void update_wizlist(CHAR_DATA *ch, int level)$/;"	f
value	grep.c	/^    int value;$/;"	m	struct:grep_data	file:
varieties	smith.c	/^	struct armor_subtype varieties[MAX_ARMOR_SUBTYPES];$/;"	m	struct:armor_smith_type	file:
varieties	smith.c	/^	struct weapon_subtype varieties[MAX_WEAPON_SUBTYPES];$/;"	m	struct:weapon_smith_type	file:
victim	hunt.c	/^    struct char_data  **victim;$/;"	m	struct:hunting_data	file:
violence_update	fight.c	/^void violence_update( void )$/;"	f
visited	hunt.c	/^    int   visited;$/;"	m	struct:nodes	file:
vnum	alchemy.c	/^    int vnum;$/;"	m	struct:herb_type	file:
vnum	quest.c	/^    int vnum;$/;"	m	struct:quest_item	file:
vnum	remort.c	/^    int vnum;$/;"	m	struct:remort_chamber	file:
vnum	tattoo.c	/^    int vnum;$/;"	m	struct:tattoo_data	file:
vnum_shift	aclone.c	/^static int vnum_shift = 0;$/;"	v	file:
vnum_shift	vshift.c	/^static int vnum_shift = 0;$/;"	v	file:
vuln_flags	aclone.c	/^	tflag        vuln_flags;$/;"	m	struct:mob_index_data	file:
vuln_flags	tables.c	/^const struct flag_type vuln_flags[] =$/;"	v
wait_for_auth	db.c	/^bool            wait_for_auth = AUTH_STATUS_ENABLED;$/;"	v
wait_list	remort.c	/^REMORT_TABLE *wait_list;$/;"	v
wants_to_rescue	fight.c	/^bool wants_to_rescue( CHAR_DATA *ch )$/;"	f
war	warfare.c	/^WAR_DATA war;$/;"	v
war_end	warfare.c	/^void war_end( bool success )$/;"	f
war_list	warfare.c	/^char * war_list[] =$/;"	v
war_remove	warfare.c	/^void war_remove( CHAR_DATA *ch, bool killed )$/;"	f
war_status_name	religion.c	/^char* war_status_name( int status )$/;"	f
war_update	warfare.c	/^void war_update( void )$/;"	f
warfare	warfare.c	/^void warfare( char *argument )$/;"	f
was_obj_cast	magic.c	/^bool was_obj_cast = FALSE;$/;"	v
weak_effect	breath.c	/^void weak_effect( void *vo, int level, int dam, int target )$/;"	f
wealth	aclone.c	/^	long        wealth;$/;"	m	struct:mob_index_data	file:
weapon	smith.c	/^	int weapon;$/;"	m	struct:workmanship_type	file:
weapon_base_damage	const.c	/^const int weapon_base_damage[] =$/;"	v
weapon_bit_name	handler.c	/^char* weapon_bit_name( int flag )$/;"	f
weapon_bits_name	handler.c	/^char* weapon_bits_name( long flag )$/;"	f
weapon_class	tables.c	/^const struct flag_type weapon_class[] =$/;"	v
weapon_flag_hit	fight.c	/^void weapon_flag_hit( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield )$/;"	f
weapon_lookup	handler.c	/^int weapon_lookup (const char *name)$/;"	f
weapon_name	handler.c	/^char *weapon_name( int weapon_type)$/;"	f
weapon_smith_table	smith.c	/^const struct weapon_smith_type weapon_smith_table[]=$/;"	v
weapon_smith_type	smith.c	/^struct weapon_smith_type$/;"	s	file:
weapon_subtype	smith.c	/^struct weapon_subtype$/;"	s	file:
weapon_table	const.c	/^const   struct  weapon_type weapon_table    []  =$/;"	v
weapon_type	handler.c	/^int weapon_type (const char *name)$/;"	f
weapon_type2	tables.c	/^const struct flag_type weapon_type2[] =$/;"	v
wear_bit	olc_act.c	/^    int	wear_bit;$/;"	m	struct:wear_type	file:
wear_bit	olc_act.c	/^int wear_bit(int loc)$/;"	f
wear_bit_name	handler.c	/^char* wear_bit_name( int flag )$/;"	f
wear_bits	redit-ilab.c	/^	int wear_bits; \/* the ITEM_ bit set in the item *\/$/;"	m	struct:wear_location	file:
wear_bits_name	handler.c	/^char* wear_bits_name( tflag flag )$/;"	f
wear_flags	tables.c	/^const struct flag_type wear_flags[] =$/;"	v
wear_loc	olc_act.c	/^    int	wear_loc;$/;"	m	struct:wear_type	file:
wear_loc	olc_act.c	/^int wear_loc(int bits, int count)$/;"	f
wear_loc1	redit-ilab.c	/^	int wear_loc1; \/* where is this worn *\/$/;"	m	struct:wear_location	file:
wear_loc2	redit-ilab.c	/^	int wear_loc2; \/* WEAR_NONE or secondary location (i.e. left ring-finger) *\/$/;"	m	struct:wear_location	file:
wear_loc_flags	tables.c	/^const struct flag_type wear_loc_flags[] =$/;"	v
wear_loc_strings	tables.c	/^const struct flag_type wear_loc_strings[] =$/;"	v
wear_location	redit-ilab.c	/^struct wear_location$/;"	s	file:
wear_locations	redit-ilab.c	/^const struct wear_location wear_locations [] =$/;"	v
wear_obj	act_obj.c	/^void wear_obj( CHAR_DATA *ch, OBJ_DATA *obj, bool fReplace )$/;"	f
wear_table	olc_act.c	/^const struct wear_type wear_table[] =$/;"	v
wear_type	olc_act.c	/^struct wear_type$/;"	s	file:
weather_info	db.c	/^WEATHER_DATA    weather_info;$/;"	v
weather_update	update.c	/^void weather_update( void )$/;"	f
weight	smith.c	/^	int	weight;$/;"	m	struct:blacksmith_material_type	file:
weight	smith.c	/^int weight(OBJ_DATA *obj)$/;"	f
where_name	act_info.c	/^char *  const   where_name  [] =$/;"	v
who_data_free	recycle.c	/^WHO_DATA *who_data_free;$/;"	v
who_list	comm.c	/^WHO_DATA	*   who_list;	\/* All players connected, sorted by level *\/$/;"	v
who_show_char	act_info.c	/^void who_show_char( CHAR_DATA *ch, CHAR_DATA *wch, BUFFER *output )$/;"	f
wis_app_field	stats.c	/^int wis_app_field(int x)$/;"	f
wiz_free	recycle.c	/^WIZ_DATA *wiz_free;$/;"	v
wiz_list	wizlist.c	/^WIZ_DATA *wiz_list;$/;"	v
wiz_titles	wizlist.c	/^char *	const	wiz_titles	[] =$/;"	v
wizlock	comm.c	/^bool            wizlock;        \/* Game is wizlocked        *\/$/;"	v
wiznet	act_wiz.c	/^void wiznet(char *string, CHAR_DATA *ch, OBJ_DATA *obj,$/;"	f
wiznet_lookup	handler.c	/^long wiznet_lookup (const char *name)$/;"	f
wiznet_table	const.c	/^const   struct wiznet_type      wiznet_table    []              =$/;"	v
workmanship_table	smith.c	/^\/*const*\/ struct workmanship_type workmanship_table[]=$/;"	v
workmanship_type	smith.c	/^struct workmanship_type$/;"	s	file:
write_auth_file	auth.c	/^void write_auth_file( FILE *fpout, AUTH_LIST *list )$/;"	f
write_buffer_to_file	buffer_util.c	/^bool write_buffer_to_file( DBUFFER *buf, FILE *fp )$/;"	f
write_last_command	comm.c	/^void write_last_command ()$/;"	f
write_to_buffer	comm.c	/^void write_to_buffer( DESCRIPTOR_DATA *d, const char *txt, int length )$/;"	f
write_to_descriptor	comm.c	/^bool write_to_descriptor( int desc, char *txt, int length )$/;"	f
xp_compute	fight.c	/^int xp_compute( CHAR_DATA *gch, CHAR_DATA *victim, int gain_align )$/;"	f

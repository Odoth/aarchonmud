!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
A	merc.h	1136;"	d
AAS	alchemy.c	26;"	d	file:
ABS	merc.h	3763;"	d
ACCEPTED	protocol.h	71;"	d
ACHIEVEMENT	merc.h	/^typedef struct  achievement_entry ACHIEVEMENT;$/;"	t	typeref:struct:achievement_entry
ACHIEVE_AGE_1	merc.h	3678;"	d
ACHIEVE_AGE_2	merc.h	3679;"	d
ACHIEVE_AGE_3	merc.h	3680;"	d
ACHIEVE_AGE_4	merc.h	3681;"	d
ACHIEVE_AGE_5	merc.h	3682;"	d
ACHIEVE_BEHEADS_1	merc.h	3665;"	d
ACHIEVE_BEHEADS_2	merc.h	3666;"	d
ACHIEVE_BEHEADS_3	merc.h	3667;"	d
ACHIEVE_BEHEADS_4	merc.h	3668;"	d
ACHIEVE_BEHEADS_5	merc.h	3669;"	d
ACHIEVE_BEHEADS_6	merc.h	3670;"	d
ACHIEVE_BEHEADS_7	merc.h	3671;"	d
ACHIEVE_BEHEADS_8	merc.h	3672;"	d
ACHIEVE_EXPLORED_1	merc.h	3703;"	d
ACHIEVE_EXPLORED_2	merc.h	3704;"	d
ACHIEVE_EXPLORED_3	merc.h	3705;"	d
ACHIEVE_EXPLORED_4	merc.h	3706;"	d
ACHIEVE_EXPLORED_5	merc.h	3707;"	d
ACHIEVE_EXPLORED_6	merc.h	3708;"	d
ACHIEVE_EXPLORED_7	merc.h	3709;"	d
ACHIEVE_EXPLORED_8	merc.h	3710;"	d
ACHIEVE_GMSKILLS_1	merc.h	3716;"	d
ACHIEVE_GMSKILLS_2	merc.h	3717;"	d
ACHIEVE_GMSKILLS_3	merc.h	3718;"	d
ACHIEVE_GMSKILLS_4	merc.h	3719;"	d
ACHIEVE_GMSKILLS_5	merc.h	3720;"	d
ACHIEVE_LEVEL_1	merc.h	3603;"	d
ACHIEVE_LEVEL_10	merc.h	3612;"	d
ACHIEVE_LEVEL_11	merc.h	3613;"	d
ACHIEVE_LEVEL_12	merc.h	3614;"	d
ACHIEVE_LEVEL_13	merc.h	3615;"	d
ACHIEVE_LEVEL_14	merc.h	3616;"	d
ACHIEVE_LEVEL_15	merc.h	3617;"	d
ACHIEVE_LEVEL_2	merc.h	3604;"	d
ACHIEVE_LEVEL_3	merc.h	3605;"	d
ACHIEVE_LEVEL_4	merc.h	3606;"	d
ACHIEVE_LEVEL_5	merc.h	3607;"	d
ACHIEVE_LEVEL_6	merc.h	3608;"	d
ACHIEVE_LEVEL_7	merc.h	3609;"	d
ACHIEVE_LEVEL_8	merc.h	3610;"	d
ACHIEVE_LEVEL_9	merc.h	3611;"	d
ACHIEVE_MASKILLS_1	merc.h	3711;"	d
ACHIEVE_MASKILLS_2	merc.h	3712;"	d
ACHIEVE_MASKILLS_3	merc.h	3713;"	d
ACHIEVE_MASKILLS_4	merc.h	3714;"	d
ACHIEVE_MASKILLS_5	merc.h	3715;"	d
ACHIEVE_MAXHP_1	merc.h	3686;"	d
ACHIEVE_MAXHP_2	merc.h	3687;"	d
ACHIEVE_MAXHP_3	merc.h	3688;"	d
ACHIEVE_MAXHP_4	merc.h	3690;"	d
ACHIEVE_MAXHP_5	merc.h	3689;"	d
ACHIEVE_MAXMN_1	merc.h	3694;"	d
ACHIEVE_MAXMN_2	merc.h	3695;"	d
ACHIEVE_MAXMN_3	merc.h	3696;"	d
ACHIEVE_MAXMN_4	merc.h	3697;"	d
ACHIEVE_MAXMN_5	merc.h	3698;"	d
ACHIEVE_MAXMV_1	merc.h	3699;"	d
ACHIEVE_MAXMV_2	merc.h	3700;"	d
ACHIEVE_MAXMV_3	merc.h	3701;"	d
ACHIEVE_MAXMV_4	merc.h	3702;"	d
ACHIEVE_MKILL_1	merc.h	3618;"	d
ACHIEVE_MKILL_10	merc.h	3627;"	d
ACHIEVE_MKILL_11	merc.h	3628;"	d
ACHIEVE_MKILL_2	merc.h	3619;"	d
ACHIEVE_MKILL_3	merc.h	3620;"	d
ACHIEVE_MKILL_4	merc.h	3621;"	d
ACHIEVE_MKILL_5	merc.h	3622;"	d
ACHIEVE_MKILL_6	merc.h	3623;"	d
ACHIEVE_MKILL_7	merc.h	3624;"	d
ACHIEVE_MKILL_8	merc.h	3625;"	d
ACHIEVE_MKILL_9	merc.h	3626;"	d
ACHIEVE_PKILLS_1	merc.h	3673;"	d
ACHIEVE_PKILLS_2	merc.h	3674;"	d
ACHIEVE_PKILLS_3	merc.h	3675;"	d
ACHIEVE_PKILLS_4	merc.h	3676;"	d
ACHIEVE_PKILLS_5	merc.h	3677;"	d
ACHIEVE_QCOMP_1	merc.h	3639;"	d
ACHIEVE_QCOMP_10	merc.h	3648;"	d
ACHIEVE_QCOMP_2	merc.h	3640;"	d
ACHIEVE_QCOMP_3	merc.h	3641;"	d
ACHIEVE_QCOMP_4	merc.h	3642;"	d
ACHIEVE_QCOMP_5	merc.h	3643;"	d
ACHIEVE_QCOMP_6	merc.h	3644;"	d
ACHIEVE_QCOMP_7	merc.h	3645;"	d
ACHIEVE_QCOMP_8	merc.h	3646;"	d
ACHIEVE_QCOMP_9	merc.h	3647;"	d
ACHIEVE_QHCOMP_1	merc.h	3726;"	d
ACHIEVE_QHCOMP_2	merc.h	3727;"	d
ACHIEVE_QHCOMP_3	merc.h	3728;"	d
ACHIEVE_QHCOMP_4	merc.h	3729;"	d
ACHIEVE_QHCOMP_5	merc.h	3730;"	d
ACHIEVE_QHCOMP_6	merc.h	3731;"	d
ACHIEVE_REMORT_1	merc.h	3629;"	d
ACHIEVE_REMORT_10	merc.h	3638;"	d
ACHIEVE_REMORT_2	merc.h	3630;"	d
ACHIEVE_REMORT_3	merc.h	3631;"	d
ACHIEVE_REMORT_4	merc.h	3632;"	d
ACHIEVE_REMORT_5	merc.h	3633;"	d
ACHIEVE_REMORT_6	merc.h	3634;"	d
ACHIEVE_REMORT_7	merc.h	3635;"	d
ACHIEVE_REMORT_8	merc.h	3636;"	d
ACHIEVE_REMORT_9	merc.h	3637;"	d
ACHIEVE_RETRAINED_1	merc.h	3721;"	d
ACHIEVE_RETRAINED_2	merc.h	3722;"	d
ACHIEVE_RETRAINED_3	merc.h	3723;"	d
ACHIEVE_RETRAINED_4	merc.h	3724;"	d
ACHIEVE_RETRAINED_5	merc.h	3725;"	d
ACHIEVE_TATT_1	merc.h	3683;"	d
ACHIEVE_TATT_2	merc.h	3684;"	d
ACHIEVE_TATT_3	merc.h	3685;"	d
ACHIEVE_WARKILLS_1	merc.h	3649;"	d
ACHIEVE_WARKILLS_2	merc.h	3650;"	d
ACHIEVE_WARKILLS_3	merc.h	3651;"	d
ACHIEVE_WARKILLS_4	merc.h	3652;"	d
ACHIEVE_WARKILLS_5	merc.h	3653;"	d
ACHIEVE_WARKILLS_6	merc.h	3654;"	d
ACHIEVE_WARKILLS_7	merc.h	3655;"	d
ACHIEVE_WARKILLS_8	merc.h	3656;"	d
ACHIEVE_WARWINS_1	merc.h	3657;"	d
ACHIEVE_WARWINS_2	merc.h	3658;"	d
ACHIEVE_WARWINS_3	merc.h	3659;"	d
ACHIEVE_WARWINS_4	merc.h	3660;"	d
ACHIEVE_WARWINS_5	merc.h	3661;"	d
ACHIEVE_WARWINS_6	merc.h	3662;"	d
ACHIEVE_WARWINS_7	merc.h	3663;"	d
ACHIEVE_WARWINS_8	merc.h	3664;"	d
ACHV_AGE	merc.h	3591;"	d
ACHV_BEHEAD	merc.h	3589;"	d
ACHV_EXPLORED	merc.h	3595;"	d
ACHV_GMSKILLS	merc.h	3598;"	d
ACHV_LEVEL	merc.h	3583;"	d
ACHV_MASKILLS	merc.h	3597;"	d
ACHV_MAXHP	merc.h	3592;"	d
ACHV_MAXMN	merc.h	3593;"	d
ACHV_MAXMV	merc.h	3594;"	d
ACHV_MKILL	merc.h	3584;"	d
ACHV_NONE	merc.h	3582;"	d
ACHV_PKILL	merc.h	3590;"	d
ACHV_QCOMP	merc.h	3586;"	d
ACHV_QHCOMP	merc.h	3600;"	d
ACHV_REMORT	merc.h	3585;"	d
ACHV_RETRAINED	merc.h	3599;"	d
ACHV_WKILL	merc.h	3587;"	d
ACHV_WWIN	merc.h	3588;"	d
ACT_AGGRESSIVE	merc.h	1277;"	d
ACT_ARG_CHARACTER	merc.h	4729;"	d
ACT_ARG_OBJ	merc.h	4727;"	d
ACT_ARG_TEXT	merc.h	4728;"	d
ACT_ARG_UNDEFINED	merc.h	4726;"	d
ACT_BANKER	merc.h	1295;"	d
ACT_CLERIC	merc.h	1288;"	d
ACT_GAIN	merc.h	1299;"	d
ACT_GUN	merc.h	1297;"	d
ACT_HARD_QUEST	merc.h	1308;"	d
ACT_IGNORE_SAFE	merc.h	1304;"	d
ACT_INDOORS	merc.h	1296;"	d
ACT_IS_CHANGER	merc.h	1301;"	d
ACT_IS_HEALER	merc.h	1298;"	d
ACT_IS_NPC	merc.h	1272;"	d
ACT_JUDGE	merc.h	1305;"	d
ACT_MAGE	merc.h	1289;"	d
ACT_NOALIGN	merc.h	1292;"	d
ACT_NOBEHEAD	merc.h	1310;"	d
ACT_NOEXP	merc.h	1306;"	d
ACT_NOMIMIC	merc.h	1307;"	d
ACT_NOPURGE	merc.h	1293;"	d
ACT_NOWEAPON	merc.h	1311;"	d
ACT_NO_QUEST	merc.h	1302;"	d
ACT_NO_TRACK	merc.h	1283;"	d
ACT_OBJ	merc.h	1276;"	d
ACT_OUTDOORS	merc.h	1294;"	d
ACT_PET	merc.h	1280;"	d
ACT_PRACTICE	merc.h	1282;"	d
ACT_SAFE	merc.h	1303;"	d
ACT_SCAVENGER	merc.h	1274;"	d
ACT_SEE_ALL	merc.h	1284;"	d
ACT_SENTINEL	merc.h	1273;"	d
ACT_SPELLUP	merc.h	1287;"	d
ACT_STAGGERED	merc.h	1309;"	d
ACT_STAY_AREA	merc.h	1278;"	d
ACT_THIEF	merc.h	1290;"	d
ACT_TRAIN	merc.h	1281;"	d
ACT_TRAVELLER	merc.h	1312;"	d
ACT_TRIGGER_ALWAYS	merc.h	1285;"	d
ACT_UNDEAD	merc.h	1286;"	d
ACT_UPDATE_ALWAYS	merc.h	1300;"	d
ACT_WARRIOR	merc.h	1291;"	d
ACT_WIMPY	merc.h	1279;"	d
ACT_WIZI	merc.h	1275;"	d
AC_BASH	merc.h	1620;"	d
AC_EXOTIC	merc.h	1622;"	d
AC_PIERCE	merc.h	1619;"	d
AC_SLASH	merc.h	1621;"	d
AD	recycle.h	95;"	d
AD	recycle.h	98;"	d
AEDIT	olc_act.c	/^AEDIT ( aedit_addaprog )$/;"	f
AEDIT	olc_act.c	/^AEDIT ( aedit_delaprog )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_age )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_builder )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_clone )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_create )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_credits )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_file )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_lvnum )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_maxlevel )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_miniquests )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_minlevel )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_move )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_name )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_notes)$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_purge )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_remort )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_reset )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_reset_time )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_scrap )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_security )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_show )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_uvnum )$/;"	f
AEDIT	olc_act.c	/^AEDIT( aedit_vnum )$/;"	f
AEDIT	olc_act.c	87;"	d	file:
AFFECT_DATA	merc.h	/^typedef struct  affect_data      AFFECT_DATA;$/;"	t	typeref:struct:affect_data
AFFECT_get_bitvector	lua_arclib.c	/^static int AFFECT_get_bitvector ( lua_State *LS )$/;"	f	file:
AFFECT_get_detectlevel	lua_arclib.c	/^static int AFFECT_get_detectlevel ( lua_State *LS )$/;"	f	file:
AFFECT_get_duration	lua_arclib.c	/^static int AFFECT_get_duration ( lua_State *LS )$/;"	f	file:
AFFECT_get_level	lua_arclib.c	/^static int AFFECT_get_level ( lua_State *LS )$/;"	f	file:
AFFECT_get_location	lua_arclib.c	/^static int AFFECT_get_location ( lua_State *LS )$/;"	f	file:
AFFECT_get_modifier	lua_arclib.c	/^static int AFFECT_get_modifier ( lua_State *LS )$/;"	f	file:
AFFECT_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE AFFECT_get_table [] =$/;"	v	file:
AFFECT_get_tag	lua_arclib.c	/^static int AFFECT_get_tag ( lua_State *LS )$/;"	f	file:
AFFECT_get_type	lua_arclib.c	/^static int AFFECT_get_type ( lua_State *LS )$/;"	f	file:
AFFECT_get_where	lua_arclib.c	/^static int AFFECT_get_where ( lua_State *LS )$/;"	f	file:
AFFECT_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE AFFECT_method_table [] =$/;"	v	file:
AFFECT_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE AFFECT_set_table [] =$/;"	v	file:
AFFGET	lua_arclib.c	95;"	d	file:
AFF_ANIMATE_DEAD	merc.h	1567;"	d
AFF_ASTRAL	merc.h	1538;"	d
AFF_BATTLE_METER	merc.h	1557;"	d
AFF_BERSERK	merc.h	1553;"	d
AFF_BLIND	merc.h	1527;"	d
AFF_BREATHE_WATER	merc.h	1554;"	d
AFF_CALM	merc.h	1549;"	d
AFF_CHAOS_FADE	merc.h	1561;"	d
AFF_CHARM	merc.h	1545;"	d
AFF_CURSE	merc.h	1537;"	d
AFF_DARKNESS	merc.h	1576;"	d
AFF_DARK_VISION	merc.h	1552;"	d
AFF_DEATHS_DOOR	merc.h	1578;"	d
AFF_DETECT_ASTRAL	merc.h	1559;"	d
AFF_DETECT_EVIL	merc.h	1529;"	d
AFF_DETECT_GOOD	merc.h	1533;"	d
AFF_DETECT_HIDDEN	merc.h	1532;"	d
AFF_DETECT_INVIS	merc.h	1530;"	d
AFF_DETECT_MAGIC	merc.h	1531;"	d
AFF_ELEMENTAL_SHIELD	merc.h	1568;"	d
AFF_ENTANGLE	merc.h	1572;"	d
AFF_FADE	merc.h	1535;"	d
AFF_FAERIE_FIRE	merc.h	1570;"	d
AFF_FEAR	merc.h	1558;"	d
AFF_FEEBLEMIND	merc.h	1562;"	d
AFF_FERVENT_RAGE	merc.h	1595;"	d
AFF_FERVENT_RAGE_COOLDOWN	merc.h	1596;"	d
AFF_FLEE	merc.h	1587;"	d
AFF_FLYING	merc.h	1546;"	d
AFF_FORTUNE	merc.h	1603;"	d
AFF_GIANT_STRENGTH	merc.h	1590;"	d
AFF_GUARD	merc.h	1564;"	d
AFF_HALLOW	merc.h	1600;"	d
AFF_HASTE	merc.h	1548;"	d
AFF_HAUNTED	merc.h	1584;"	d
AFF_HEAL	merc.h	1588;"	d
AFF_HEROISM	merc.h	1579;"	d
AFF_HIDE	merc.h	1543;"	d
AFF_INFECTIOUS_ARROW	merc.h	1594;"	d
AFF_INFRARED	merc.h	1536;"	d
AFF_INSANE	merc.h	1573;"	d
AFF_INVISIBLE	merc.h	1528;"	d
AFF_IRON_MAIDEN	merc.h	1586;"	d
AFF_LAUGH	merc.h	1574;"	d
AFF_LEARN	merc.h	1583;"	d
AFF_MANA_BURN	merc.h	1585;"	d
AFF_MANTRA	merc.h	1582;"	d
AFF_MINOR_FADE	merc.h	1601;"	d
AFF_NECROSIS	merc.h	1566;"	d
AFF_NONE	merc.h	1526;"	d
AFF_NO_TRACE	merc.h	1571;"	d
AFF_OVERCHARGE	merc.h	1589;"	d
AFF_PARALYSIS	merc.h	1593;"	d
AFF_PAROXYSM	merc.h	1597;"	d
AFF_PAROXYSM_COOLDOWN	merc.h	1598;"	d
AFF_PASS_DOOR	merc.h	1547;"	d
AFF_PETRIFIED	merc.h	1606;"	d
AFF_PHASE	merc.h	1591;"	d
AFF_PLAGUE	merc.h	1550;"	d
AFF_POISON	merc.h	1539;"	d
AFF_PROTECT_EVIL	merc.h	1540;"	d
AFF_PROTECT_GOOD	merc.h	1541;"	d
AFF_PROTECT_MAGIC	merc.h	1569;"	d
AFF_REFLECTION	merc.h	1580;"	d
AFF_REGENERATION	merc.h	1555;"	d
AFF_REPLENISH	merc.h	1602;"	d
AFF_RITUAL	merc.h	1565;"	d
AFF_ROOTS	merc.h	1581;"	d
AFF_RUPTURE	merc.h	1599;"	d
AFF_SANCTUARY	merc.h	1534;"	d
AFF_SHELTER	merc.h	1560;"	d
AFF_SHIELD	merc.h	1604;"	d
AFF_SHROUD	merc.h	1592;"	d
AFF_SLEEP	merc.h	1544;"	d
AFF_SLOW	merc.h	1556;"	d
AFF_SNEAK	merc.h	1542;"	d
AFF_SORE	merc.h	1575;"	d
AFF_STONE_SKIN	merc.h	1605;"	d
AFF_TOMB_ROT	merc.h	1577;"	d
AFF_WEAKEN	merc.h	1551;"	d
AIM_FOOT	fight2.c	831;"	d	file:
AIM_HAND	fight2.c	830;"	d	file:
AIM_HEAD	fight2.c	829;"	d	file:
AIM_NORMAL	fight2.c	828;"	d	file:
ALTER_COLOUR	act_comm.c	48;"	d	file:
ALT_FLAGVALUE_SET	olc_act.c	45;"	d	file:
ALT_FLAGVALUE_TOGGLE	olc_act.c	47;"	d	file:
AO	telnet.h	25;"	d
APEDIT	olc_apcode.c	/^APEDIT (apedit_create)$/;"	f
APEDIT	olc_apcode.c	/^APEDIT (apedit_delete)$/;"	f
APEDIT	olc_apcode.c	/^APEDIT(apedit_code)$/;"	f
APEDIT	olc_apcode.c	/^APEDIT(apedit_security)$/;"	f
APEDIT	olc_apcode.c	/^APEDIT(apedit_show)$/;"	f
APEDIT	olc_apcode.c	17;"	d	file:
APPLY_AC	merc.h	1930;"	d
APPLY_AGE	merc.h	1922;"	d
APPLY_AGI	merc.h	1941;"	d
APPLY_CHA	merc.h	1943;"	d
APPLY_CLASS	merc.h	1920;"	d
APPLY_CON	merc.h	1918;"	d
APPLY_DAMROLL	merc.h	1932;"	d
APPLY_DEX	merc.h	1915;"	d
APPLY_DIS	merc.h	1942;"	d
APPLY_EXP	merc.h	1929;"	d
APPLY_GOLD	merc.h	1928;"	d
APPLY_HEIGHT	merc.h	1923;"	d
APPLY_HIT	merc.h	1926;"	d
APPLY_HITROLL	merc.h	1931;"	d
APPLY_INT	merc.h	1916;"	d
APPLY_LEVEL	merc.h	1921;"	d
APPLY_LUC	merc.h	1944;"	d
APPLY_MANA	merc.h	1925;"	d
APPLY_MOVE	merc.h	1927;"	d
APPLY_NONE	merc.h	1913;"	d
APPLY_SAVES	merc.h	1933;"	d
APPLY_SAVING_BREATH	merc.h	1937;"	d
APPLY_SAVING_PARA	merc.h	1934;"	d
APPLY_SAVING_PETRI	merc.h	1936;"	d
APPLY_SAVING_ROD	merc.h	1935;"	d
APPLY_SAVING_SPELL	merc.h	1938;"	d
APPLY_SEX	merc.h	1919;"	d
APPLY_SKILLS	merc.h	1947;"	d
APPLY_SPELL_AFFECT	merc.h	1939;"	d
APPLY_STATS	merc.h	1945;"	d
APPLY_STR	merc.h	1914;"	d
APPLY_VIT	merc.h	1940;"	d
APPLY_WEIGHT	merc.h	1924;"	d
APPLY_WIS	merc.h	1917;"	d
ARCHON	merc.h	305;"	d
AREAGET	lua_arclib.c	64;"	d	file:
AREAMETH	lua_arclib.c	66;"	d	file:
AREASET	lua_arclib.c	65;"	d	file:
AREA_ARG	lua_scripting.c	76;"	d	file:
AREA_BACKUP_DIR	merc.h	4101;"	d
AREA_CHANGED	merc.h	4668;"	d
AREA_CLONE	merc.h	4672;"	d
AREA_DATA	merc.h	/^typedef struct  area_data        AREA_DATA;$/;"	t	typeref:struct:area_data
AREA_LIST	merc.h	4103;"	d
AREA_NOHIDE	merc.h	4675;"	d
AREA_NOQUEST	merc.h	4673;"	d
AREA_NOREPOP	merc.h	4674;"	d
AREA_REMORT	merc.h	4671;"	d
AREA_cancel	lua_arclib.c	/^static int AREA_cancel (lua_State *LS)$/;"	f	file:
AREA_delay	lua_arclib.c	/^static int AREA_delay (lua_State *LS)$/;"	f	file:
AREA_echo	lua_arclib.c	/^static int AREA_echo( lua_State *LS)$/;"	f	file:
AREA_flag	lua_arclib.c	/^static int AREA_flag( lua_State *LS)$/;"	f	file:
AREA_get_aprogs	lua_arclib.c	/^static int AREA_get_aprogs( lua_State *LS)$/;"	f	file:
AREA_get_atrigs	lua_arclib.c	/^static int AREA_get_atrigs ( lua_State *LS)$/;"	f	file:
AREA_get_builders	lua_arclib.c	/^static int AREA_get_builders ( lua_State *LS)$/;"	f	file:
AREA_get_credits	lua_arclib.c	/^static int AREA_get_credits ( lua_State *LS)$/;"	f	file:
AREA_get_filename	lua_arclib.c	/^static int AREA_get_filename( lua_State *LS)$/;"	f	file:
AREA_get_ingame	lua_arclib.c	/^static int AREA_get_ingame( lua_State *LS)$/;"	f	file:
AREA_get_maxlevel	lua_arclib.c	/^static int AREA_get_maxlevel( lua_State *LS)$/;"	f	file:
AREA_get_maxvnum	lua_arclib.c	/^static int AREA_get_maxvnum ( lua_State *LS)$/;"	f	file:
AREA_get_minlevel	lua_arclib.c	/^static int AREA_get_minlevel( lua_State *LS)$/;"	f	file:
AREA_get_minvnum	lua_arclib.c	/^static int AREA_get_minvnum ( lua_State *LS)$/;"	f	file:
AREA_get_mobprotos	lua_arclib.c	/^static int AREA_get_mobprotos( lua_State *LS)$/;"	f	file:
AREA_get_mobs	lua_arclib.c	/^static int AREA_get_mobs( lua_State *LS)$/;"	f	file:
AREA_get_mprogs	lua_arclib.c	/^static int AREA_get_mprogs( lua_State *LS)$/;"	f	file:
AREA_get_name	lua_arclib.c	/^static int AREA_get_name( lua_State *LS)$/;"	f	file:
AREA_get_nplayer	lua_arclib.c	/^static int AREA_get_nplayer( lua_State *LS)$/;"	f	file:
AREA_get_objprotos	lua_arclib.c	/^static int AREA_get_objprotos( lua_State *LS)$/;"	f	file:
AREA_get_oprogs	lua_arclib.c	/^static int AREA_get_oprogs( lua_State *LS)$/;"	f	file:
AREA_get_people	lua_arclib.c	/^static int AREA_get_people( lua_State *LS)$/;"	f	file:
AREA_get_players	lua_arclib.c	/^static int AREA_get_players( lua_State *LS)$/;"	f	file:
AREA_get_rooms	lua_arclib.c	/^static int AREA_get_rooms( lua_State *LS)$/;"	f	file:
AREA_get_rprogs	lua_arclib.c	/^static int AREA_get_rprogs( lua_State *LS)$/;"	f	file:
AREA_get_security	lua_arclib.c	/^static int AREA_get_security( lua_State *LS)$/;"	f	file:
AREA_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE AREA_get_table [] =$/;"	v	file:
AREA_get_vnum	lua_arclib.c	/^static int AREA_get_vnum ( lua_State *LS)$/;"	f	file:
AREA_loadfunction	lua_arclib.c	/^static int AREA_loadfunction( lua_State *LS)$/;"	f	file:
AREA_loadprog	lua_arclib.c	/^static int AREA_loadprog (lua_State *LS)$/;"	f	file:
AREA_loadscript	lua_arclib.c	/^static int AREA_loadscript (lua_State *LS)$/;"	f	file:
AREA_loadstring	lua_arclib.c	/^static int AREA_loadstring (lua_State *LS)$/;"	f	file:
AREA_loadtbl	lua_arclib.c	/^static int AREA_loadtbl (lua_State *LS)$/;"	f	file:
AREA_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE AREA_method_table [] =$/;"	v	file:
AREA_rvnum	lua_arclib.c	/^static int AREA_rvnum ( lua_State *LS)$/;"	f	file:
AREA_savetbl	lua_arclib.c	/^static int AREA_savetbl (lua_State *LS)$/;"	f	file:
AREA_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE AREA_set_table [] =$/;"	v	file:
AREA_tprint	lua_arclib.c	/^static int AREA_tprint ( lua_State *LS)$/;"	f	file:
ARMAGEDDON_WAR	warfare.h	38;"	d
ASSIST_ALIGN	merc.h	1361;"	d
ASSIST_ALL	merc.h	1360;"	d
ASSIST_GUARD	merc.h	1364;"	d
ASSIST_PLAYERS	merc.h	1363;"	d
ASSIST_RACE	merc.h	1362;"	d
ASSIST_VNUM	merc.h	1365;"	d
ATRIG_BOOT	merc.h	3175;"	d
ATRIG_CALL	merc.h	3181;"	d
ATRIG_COMMAND	merc.h	3183;"	d
ATRIG_ENTER	merc.h	3171;"	d
ATRIG_EXIT	merc.h	3172;"	d
ATRIG_QUIT	merc.h	3177;"	d
ATRIG_RECALL	merc.h	3180;"	d
ATRIG_RENTER	merc.h	3173;"	d
ATRIG_REXIT	merc.h	3174;"	d
ATRIG_SHUTDOWN	merc.h	3176;"	d
ATRIG_TIMER	merc.h	3182;"	d
ATRIG_UNVOID	merc.h	3179;"	d
ATRIG_VOID	merc.h	3178;"	d
AUTHOR	olc.h	27;"	d
AUTH_AUTHED	merc.h	/^   AUTH_AUTHED $/;"	e	enum:__anon3
AUTH_CHANGE_NAME	merc.h	/^   AUTH_CHANGE_NAME,$/;"	e	enum:__anon3
AUTH_DENIED	merc.h	/^   AUTH_DENIED, $/;"	e	enum:__anon3
AUTH_FILE	merc.h	4118;"	d
AUTH_LINK_DEAD	merc.h	/^   AUTH_LINK_DEAD, $/;"	e	enum:__anon3
AUTH_LIST	merc.h	/^typedef struct  auth_list        AUTH_LIST;$/;"	t	typeref:struct:auth_list
AUTH_OFFLINE	merc.h	/^   AUTH_OFFLINE, $/;"	e	enum:__anon3
AUTH_ONLINE	merc.h	/^   AUTH_ONLINE = 0, $/;"	e	enum:__anon3
AUTH_STATUS_DISABLED	merc.h	519;"	d
AUTH_STATUS_ENABLED	merc.h	520;"	d
AUTH_STATUS_IMM_ON	merc.h	521;"	d
AYT	telnet.h	24;"	d
AllocString	protocol.c	/^static char *AllocString( const char *apString )$/;"	f	file:
B	merc.h	1137;"	d
BAN_ALL	merc.h	374;"	d
BAN_DATA	merc.h	/^typedef struct  ban_data         BAN_DATA;$/;"	t	typeref:struct:ban_data
BAN_FILE	merc.h	4108;"	d
BAN_NEWBIES	merc.h	373;"	d
BAN_PERMANENT	merc.h	376;"	d
BAN_PERMIT	merc.h	375;"	d
BAN_PREFIX	merc.h	372;"	d
BAN_SUFFIX	merc.h	371;"	d
BASE_BUF	recycle.h	44;"	d
BD	recycle.h	58;"	d
BD	recycle.h	61;"	d
BEGIN_BLOCK	mob_prog.c	1134;"	d	file:
BIT_IN_RANGE	tflag.c	11;"	d	file:
BLACK	merc.h	361;"	d
BLINK	merc.h	350;"	d
BLUE	merc.h	357;"	d
BOARD_BUILDER	board.c	112;"	d	file:
BOARD_DATA	merc.h	/^typedef struct  board_data       BOARD_DATA;$/;"	t	typeref:struct:board_data
BOARD_NOACCESS	board.c	110;"	d	file:
BOARD_NONE	board.c	109;"	d	file:
BOARD_NOTFOUND	board.c	111;"	d	file:
BOARD_NOTFOUND	merc.h	983;"	d
BOARD_PKILL	board.c	113;"	d	file:
BOLD	merc.h	349;"	d
BOOLEAN_SET_TO	protocol.c	116;"	d	file:
BOX_DIR	merc.h	4127;"	d
BOX_LOG	merc.h	41;"	d
BOX_TEMP_DIR	merc.h	4128;"	d
BRANCH	makefile	/^BRANCH	:= \\""$(shell hg branch)"\\"$/;"	m
BREAK	telnet.h	27;"	d
BRIGHT	merc.h	364;"	d
BUFFER	merc.h	/^typedef struct  buf_type         BUFFER;$/;"	t	typeref:struct:buf_type
BUFFER_FREED	recycle.h	49;"	d
BUFFER_OVERFLOW	recycle.h	48;"	d
BUFFER_SAFE	recycle.h	47;"	d
BUFFER_UTIL_H	buffer_util.h	8;"	d
BUG_FILE	merc.h	4105;"	d
C	merc.h	1138;"	d
CAN_AUTH	merc.h	3814;"	d
CAN_WEAR	merc.h	3881;"	d
CC	makefile	/^CC      = gcc$/;"	m
CD	act_obj.c	51;"	d	file:
CD	act_obj.c	65;"	d	file:
CD	merc.h	4142;"	d
CD	merc.h	4648;"	d
CD	recycle.h	107;"	d
CD	recycle.h	114;"	d
CFG_BOOL	mudconfig.h	4;"	d
CFG_DATA_ENTRY	mudconfig.h	/^} CFG_DATA_ENTRY;$/;"	t	typeref:struct:config_data_entry
CFG_FLOAT	mudconfig.h	1;"	d
CFG_INT	mudconfig.h	2;"	d
CFG_STRING	mudconfig.h	3;"	d
CH	comm.c	2781;"	d	file:
CH1_ARG	lua_scripting.c	69;"	d	file:
CH2_ARG	lua_scripting.c	70;"	d	file:
CHANNEL	merc.h	/^} CHANNEL;$/;"	t	typeref:struct:channel_type
CHAN_CHECK	merc.h	/^typedef bool CHAN_CHECK args( ( CHAR_DATA *ch) );$/;"	t
CHAR_DATA	merc.h	/^typedef struct  char_data        CHAR_DATA;$/;"	t	typeref:struct:char_data
CHEAT_LIST	merc.h	4126;"	d
CHECK_POS	merc.h	3801;"	d
CHECK_RETURN	merc.h	3819;"	d
CHGET	lua_arclib.c	56;"	d	file:
CHGETSTAT	lua_arclib.c	3645;"	d	file:
CHK_ACT	mob_prog.c	98;"	d	file:
CHK_AFFECTED	mob_prog.c	97;"	d	file:
CHK_ALIGN	mob_prog.c	116;"	d	file:
CHK_CARRIES	mob_prog.c	101;"	d	file:
CHK_CCARRIES	mob_prog.c	142;"	d	file:
CHK_CLAN	mob_prog.c	107;"	d	file:
CHK_CLANRANK	mob_prog.c	124;"	d	file:
CHK_CLASS	mob_prog.c	109;"	d	file:
CHK_CLONES	mob_prog.c	80;"	d	file:
CHK_GRPSIZE	mob_prog.c	123;"	d	file:
CHK_HAS	mob_prog.c	103;"	d	file:
CHK_HASTARGET	mob_prog.c	94;"	d	file:
CHK_HOUR	mob_prog.c	82;"	d	file:
CHK_HPCNT	mob_prog.c	112;"	d	file:
CHK_IMM	mob_prog.c	100;"	d	file:
CHK_ISACTIVE	mob_prog.c	91;"	d	file:
CHK_ISCHARM	mob_prog.c	89;"	d	file:
CHK_ISDELAY	mob_prog.c	92;"	d	file:
CHK_ISEVIL	mob_prog.c	86;"	d	file:
CHK_ISFOLLOW	mob_prog.c	90;"	d	file:
CHK_ISGOOD	mob_prog.c	85;"	d	file:
CHK_ISIMMORT	mob_prog.c	88;"	d	file:
CHK_ISNEUTRAL	mob_prog.c	87;"	d	file:
CHK_ISNPC	mob_prog.c	84;"	d	file:
CHK_ISPC	mob_prog.c	83;"	d	file:
CHK_ISTARGET	mob_prog.c	95;"	d	file:
CHK_ISVISIBLE	mob_prog.c	93;"	d	file:
CHK_LEVEL	mob_prog.c	115;"	d	file:
CHK_MOBEXISTS	mob_prog.c	75;"	d	file:
CHK_MOBHERE	mob_prog.c	73;"	d	file:
CHK_MOBS	mob_prog.c	79;"	d	file:
CHK_MONEY	mob_prog.c	117;"	d	file:
CHK_MPCNT	mob_prog.c	144;"	d	file:
CHK_NAME	mob_prog.c	105;"	d	file:
CHK_OBJEXISTS	mob_prog.c	76;"	d	file:
CHK_OBJHERE	mob_prog.c	74;"	d	file:
CHK_OBJTYPE	mob_prog.c	110;"	d	file:
CHK_OBJVAL0	mob_prog.c	118;"	d	file:
CHK_OBJVAL1	mob_prog.c	119;"	d	file:
CHK_OBJVAL2	mob_prog.c	120;"	d	file:
CHK_OBJVAL3	mob_prog.c	121;"	d	file:
CHK_OBJVAL4	mob_prog.c	122;"	d	file:
CHK_OFF	mob_prog.c	99;"	d	file:
CHK_ORDER	mob_prog.c	81;"	d	file:
CHK_PEOPLE	mob_prog.c	77;"	d	file:
CHK_PLAYERS	mob_prog.c	78;"	d	file:
CHK_POS	mob_prog.c	106;"	d	file:
CHK_QSTATUS	mob_prog.c	125;"	d	file:
CHK_QTIMER	mob_prog.c	143;"	d	file:
CHK_RACE	mob_prog.c	108;"	d	file:
CHK_RAND	mob_prog.c	72;"	d	file:
CHK_RELIGION	mob_prog.c	140;"	d	file:
CHK_REMORT	mob_prog.c	146;"	d	file:
CHK_RES	mob_prog.c	127;"	d	file:
CHK_ROOM	mob_prog.c	113;"	d	file:
CHK_SEX	mob_prog.c	114;"	d	file:
CHK_SKILLED	mob_prog.c	141;"	d	file:
CHK_STATAGI	mob_prog.c	132;"	d	file:
CHK_STATCHA	mob_prog.c	137;"	d	file:
CHK_STATCON	mob_prog.c	130;"	d	file:
CHK_STATDEX	mob_prog.c	133;"	d	file:
CHK_STATDIS	mob_prog.c	136;"	d	file:
CHK_STATINT	mob_prog.c	134;"	d	file:
CHK_STATLUC	mob_prog.c	138;"	d	file:
CHK_STATSTR	mob_prog.c	129;"	d	file:
CHK_STATVIT	mob_prog.c	131;"	d	file:
CHK_STATWIS	mob_prog.c	135;"	d	file:
CHK_USES	mob_prog.c	104;"	d	file:
CHK_VNUM	mob_prog.c	111;"	d	file:
CHK_VULN	mob_prog.c	126;"	d	file:
CHK_WEARS	mob_prog.c	102;"	d	file:
CHMETH	lua_arclib.c	58;"	d	file:
CHSET	lua_arclib.c	57;"	d	file:
CHSETSTAT	lua_arclib.c	3664;"	d	file:
CH_ARG	lua_scripting.c	56;"	d	file:
CH_act	lua_arclib.c	/^static int CH_act (lua_State *LS)$/;"	f	file:
CH_addaffect	lua_arclib.c	/^static int CH_addaffect (lua_State *LS)$/;"	f	file:
CH_affected	lua_arclib.c	/^static int CH_affected (lua_State *LS)$/;"	f	file:
CH_asound	lua_arclib.c	/^static int CH_asound (lua_State *LS)$/;"	f	file:
CH_assist	lua_arclib.c	/^static int CH_assist (lua_State *LS)$/;"	f	file:
CH_at	lua_arclib.c	/^static int CH_at (lua_State *LS)$/;"	f	file:
CH_canattack	lua_arclib.c	/^static int CH_canattack (lua_State *LS)$/;"	f	file:
CH_cancel	lua_arclib.c	/^static int CH_cancel (lua_State *LS)$/;"	f	file:
CH_cansee	lua_arclib.c	/^static int CH_cansee (lua_State *LS)$/;"	f	file:
CH_carries	lua_arclib.c	/^static int CH_carries (lua_State *LS)$/;"	f	file:
CH_cast	lua_arclib.c	/^static int CH_cast (lua_State *LS)$/;"	f	file:
CH_ccarries	lua_arclib.c	/^static int CH_ccarries (lua_State *LS)$/;"	f	file:
CH_damage	lua_arclib.c	/^static int CH_damage (lua_State *LS)$/;"	f	file:
CH_delay	lua_arclib.c	/^static int CH_delay (lua_State *LS)$/;"	f	file:
CH_describe	lua_arclib.c	/^static int CH_describe (lua_State *LS)$/;"	f	file:
CH_destroy	lua_arclib.c	/^static int CH_destroy (lua_State *LS)$/;"	f	file:
CH_echo	lua_arclib.c	/^static int CH_echo (lua_State *LS)$/;"	f	file:
CH_echoaround	lua_arclib.c	/^static int CH_echoaround (lua_State *LS)$/;"	f	file:
CH_echoat	lua_arclib.c	/^static int CH_echoat (lua_State *LS)$/;"	f	file:
CH_emote	lua_arclib.c	/^static int CH_emote (lua_State *LS)$/;"	f	file:
CH_force	lua_arclib.c	/^static int CH_force (lua_State *LS)$/;"	f	file:
CH_gecho	lua_arclib.c	/^static int CH_gecho (lua_State *LS)$/;"	f	file:
CH_get_achpoints	lua_arclib.c	/^static int CH_get_achpoints( lua_State *LS)$/;"	f	file:
CH_get_affects	lua_arclib.c	/^static int CH_get_affects ( lua_State *LS )$/;"	f	file:
CH_get_align	lua_arclib.c	/^static int CH_get_align (lua_State *LS)$/;"	f	file:
CH_get_attacktype	lua_arclib.c	/^static int CH_get_attacktype( lua_State *LS)$/;"	f	file:
CH_get_bank	lua_arclib.c	/^static int CH_get_bank( lua_State *LS)$/;"	f	file:
CH_get_beheads	lua_arclib.c	/^static int CH_get_beheads( lua_State *LS)$/;"	f	file:
CH_get_clan	lua_arclib.c	/^static int CH_get_clan (lua_State *LS)$/;"	f	file:
CH_get_clanrank	lua_arclib.c	/^static int CH_get_clanrank( lua_State *LS)$/;"	f	file:
CH_get_class	lua_arclib.c	/^static int CH_get_class (lua_State *LS)$/;"	f	file:
CH_get_damnoun	lua_arclib.c	/^static int CH_get_damnoun (lua_State *LS)$/;"	f	file:
CH_get_damroll	lua_arclib.c	/^static int CH_get_damroll (lua_State *LS)$/;"	f	file:
CH_get_damtype	lua_arclib.c	/^static int CH_get_damtype (lua_State *LS)$/;"	f	file:
CH_get_description	lua_arclib.c	/^static int CH_get_description( lua_State *LS)$/;"	f	file:
CH_get_explored	lua_arclib.c	/^static int CH_get_explored( lua_State *LS)$/;"	f	file:
CH_get_fighting	lua_arclib.c	/^static int CH_get_fighting (lua_State *LS)$/;"	f	file:
CH_get_gold	lua_arclib.c	/^static int CH_get_gold (lua_State *LS)$/;"	f	file:
CH_get_groupsize	lua_arclib.c	/^static int CH_get_groupsize (lua_State *LS)$/;"	f	file:
CH_get_heshe	lua_arclib.c	/^static int CH_get_heshe (lua_State *LS)$/;"	f	file:
CH_get_himher	lua_arclib.c	/^static int CH_get_himher (lua_State *LS)$/;"	f	file:
CH_get_hisher	lua_arclib.c	/^static int CH_get_hisher (lua_State *LS)$/;"	f	file:
CH_get_hitroll	lua_arclib.c	/^static int CH_get_hitroll (lua_State *LS)$/;"	f	file:
CH_get_hp	lua_arclib.c	/^static int CH_get_hp (lua_State *LS)$/;"	f	file:
CH_get_id	lua_arclib.c	/^static int CH_get_id ( lua_State *LS )$/;"	f	file:
CH_get_ingame	lua_arclib.c	/^static int CH_get_ingame( lua_State *LS)$/;"	f	file:
CH_get_inventory	lua_arclib.c	/^static int CH_get_inventory (lua_State *LS)$/;"	f	file:
CH_get_isactive	lua_arclib.c	/^static int CH_get_isactive (lua_State *LS)$/;"	f	file:
CH_get_ischarm	lua_arclib.c	/^static int CH_get_ischarm (lua_State *LS)$/;"	f	file:
CH_get_isevil	lua_arclib.c	/^static int CH_get_isevil (lua_State *LS)$/;"	f	file:
CH_get_isfollow	lua_arclib.c	/^static int CH_get_isfollow (lua_State *LS)$/;"	f	file:
CH_get_isgood	lua_arclib.c	/^static int CH_get_isgood (lua_State *LS)$/;"	f	file:
CH_get_isimmort	lua_arclib.c	/^static int CH_get_isimmort (lua_State *LS)$/;"	f	file:
CH_get_isneutral	lua_arclib.c	/^static int CH_get_isneutral (lua_State *LS)$/;"	f	file:
CH_get_isnpc	lua_arclib.c	/^static int CH_get_isnpc (lua_State *LS)$/;"	f	file:
CH_get_ispc	lua_arclib.c	/^static int CH_get_ispc (lua_State *LS)$/;"	f	file:
CH_get_level	lua_arclib.c	/^static int CH_get_level (lua_State *LS)$/;"	f	file:
CH_get_longdescr	lua_arclib.c	/^static int CH_get_longdescr( lua_State *LS)$/;"	f	file:
CH_get_mana	lua_arclib.c	/^static int CH_get_mana (lua_State *LS)$/;"	f	file:
CH_get_maxhp	lua_arclib.c	/^static int CH_get_maxhp (lua_State *LS)$/;"	f	file:
CH_get_maxmana	lua_arclib.c	/^static int CH_get_maxmana (lua_State *LS)$/;"	f	file:
CH_get_maxmove	lua_arclib.c	/^static int CH_get_maxmove (lua_State *LS)$/;"	f	file:
CH_get_mobdeaths	lua_arclib.c	/^static int CH_get_mobdeaths( lua_State *LS)$/;"	f	file:
CH_get_mobkills	lua_arclib.c	/^static int CH_get_mobkills( lua_State *LS)$/;"	f	file:
CH_get_money	lua_arclib.c	/^static int CH_get_money (lua_State *LS)$/;"	f	file:
CH_get_move	lua_arclib.c	/^static int CH_get_move (lua_State *LS)$/;"	f	file:
CH_get_name	lua_arclib.c	/^static int CH_get_name (lua_State *LS)$/;"	f	file:
CH_get_pet	lua_arclib.c	/^static int CH_get_pet (lua_State *LS)$/;"	f	file:
CH_get_pkdeaths	lua_arclib.c	/^static int CH_get_pkdeaths( lua_State *LS)$/;"	f	file:
CH_get_pkills	lua_arclib.c	/^static int CH_get_pkills( lua_State *LS)$/;"	f	file:
CH_get_position	lua_arclib.c	/^static int CH_get_position (lua_State *LS)$/;"	f	file:
CH_get_proto	lua_arclib.c	/^static int CH_get_proto( lua_State *LS)$/;"	f	file:
CH_get_questpoints	lua_arclib.c	/^static int CH_get_questpoints( lua_State *LS)$/;"	f	file:
CH_get_race	lua_arclib.c	/^static int CH_get_race (lua_State *LS)$/;"	f	file:
CH_get_remorts	lua_arclib.c	/^static int CH_get_remorts( lua_State *LS)$/;"	f	file:
CH_get_room	lua_arclib.c	/^static int CH_get_room (lua_State *LS)$/;"	f	file:
CH_get_scroll	lua_arclib.c	/^static int CH_get_scroll ( lua_State *LS )$/;"	f	file:
CH_get_sex	lua_arclib.c	/^static int CH_get_sex (lua_State *LS)$/;"	f	file:
CH_get_shortdescr	lua_arclib.c	/^static int CH_get_shortdescr( lua_State *LS)$/;"	f	file:
CH_get_silver	lua_arclib.c	/^static int CH_get_silver (lua_State *LS)$/;"	f	file:
CH_get_size	lua_arclib.c	/^static int CH_get_size (lua_State *LS)$/;"	f	file:
CH_get_stance	lua_arclib.c	/^static int CH_get_stance (lua_State *LS)$/;"	f	file:
CH_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE CH_get_table [] =$/;"	v	file:
CH_get_vnum	lua_arclib.c	/^static int CH_get_vnum( lua_State *LS)$/;"	f	file:
CH_getval	lua_arclib.c	/^static int CH_getval ( lua_State *LS)$/;"	f	file:
CH_gforce	lua_arclib.c	/^static int CH_gforce (lua_State *LS)$/;"	f	file:
CH_goto	lua_arclib.c	/^static int CH_goto (lua_State *LS)$/;"	f	file:
CH_gtransfer	lua_arclib.c	/^static int CH_gtransfer (lua_State *LS)$/;"	f	file:
CH_has	lua_arclib.c	/^static int CH_has (lua_State *LS)$/;"	f	file:
CH_hit	lua_arclib.c	/^static int CH_hit (lua_State *LS)$/;"	f	file:
CH_immune	lua_arclib.c	/^static int CH_immune (lua_State *LS)$/;"	f	file:
CH_junk	lua_arclib.c	/^static int CH_junk (lua_State *LS)$/;"	f	file:
CH_kill	lua_arclib.c	/^static int CH_kill (lua_State *LS)$/;"	f	file:
CH_loadfunction	lua_arclib.c	/^static int CH_loadfunction ( lua_State *LS )$/;"	f	file:
CH_loadprog	lua_arclib.c	/^static int CH_loadprog (lua_State *LS)$/;"	f	file:
CH_loadscript	lua_arclib.c	/^static int CH_loadscript (lua_State *LS)$/;"	f	file:
CH_loadstring	lua_arclib.c	/^static int CH_loadstring (lua_State *LS)$/;"	f	file:
CH_loadtbl	lua_arclib.c	/^static int CH_loadtbl (lua_State *LS)$/;"	f	file:
CH_mdo	lua_arclib.c	/^static int CH_mdo (lua_State *LS)$/;"	f	file:
CH_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE CH_method_table [] =$/;"	v	file:
CH_mload	lua_arclib.c	/^static int CH_mload (lua_State *LS)$/;"	f	file:
CH_mobexists	lua_arclib.c	/^static int CH_mobexists (lua_State *LS)$/;"	f	file:
CH_mobhere	lua_arclib.c	/^static int CH_mobhere (lua_State *LS)$/;"	f	file:
CH_objexists	lua_arclib.c	/^static int CH_objexists (lua_State *LS)$/;"	f	file:
CH_objhere	lua_arclib.c	/^static int CH_objhere (lua_State *LS)$/;"	f	file:
CH_offensive	lua_arclib.c	/^static int CH_offensive (lua_State *LS)$/;"	f	file:
CH_olc	lua_arclib.c	/^static int CH_olc (lua_State *LS)$/;"	f	file:
CH_oload	lua_arclib.c	/^static int CH_oload (lua_State *LS)$/;"	f	file:
CH_otransfer	lua_arclib.c	/^static int CH_otransfer (lua_State *LS)$/;"	f	file:
CH_peace	lua_arclib.c	/^static int CH_peace (lua_State *LS)$/;"	f	file:
CH_purge	lua_arclib.c	/^static int CH_purge (lua_State *LS)$/;"	f	file:
CH_qadvance	lua_arclib.c	/^static int CH_qadvance (lua_State *LS)$/;"	f	file:
CH_qset	lua_arclib.c	/^static int CH_qset (lua_State *LS)$/;"	f	file:
CH_qstatus	lua_arclib.c	/^static int CH_qstatus (lua_State *LS)$/;"	f	file:
CH_qtimer	lua_arclib.c	/^static int CH_qtimer (lua_State *LS)$/;"	f	file:
CH_randchar	lua_arclib.c	/^static int CH_randchar (lua_State *LS)$/;"	f	file:
CH_remort	lua_arclib.c	/^static int CH_remort (lua_State *LS)$/;"	f	file:
CH_remove	lua_arclib.c	/^static int CH_remove (lua_State *LS)$/;"	f	file:
CH_removeaffect	lua_arclib.c	/^static int CH_removeaffect (lua_State *LS)$/;"	f	file:
CH_resist	lua_arclib.c	/^static int CH_resist (lua_State *LS)$/;"	f	file:
CH_restore	lua_arclib.c	/^static int CH_restore (lua_State *LS)$/;"	f	file:
CH_reward	lua_arclib.c	/^static int CH_reward (lua_State *LS)$/;"	f	file:
CH_rvnum	lua_arclib.c	/^static int CH_rvnum ( lua_State *LS)$/;"	f	file:
CH_savetbl	lua_arclib.c	/^static int CH_savetbl (lua_State *LS)$/;"	f	file:
CH_say	lua_arclib.c	/^static int CH_say (lua_State *LS)$/;"	f	file:
CH_set_align	lua_arclib.c	/^static int CH_set_align (lua_State *LS)$/;"	f	file:
CH_set_attacktype	lua_arclib.c	/^static int CH_set_attacktype (lua_State *LS)$/;"	f	file:
CH_set_damroll	lua_arclib.c	/^static int CH_set_damroll (lua_State *LS)$/;"	f	file:
CH_set_description	lua_arclib.c	/^static int CH_set_description (lua_State *LS)$/;"	f	file:
CH_set_gold	lua_arclib.c	/^static int CH_set_gold (lua_State *LS)$/;"	f	file:
CH_set_hitroll	lua_arclib.c	/^static int CH_set_hitroll (lua_State *LS)$/;"	f	file:
CH_set_hp	lua_arclib.c	/^static int CH_set_hp (lua_State *LS)$/;"	f	file:
CH_set_level	lua_arclib.c	/^static int CH_set_level (lua_State *LS)$/;"	f	file:
CH_set_longdescr	lua_arclib.c	/^static int CH_set_longdescr (lua_State *LS)$/;"	f	file:
CH_set_mana	lua_arclib.c	/^static int CH_set_mana (lua_State *LS)$/;"	f	file:
CH_set_maxhp	lua_arclib.c	/^static int CH_set_maxhp (lua_State *LS)$/;"	f	file:
CH_set_maxmana	lua_arclib.c	/^static int CH_set_maxmana (lua_State *LS)$/;"	f	file:
CH_set_maxmove	lua_arclib.c	/^static int CH_set_maxmove (lua_State *LS)$/;"	f	file:
CH_set_move	lua_arclib.c	/^static int CH_set_move (lua_State *LS)$/;"	f	file:
CH_set_name	lua_arclib.c	/^static int CH_set_name (lua_State *LS)$/;"	f	file:
CH_set_pet	lua_arclib.c	/^static int CH_set_pet (lua_State *LS)$/;"	f	file:
CH_set_race	lua_arclib.c	/^static int CH_set_race (lua_State *LS)$/;"	f	file:
CH_set_sex	lua_arclib.c	/^static int CH_set_sex (lua_State *LS)$/;"	f	file:
CH_set_shortdescr	lua_arclib.c	/^static int CH_set_shortdescr (lua_State *LS)$/;"	f	file:
CH_set_silver	lua_arclib.c	/^static int CH_set_silver (lua_State *LS)$/;"	f	file:
CH_set_size	lua_arclib.c	/^static int CH_set_size (lua_State *LS)$/;"	f	file:
CH_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE CH_set_table [] =$/;"	v	file:
CH_setact	lua_arclib.c	/^static int CH_setact (lua_State *LS)$/;"	f	file:
CH_setimmune	lua_arclib.c	/^static int CH_setimmune (lua_State *LS)$/;"	f	file:
CH_setresist	lua_arclib.c	/^static int CH_setresist (lua_State *LS)$/;"	f	file:
CH_setval	lua_arclib.c	/^static int CH_setval ( lua_State *LS)$/;"	f	file:
CH_setvuln	lua_arclib.c	/^static int CH_setvuln (lua_State *LS)$/;"	f	file:
CH_skilled	lua_arclib.c	/^static int CH_skilled (lua_State *LS)$/;"	f	file:
CH_tell	lua_arclib.c	/^static int CH_tell (lua_State *LS)$/;"	f	file:
CH_tprint	lua_arclib.c	/^static int CH_tprint ( lua_State *LS)$/;"	f	file:
CH_transfer	lua_arclib.c	/^static int CH_transfer (lua_State *LS)$/;"	f	file:
CH_uses	lua_arclib.c	/^static int CH_uses (lua_State *LS)$/;"	f	file:
CH_vforce	lua_arclib.c	/^static int CH_vforce (lua_State *LS)$/;"	f	file:
CH_vuln	lua_arclib.c	/^static int CH_vuln (lua_State *LS)$/;"	f	file:
CH_wears	lua_arclib.c	/^static int CH_wears (lua_State *LS)$/;"	f	file:
CH_zecho	lua_arclib.c	/^static int CH_zecho (lua_State *LS)$/;"	f	file:
CLANWAR_DATA	merc.h	/^typedef struct  clanwar_data     CLANWAR_DATA;$/;"	t	typeref:struct:clanwar_data
CLANWAR_FILE	merc.h	4110;"	d
CLANWAR_PEACE	merc.h	557;"	d
CLANWAR_TREATY	merc.h	560;"	d
CLANWAR_TRUCE	merc.h	559;"	d
CLANWAR_WAR	merc.h	558;"	d
CLAN_DATA	merc.h	/^typedef struct  clan_data        CLAN_DATA;$/;"	t	typeref:struct:clan_data
CLAN_DIR	merc.h	4098;"	d
CLAN_LIST	merc.h	4104;"	d
CLAN_RANK_DATA	merc.h	/^typedef struct  clan_rank_data   CLAN_RANK_DATA;$/;"	t	typeref:struct:clan_rank_data
CLAN_STATUS_ACTIVE	merc.h	579;"	d
CLAN_STATUS_INACTIVE	merc.h	578;"	d
CLAN_WAR	warfare.h	41;"	d
CLASS_WAR	warfare.h	40;"	d
CLEAR	merc.h	333;"	d
CMD	olc_act.c	7223;"	d	file:
CMD	olc_act.c	7279;"	d	file:
COLOUR_NONE	merc.h	353;"	d
COLOUR_ON_BY_DEFAULT	protocol.h	31;"	d
COMM_AFK	merc.h	2229;"	d
COMM_BRIEF	merc.h	2218;"	d
COMM_BUSY	merc.h	2235;"	d
COMM_COMBINE	merc.h	2220;"	d
COMM_COMPACT	merc.h	2217;"	d
COMM_DEAF	merc.h	2204;"	d
COMM_ENTRY	merc.h	/^typedef struct comm_history_entry COMM_ENTRY;$/;"	t	typeref:struct:comm_history_entry
COMM_HISTORY	merc.h	/^typedef struct comm_history_type COMM_HISTORY;$/;"	t	typeref:struct:comm_history_type
COMM_NOAUCTION	merc.h	2206;"	d
COMM_NOBITCH	merc.h	2231;"	d
COMM_NOCLAN	merc.h	2210;"	d
COMM_NOGAME	merc.h	2230;"	d
COMM_NOGOSSIP	merc.h	2207;"	d
COMM_NOGRATZ	merc.h	2223;"	d
COMM_NOINFO	merc.h	2213;"	d
COMM_NOMUSIC	merc.h	2209;"	d
COMM_NONEWBIE	merc.h	2234;"	d
COMM_NOQUESTION	merc.h	2208;"	d
COMM_NOQUOTE	merc.h	2211;"	d
COMM_NOREL	merc.h	2214;"	d
COMM_NOSAVANT	merc.h	2225;"	d
COMM_NOWAR	merc.h	2224;"	d
COMM_NOWIZ	merc.h	2205;"	d
COMM_PROMPT	merc.h	2219;"	d
COMM_QUIET	merc.h	2203;"	d
COMM_SHOUTSOFF	merc.h	2212;"	d
COMM_SHOW_AFFECTS	merc.h	2222;"	d
COMM_SHOW_ATTRIB	merc.h	2233;"	d
COMM_SHOW_PERCENT	merc.h	2236;"	d
COMM_SHOW_WORTH	merc.h	2232;"	d
COMM_TELNET_GA	merc.h	2221;"	d
COM_INGORE	interp.h	30;"	d
COND_DEEP_SLEEP	merc.h	2123;"	d
COND_DRUNK	merc.h	2117;"	d
COND_FULL	merc.h	2118;"	d
COND_HUNGER	merc.h	2120;"	d
COND_SMOKE	merc.h	2121;"	d
COND_THIRST	merc.h	2119;"	d
COND_TOLERANCE	merc.h	2122;"	d
CONFIG_FILE	merc.h	4125;"	d
CONT_CLOSEABLE	merc.h	1953;"	d
CONT_CLOSED	merc.h	1955;"	d
CONT_EASY	merc.h	1958;"	d
CONT_HARD	merc.h	1959;"	d
CONT_INFURIATING	merc.h	1960;"	d
CONT_LOCKED	merc.h	1956;"	d
CONT_PICKPROOF	merc.h	1954;"	d
CONT_PUT_ON	merc.h	1957;"	d
CON_BREAK_CONNECT	merc.h	711;"	d
CON_CLOSED	merc.h	734;"	d
CON_CONFIRM_NEW_NAME	merc.h	699;"	d
CON_CONFIRM_NEW_PASSWORD	merc.h	701;"	d
CON_COPYOVER_RECOVER	merc.h	721;"	d
CON_DEFAULT_CHOICE	merc.h	706;"	d
CON_GEN_GROUPS	merc.h	707;"	d
CON_GET_ALIGNMENT	merc.h	705;"	d
CON_GET_COLOUR	merc.h	733;"	d
CON_GET_CREATION_MODE	merc.h	718;"	d
CON_GET_NAME	merc.h	697;"	d
CON_GET_NEW_CLASS	merc.h	704;"	d
CON_GET_NEW_PASSWORD	merc.h	700;"	d
CON_GET_NEW_RACE	merc.h	702;"	d
CON_GET_NEW_SEX	merc.h	703;"	d
CON_GET_OLD_PASSWORD	merc.h	698;"	d
CON_GET_STAT_PRIORITY	merc.h	720;"	d
CON_NOTE_EXPIRE	merc.h	724;"	d
CON_NOTE_FINISH	merc.h	726;"	d
CON_NOTE_SUBJECT	merc.h	723;"	d
CON_NOTE_TEXT	merc.h	725;"	d
CON_NOTE_TO	merc.h	722;"	d
CON_PENALTY_CONFIRM	merc.h	728;"	d
CON_PENALTY_FINISH	merc.h	732;"	d
CON_PENALTY_HOURS	merc.h	729;"	d
CON_PENALTY_PENLIST	merc.h	731;"	d
CON_PENALTY_POINTS	merc.h	730;"	d
CON_PENALTY_SEVERITY	merc.h	727;"	d
CON_PICK_WEAPON	merc.h	708;"	d
CON_PLAYING	merc.h	696;"	d
CON_READ_IMOTD	merc.h	709;"	d
CON_READ_MOTD	merc.h	710;"	d
CON_ROLL_STATS	merc.h	719;"	d
COPYOVER_FILE	comm.c	2784;"	d	file:
COPY_AFFECTS	merc.h	3827;"	d
CRD	recycle.h	70;"	d
CRD	recycle.h	73;"	d
CREATION_EXPERT	merc.h	739;"	d
CREATION_NORMAL	merc.h	738;"	d
CREATION_REMORT	merc.h	740;"	d
CREATION_UNKNOWN	merc.h	737;"	d
CREDITS	olc.h	30;"	d
CRFT	crafting.c	15;"	d	file:
CRIME_DATA	merc.h	/^typedef struct  crime_data       CRIME_DATA;$/;"	t	typeref:struct:crime_data
CRIME_FILE	merc.h	4116;"	d
CURR_AREA_VERSION	merc.h	292;"	d
CURR_PFILE_VERSION	bsave.c	111;"	d	file:
CYAN	merc.h	359;"	d
C_BLUE	merc.h	337;"	d
C_B_BLUE	merc.h	345;"	d
C_B_CYAN	merc.h	347;"	d
C_B_GREEN	merc.h	343;"	d
C_B_MAGENTA	merc.h	346;"	d
C_B_RED	merc.h	342;"	d
C_B_WHITE	merc.h	348;"	d
C_B_YELLOW	merc.h	344;"	d
C_CYAN	merc.h	339;"	d
C_D_GREY	merc.h	341;"	d
C_FLAGS	makefile	/^C_FLAGS =  -ggdb -rdynamic -w -Wall $(PROF) $(NOCRYPT) -DMKTIME=$(MKTIME) -DBRANCH=$(BRANCH) -DPARENT=$(PARENT)$/;"	m
C_GREEN	merc.h	335;"	d
C_MAGENTA	merc.h	338;"	d
C_RED	merc.h	334;"	d
C_WHITE	merc.h	340;"	d
C_YELLOW	merc.h	336;"	d
CallLuaWithTraceBack	lua_main.c	/^int CallLuaWithTraceBack (lua_State *LS, const int iArguments, const int iReturn)$/;"	f
ColourRGB	protocol.c	/^const char *ColourRGB( descriptor_t *apDescriptor, const char *apRGB )$/;"	f
CompressEnd	protocol.c	/^static void CompressEnd( descriptor_t *apDescriptor )$/;"	f	file:
CompressStart	protocol.c	/^static void CompressStart( descriptor_t *apDescriptor )$/;"	f	file:
ConfirmNegotiation	protocol.c	/^static bool_t ConfirmNegotiation( descriptor_t *apDescriptor, negotiated_t aProtocol, bool_t abWillDo, bool_t abSendReply )$/;"	f	file:
CopyoverGet	protocol.c	/^const char *CopyoverGet( descriptor_t *apDescriptor )$/;"	f
CopyoverSet	protocol.c	/^void CopyoverSet( descriptor_t *apDescriptor, const char *apData )$/;"	f
D	merc.h	1139;"	d
DAM_ACID	merc.h	1322;"	d
DAM_BASH	merc.h	1316;"	d
DAM_CHARM	merc.h	1333;"	d
DAM_COLD	merc.h	1320;"	d
DAM_DISEASE	merc.h	1328;"	d
DAM_DROWNING	merc.h	1329;"	d
DAM_ENERGY	merc.h	1326;"	d
DAM_FIRE	merc.h	1319;"	d
DAM_HARM	merc.h	1332;"	d
DAM_HOLY	merc.h	1325;"	d
DAM_LIGHT	merc.h	1330;"	d
DAM_LIGHTNING	merc.h	1321;"	d
DAM_MENTAL	merc.h	1327;"	d
DAM_MIX_MOD	merc.h	1337;"	d
DAM_NEGATIVE	merc.h	1324;"	d
DAM_NONE	merc.h	1315;"	d
DAM_OTHER	merc.h	1331;"	d
DAM_PIERCE	merc.h	1317;"	d
DAM_POISON	merc.h	1323;"	d
DAM_SLASH	merc.h	1318;"	d
DAM_SOUND	merc.h	1334;"	d
DATE	olc.h	28;"	d
DAY	merc.h	277;"	d
DAZE_STATE	merc.h	3851;"	d
DBGF	lua_arclib.c	1118;"	d	file:
DBUFFER	merc.h	/^typedef struct buffer_type DBUFFER;$/;"	t	typeref:struct:buffer_type
DD	hunt.c	263;"	d	file:
DD_DIR	hunt.c	264;"	d	file:
DD_DIST	hunt.c	265;"	d	file:
DECLARETRIG	lua_arclib.c	7399;"	d	file:
DECLARETYPE	lua_arclib.c	7398;"	d	file:
DECLARE_DO_FUN	merc.h	52;"	d
DECLARE_OLC_FUN	olc.h	38;"	d
DECLARE_SPEC_FUN	merc.h	53;"	d
DECLARE_SPELL_FUN	merc.h	54;"	d
DEFAULT_BOARD	merc.h	978;"	d
DEFAULT_PERS	playback.c	26;"	d	file:
DEFAULT_RESULTS	playback.c	23;"	d	file:
DEFINE_GOD_FUNCTION	religion.c	15;"	d	file:
DEF_EXCLUDE	merc.h	976;"	d
DEF_INCLUDE	merc.h	975;"	d
DEF_NORMAL	merc.h	974;"	d
DEMIGOD	merc.h	308;"	d
DESCRIPTOR_DATA	merc.h	/^typedef struct  descriptor_data  DESCRIPTOR_DATA;$/;"	t	typeref:struct:descriptor_data
DESCRIPTOR_get_character	lua_arclib.c	/^static int DESCRIPTOR_get_character( lua_State *LS )$/;"	f	file:
DESCRIPTOR_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE DESCRIPTOR_get_table [] =$/;"	v	file:
DESCRIPTOR_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE DESCRIPTOR_method_table [] =$/;"	v	file:
DESCRIPTOR_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE DESCRIPTOR_set_table [] =$/;"	v	file:
DESC_PC	merc.h	3866;"	d
DICE_BONUS	merc.h	1627;"	d
DICE_NUMBER	merc.h	1625;"	d
DICE_TYPE	merc.h	1626;"	d
DIF	olc_save.c	34;"	d	file:
DIGIT_VALUE	tflag.c	192;"	d	file:
DIR_DOWN	merc.h	2030;"	d
DIR_EAST	merc.h	2026;"	d
DIR_NORTH	merc.h	2025;"	d
DIR_NORTHEAST	merc.h	2031;"	d
DIR_NORTHWEST	merc.h	2034;"	d
DIR_PORTAL	merc.h	2036;"	d
DIR_SOUTH	merc.h	2027;"	d
DIR_SOUTHEAST	merc.h	2032;"	d
DIR_SOUTHWEST	merc.h	2033;"	d
DIR_UP	merc.h	2029;"	d
DIR_WEST	merc.h	2028;"	d
DISABLED_DATA	merc.h	/^typedef struct  disabled_data    DISABLED_DATA;$/;"	t	typeref:struct:disabled_data
DISABLED_FILE	merc.h	4109;"	d
DISGUISE_MAX_VNUM	act_info.c	4341;"	d	file:
DISGUISE_MIN_VNUM	act_info.c	4340;"	d	file:
DM	telnet.h	28;"	d
DO	telnet.h	17;"	d
DONT	telnet.h	16;"	d
DO_FUN	merc.h	/^typedef void DO_FUN args( ( CHAR_DATA *ch, char *argument ) );$/;"	t
DURATION_PERMANENT	grant.c	12;"	d	file:
DURATION_REVOKED	grant.c	13;"	d	file:
DUR_BRIEF	merc.h	3061;"	d
DUR_EXTREME	merc.h	3065;"	d
DUR_LONG	merc.h	3064;"	d
DUR_NONE	merc.h	3059;"	d
DUR_NORMAL	merc.h	3063;"	d
DUR_SHORT	merc.h	3062;"	d
DUR_SPECIAL	merc.h	3060;"	d
Default	protocol.h	/^   int          Default;       \/* The default value for a number *\/$/;"	m	struct:__anon10
E	merc.h	1140;"	d
EC	telnet.h	23;"	d
ED	olc.h	403;"	d
ED	olc.h	422;"	d
ED	recycle.h	89;"	d
ED	recycle.h	92;"	d
EDIT_APCODE	olc.h	390;"	d
EDIT_AREA	olc.h	378;"	d
EDIT_HELP	olc.h	381;"	d
EDIT_MOB	olc.h	369;"	d
EDIT_MPCODE	olc.h	384;"	d
EDIT_OBJ	olc.h	372;"	d
EDIT_OPCODE	olc.h	387;"	d
EDIT_ROOM	olc.h	375;"	d
EDIT_RPCODE	olc.h	393;"	d
ED_APCODE	olc.h	60;"	d
ED_AREA	olc.h	53;"	d
ED_HELP	olc.h	58;"	d
ED_MOBILE	olc.h	56;"	d
ED_MPCODE	olc.h	57;"	d
ED_NONE	olc.h	52;"	d
ED_OBJECT	olc.h	55;"	d
ED_OPCODE	olc.h	59;"	d
ED_ROOM	olc.h	54;"	d
ED_RPCODE	olc.h	61;"	d
EFFECT_FUN	breath.c	/^typedef void EFFECT_FUN ( void *vo, int level, int dam, int target );$/;"	t	file:
EL	telnet.h	22;"	d
EMEM_SIZE	buffer.c	33;"	d	file:
ENDGTABLE	lua_arclib.c	1114;"	d	file:
ENDPTABLE	lua_arclib.c	108;"	d	file:
END_BLOCK	mob_prog.c	1136;"	d	file:
END_MARKER	interp.c	43;"	d	file:
ENV_TABLE_NAME	lua_main.h	4;"	d
EOR	telnet.h	31;"	d
ERR_INF_LOOP	lua_main.c	19;"	d	file:
EVAL_EQ	mob_prog.c	151;"	d	file:
EVAL_GE	mob_prog.c	152;"	d	file:
EVAL_GT	mob_prog.c	154;"	d	file:
EVAL_LE	mob_prog.c	153;"	d	file:
EVAL_LT	mob_prog.c	155;"	d	file:
EVAL_NE	mob_prog.c	156;"	d	file:
EXE_FILE	comm.c	2787;"	d	file:
EXGET	lua_arclib.c	80;"	d	file:
EXIT_DATA	merc.h	/^typedef struct  exit_data        EXIT_DATA;$/;"	t	typeref:struct:exit_data
EXIT_close	lua_arclib.c	/^static int EXIT_close( lua_State *LS)$/;"	f	file:
EXIT_flag	lua_arclib.c	/^static int EXIT_flag (lua_State *LS)$/;"	f	file:
EXIT_get_description	lua_arclib.c	/^static int EXIT_get_description (lua_State *LS)$/;"	f	file:
EXIT_get_key	lua_arclib.c	/^static int EXIT_get_key (lua_State *LS)$/;"	f	file:
EXIT_get_keyword	lua_arclib.c	/^static int EXIT_get_keyword (lua_State *LS)$/;"	f	file:
EXIT_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE EXIT_get_table [] =$/;"	v	file:
EXIT_get_toroom	lua_arclib.c	/^static int EXIT_get_toroom (lua_State *LS)$/;"	f	file:
EXIT_lock	lua_arclib.c	/^static int EXIT_lock( lua_State *LS)$/;"	f	file:
EXIT_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE EXIT_method_table [] =$/;"	v	file:
EXIT_open	lua_arclib.c	/^static int EXIT_open( lua_State *LS)$/;"	f	file:
EXIT_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE EXIT_set_table [] =$/;"	v	file:
EXIT_setflag	lua_arclib.c	/^static int EXIT_setflag( lua_State *LS)$/;"	f	file:
EXIT_unlock	lua_arclib.c	/^static int EXIT_unlock( lua_State *LS)$/;"	f	file:
EXMETH	lua_arclib.c	82;"	d	file:
EXPLORE_DATA	merc.h	/^} EXPLORE_DATA;$/;"	t	typeref:struct:exploration_data
EXPLORE_HOLDER	merc.h	/^} EXPLORE_HOLDER;$/;"	t	typeref:struct:explore_holder
EXSET	lua_arclib.c	81;"	d	file:
EXTRA_DESCR_DATA	merc.h	/^typedef struct  extra_descr_data EXTRA_DESCR_DATA;$/;"	t	typeref:struct:extra_descr_data
EX_CLOSED	merc.h	2043;"	d
EX_DORMANT	merc.h	2054;"	d
EX_EASY	merc.h	2047;"	d
EX_HARD	merc.h	2048;"	d
EX_HIDDEN	merc.h	2053;"	d
EX_INFURIATING	merc.h	2049;"	d
EX_ISDOOR	merc.h	2042;"	d
EX_LOCKED	merc.h	2044;"	d
EX_NOCLOSE	merc.h	2050;"	d
EX_NOLOCK	merc.h	2051;"	d
EX_NOPASS	merc.h	2046;"	d
EX_PICKPROOF	merc.h	2045;"	d
EX_TRAPPED	merc.h	2052;"	d
ExecuteMSDPPair	protocol.c	/^static void ExecuteMSDPPair( descriptor_t *apDescriptor, const char *apVariable, const char *apValue )$/;"	f	file:
F	merc.h	1141;"	d
FALSE	merc.h	67;"	d
FIRST_DAMAGE	merc.h	1341;"	d
FLAG_CONVERT	merc.h	3797;"	d
FLAG_MAX_BIT	merc.h	386;"	d
FLAG_MAX_BYTE	merc.h	385;"	d
FLAG_READ_SET	db2.c	48;"	d	file:
FNDELAY	comm.c	658;"	d	file:
FNDELAY	comm.c	659;"	d	file:
FNDELAY	comm.c	662;"	d	file:
FOLLOWER_DATA	merc.h	/^typedef struct follower_data FOLLOWER_DATA;$/;"	t	typeref:struct:follower_data
FORM_AGILE	merc.h	1469;"	d
FORM_AMPHIBIAN	merc.h	1482;"	d
FORM_ANIMAL	merc.h	1461;"	d
FORM_BIPED	merc.h	1468;"	d
FORM_BIRD	merc.h	1478;"	d
FORM_BLOB	merc.h	1474;"	d
FORM_BRIGHT	merc.h	1486;"	d
FORM_BURN	merc.h	1491;"	d
FORM_COLD_BLOOD	merc.h	1484;"	d
FORM_CONDUCTIVE	merc.h	1493;"	d
FORM_CONSTRICT	merc.h	1494;"	d
FORM_CONSTRUCT	merc.h	1464;"	d
FORM_CRUSTACEAN	merc.h	1472;"	d
FORM_DOUBLE_JOINTED	merc.h	1489;"	d
FORM_DRAGON	merc.h	1481;"	d
FORM_EDIBLE	merc.h	1454;"	d
FORM_FISH	merc.h	1483;"	d
FORM_FROST	merc.h	1490;"	d
FORM_INSECT	merc.h	1470;"	d
FORM_INSTANT_DECAY	merc.h	1457;"	d
FORM_INTANGIBLE	merc.h	1466;"	d
FORM_MAGICAL	merc.h	1456;"	d
FORM_MAMMAL	merc.h	1477;"	d
FORM_MIST	merc.h	1465;"	d
FORM_MULTI_HEADED	merc.h	1495;"	d
FORM_OTHER	merc.h	1458;"	d
FORM_PLANT	merc.h	1476;"	d
FORM_POISON	merc.h	1455;"	d
FORM_REPTILE	merc.h	1479;"	d
FORM_SENTIENT	merc.h	1462;"	d
FORM_SNAKE	merc.h	1480;"	d
FORM_SPIDER	merc.h	1471;"	d
FORM_SUNBURN	merc.h	1488;"	d
FORM_TOUGH	merc.h	1487;"	d
FORM_UNDEAD	merc.h	1463;"	d
FORM_WISE	merc.h	1492;"	d
FORM_WORM	merc.h	1473;"	d
FPRINT_FIELD_FLAGS	olc_save.c	369;"	d	file:
FPRINT_FIELD_INT	olc_save.c	365;"	d	file:
FPRINT_FIELD_NAMED	olc_save.c	367;"	d	file:
FSTAT	merc.h	32;"	d
FUNCTION_CALL	protocol.c	2594;"	d	file:
G	merc.h	1142;"	d
GA	telnet.h	21;"	d
GAG_AURA	merc.h	2290;"	d
GAG_BLEED	merc.h	2287;"	d
GAG_EQUIP	merc.h	2289;"	d
GAG_FADE	merc.h	2286;"	d
GAG_IMMUNE	merc.h	2288;"	d
GAG_MISS	merc.h	2284;"	d
GAG_NCOL_CHAN	merc.h	2292;"	d
GAG_SUNBURN	merc.h	2291;"	d
GAG_WFLAG	merc.h	2285;"	d
GATE_ASTRAL	merc.h	1885;"	d
GATE_BUGGY	merc.h	1881;"	d
GATE_GOWITH	merc.h	1880;"	d
GATE_IGNORE_NO_RECALL	merc.h	1883;"	d
GATE_NOCURSE	merc.h	1879;"	d
GATE_NORMAL_EXIT	merc.h	1878;"	d
GATE_RANDOM	merc.h	1882;"	d
GATE_STAY_AREA	merc.h	1887;"	d
GATE_WARFARE	merc.h	1884;"	d
GD	recycle.h	83;"	d
GD	recycle.h	86;"	d
GENDER_WAR	warfare.h	42;"	d
GEN_DATA	merc.h	/^typedef struct  gen_data         GEN_DATA;$/;"	t	typeref:struct:gen_data
GETC	tflag.c	195;"	d	file:
GETC	tflag.c	197;"	d	file:
GETP	lua_arclib.c	38;"	d	file:
GETSCRIPT_FUNCTION	lua_main.h	8;"	d
GET_AC	merc.h	3844;"	d
GET_AGE	merc.h	3836;"	d
GET_DAMROLL	merc.h	3846;"	d
GET_HITROLL	merc.h	3845;"	d
GET_UNSET	db.h	42;"	d
GFUN	lua_arclib.c	1115;"	d	file:
GLOB_TYPE	lua_arclib.c	/^} GLOB_TYPE;$/;"	t	typeref:struct:glob_type	file:
GOD	merc.h	307;"	d
GODF	lua_arclib.c	1117;"	d	file:
GOD_ACTION	religion.c	/^typedef struct god_action GOD_ACTION;$/;"	t	typeref:struct:god_action	file:
GOD_DIR	merc.h	4095;"	d
GOD_FUN	religion.c	/^typedef bool GOD_FUN( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration );$/;"	t	file:
GOD_FUNC_DEFAULT_DURATION	merc.h	328;"	d
GO_OK	hunt.c	87;"	d	file:
GO_OK_SMARTER	hunt.c	88;"	d	file:
GRANT_DATA	merc.h	/^typedef struct  grant_data       GRANT_DATA;$/;"	t	typeref:struct:grant_data
GREEN	merc.h	355;"	d
GREP_DATA	grep.c	/^typedef struct grep_data GREP_DATA;$/;"	t	typeref:struct:grep_data	file:
GREP_MOB	grep.c	80;"	d	file:
GREP_MOB_ACT	grep.c	662;"	d	file:
GREP_MOB_AFF	grep.c	657;"	d	file:
GREP_MOB_ALIGN	grep.c	669;"	d	file:
GREP_MOB_IMM	grep.c	666;"	d	file:
GREP_MOB_INGAME	grep.c	660;"	d	file:
GREP_MOB_LEVEL	grep.c	659;"	d	file:
GREP_MOB_MPROG	grep.c	661;"	d	file:
GREP_MOB_NAME	grep.c	654;"	d	file:
GREP_MOB_OFF	grep.c	658;"	d	file:
GREP_MOB_RES	grep.c	665;"	d	file:
GREP_MOB_SHOPMOB	grep.c	667;"	d	file:
GREP_MOB_SPEC	grep.c	656;"	d	file:
GREP_MOB_SPECFUN	grep.c	668;"	d	file:
GREP_MOB_TRIGGER	grep.c	663;"	d	file:
GREP_MOB_VULN	grep.c	664;"	d	file:
GREP_MOB_WEALTH	grep.c	655;"	d	file:
GREP_OBJ	grep.c	79;"	d	file:
GREP_OBJ_ADDFLAG	grep.c	216;"	d	file:
GREP_OBJ_AFF	grep.c	224;"	d	file:
GREP_OBJ_BELOW_SPEC	grep.c	227;"	d	file:
GREP_OBJ_COMBINE	grep.c	226;"	d	file:
GREP_OBJ_COST	grep.c	214;"	d	file:
GREP_OBJ_EXTRA	grep.c	225;"	d	file:
GREP_OBJ_HEAL	grep.c	223;"	d	file:
GREP_OBJ_INGAME	grep.c	221;"	d	file:
GREP_OBJ_LEVEL	grep.c	218;"	d	file:
GREP_OBJ_NAME	grep.c	212;"	d	file:
GREP_OBJ_OPROG	grep.c	229;"	d	file:
GREP_OBJ_OPS	grep.c	215;"	d	file:
GREP_OBJ_RATING	grep.c	222;"	d	file:
GREP_OBJ_SPEC	grep.c	217;"	d	file:
GREP_OBJ_SPELL	grep.c	219;"	d	file:
GREP_OBJ_TRIGGER	grep.c	230;"	d	file:
GREP_OBJ_TYPE	grep.c	213;"	d	file:
GREP_OBJ_WEAR	grep.c	220;"	d	file:
GREP_OBJ_WEIGHT	grep.c	228;"	d	file:
GREP_ROOM	grep.c	81;"	d	file:
GREP_ROOM_FLAG	grep.c	1033;"	d	file:
GREP_ROOM_HEAL	grep.c	1032;"	d	file:
GREP_ROOM_INGAME	grep.c	1034;"	d	file:
GREP_ROOM_NAME	grep.c	1038;"	d	file:
GREP_ROOM_SECTOR	grep.c	1035;"	d	file:
GROUP_VNUM_OGRES	merc.h	1064;"	d
GROUP_VNUM_TROLLS	merc.h	1063;"	d
GetAnsiColour	protocol.c	/^static const char *GetAnsiColour( bool_t abBackground, int aRed, int aGreen, int aBlue )$/;"	f	file:
GetLuaEnvironmentCount	lua_main.c	/^int GetLuaEnvironmentCount()$/;"	f
GetLuaGameObjectCount	lua_main.c	/^int GetLuaGameObjectCount()$/;"	f
GetLuaMemoryUsage	lua_main.c	/^int GetLuaMemoryUsage()$/;"	f
GetMSSP_Players	protocol.c	/^static const char *GetMSSP_Players()$/;"	f	file:
GetMSSP_Uptime	protocol.c	/^static const char *GetMSSP_Uptime()$/;"	f	file:
GetMxpTag	protocol.c	/^static char *GetMxpTag( const char *apTag, const char *apText )$/;"	f	file:
GetRGBColour	protocol.c	/^static const char *GetRGBColour( bool_t abBackground, int aRed, int aGreen, int aBlue )$/;"	f	file:
GetTracebackFunction	lua_main.c	/^static void GetTracebackFunction (lua_State *LS)$/;"	f	file:
H	merc.h	1143;"	d
HASH_KEY	hunt.c	64;"	d	file:
HAS_AFFECTS	merc.h	3826;"	d
HAS_ATRIG	merc.h	3855;"	d
HAS_OTRIG	merc.h	3854;"	d
HAS_RTRIG	merc.h	3856;"	d
HAS_TRIGGER	merc.h	3853;"	d
HE	merc.h	325;"	d
HEDIT	olc_act.c	/^HEDIT (hedit_create)$/;"	f
HEDIT	olc_act.c	/^HEDIT( hedit_delete)$/;"	f
HEDIT	olc_act.c	/^HEDIT( hedit_desc)$/;"	f
HEDIT	olc_act.c	/^HEDIT( hedit_keywords)$/;"	f
HEDIT	olc_act.c	/^HEDIT( hedit_show)$/;"	f
HEDIT	olc_act.c	/^HEDIT(hedit_level)$/;"	f
HEDIT	olc_act.c	88;"	d	file:
HELP_AREA	merc.h	/^typedef struct  help_area_data   HELP_AREA;$/;"	t	typeref:struct:help_area_data
HELP_DATA	merc.h	/^typedef struct  help_data        HELP_DATA;$/;"	t	typeref:struct:help_data
HELP_get_delete	lua_arclib.c	/^static int HELP_get_delete( lua_State *LS )$/;"	f	file:
HELP_get_keywords	lua_arclib.c	/^static int HELP_get_keywords( lua_State *LS )$/;"	f	file:
HELP_get_level	lua_arclib.c	/^static int HELP_get_level( lua_State *LS )$/;"	f	file:
HELP_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE HELP_get_table [] =$/;"	v	file:
HELP_get_text	lua_arclib.c	/^static int HELP_get_text( lua_State *LS )$/;"	f	file:
HELP_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE HELP_method_table [] =$/;"	v	file:
HELP_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE HELP_set_table [] =$/;"	v	file:
HERO	merc.h	311;"	d
HIGHEST_STR_DUP_STRINGS	db.c	/^static int HIGHEST_STR_DUP_STRINGS = 0;$/;"	v	file:
HOUR	merc.h	276;"	d
I	merc.h	1144;"	d
IAC	telnet.h	15;"	d
ID	religion.h	/^    int ID;$/;"	m	struct:religion_data
IM	merc.h	324;"	d
IMM_ACID	merc.h	1389;"	d
IMM_BASH	merc.h	1383;"	d
IMM_CHARM	merc.h	1380;"	d
IMM_COLD	merc.h	1387;"	d
IMM_DISEASE	merc.h	1395;"	d
IMM_DROWNING	merc.h	1396;"	d
IMM_ENERGY	merc.h	1393;"	d
IMM_FIRE	merc.h	1386;"	d
IMM_HOLY	merc.h	1392;"	d
IMM_IRON	merc.h	1401;"	d
IMM_LIGHT	merc.h	1397;"	d
IMM_LIGHTNING	merc.h	1388;"	d
IMM_MAGIC	merc.h	1381;"	d
IMM_MENTAL	merc.h	1394;"	d
IMM_NEGATIVE	merc.h	1391;"	d
IMM_PIERCE	merc.h	1384;"	d
IMM_POISON	merc.h	1390;"	d
IMM_SILVER	merc.h	1400;"	d
IMM_SLASH	merc.h	1385;"	d
IMM_SOUND	merc.h	1398;"	d
IMM_SUMMON	merc.h	1379;"	d
IMM_WEAPON	merc.h	1382;"	d
IMM_WOOD	merc.h	1399;"	d
IMPLEMENTOR	merc.h	304;"	d
INTERP_TABLE_NAME	lua_main.h	5;"	d
INVALIDATE	merc.h	3757;"	d
IN_BLOCK	mob_prog.c	1135;"	d	file:
IP	telnet.h	26;"	d
ISSPACE	merc.h	3897;"	d
IS_ACTIVE_HELPER	merc.h	3813;"	d
IS_AFFECTED	merc.h	3825;"	d
IS_AUTHED	merc.h	3870;"	d
IS_AWAKE	merc.h	3843;"	d
IS_BETWEEN	merc.h	3800;"	d
IS_BUILDER	merc.h	3858;"	d
IS_BUILDER_HERE	redit-ilab.c	36;"	d	file:
IS_CHAN_OFF	merc.h	3803;"	d
IS_DEAD	merc.h	3818;"	d
IS_DIGIT	tflag.c	191;"	d	file:
IS_DIR	hunt.c	86;"	d	file:
IS_EVIL	merc.h	3840;"	d
IS_GOOD	merc.h	3839;"	d
IS_HELPER	merc.h	3812;"	d
IS_HERO	merc.h	3811;"	d
IS_IMMORTAL	merc.h	3810;"	d
IS_IMMUNE	merc.h	1374;"	d
IS_INCOG	merc.h	3816;"	d
IS_MIXED_DAMAGE	merc.h	1340;"	d
IS_NEUTRAL	merc.h	3841;"	d
IS_NOHIDE	merc.h	3860;"	d
IS_NORMAL	merc.h	1373;"	d
IS_NPC	merc.h	3809;"	d
IS_NULLSTR	merc.h	3799;"	d
IS_OBJ_STAT	merc.h	3882;"	d
IS_OUTSIDE	merc.h	3848;"	d
IS_PLAYING	merc.h	3865;"	d
IS_QUESTOR	merc.h	3833;"	d
IS_QUESTORHARD	merc.h	3834;"	d
IS_REMORT	merc.h	3859;"	d
IS_RESISTANT	merc.h	1375;"	d
IS_SET	merc.h	3786;"	d
IS_SET	merc.h	3791;"	d
IS_SPELL	merc.h	3802;"	d
IS_SWITCHED	merc.h	3857;"	d
IS_TAG	merc.h	3876;"	d
IS_TRUSTED	merc.h	3815;"	d
IS_UNDEAD	merc.h	3820;"	d
IS_VALID	merc.h	3755;"	d
IS_VULNERABLE	merc.h	1376;"	d
IS_WAITING_FOR_AUTH	merc.h	3875;"	d
IS_WEAPON_STAT	merc.h	3883;"	d
IS_WIZI	merc.h	3817;"	d
IS_WRITING_NOTE	merc.h	3862;"	d
ITEM_ALLOW_CLERIC	merc.h	1801;"	d
ITEM_ALLOW_MAGE	merc.h	1802;"	d
ITEM_ALLOW_THIEF	merc.h	1800;"	d
ITEM_ALLOW_WARRIOR	merc.h	1799;"	d
ITEM_ANTI_CLERIC	merc.h	1806;"	d
ITEM_ANTI_EVIL	merc.h	1770;"	d
ITEM_ANTI_GOOD	merc.h	1769;"	d
ITEM_ANTI_MAGE	merc.h	1807;"	d
ITEM_ANTI_NEUTRAL	merc.h	1771;"	d
ITEM_ANTI_THIEF	merc.h	1805;"	d
ITEM_ANTI_WARRIOR	merc.h	1804;"	d
ITEM_ARMOR	merc.h	1723;"	d
ITEM_ARROWS	merc.h	1754;"	d
ITEM_BLACK_HERB	merc.h	1750;"	d
ITEM_BLESS	merc.h	1768;"	d
ITEM_BOAT	merc.h	1733;"	d
ITEM_BURN_PROOF	merc.h	1784;"	d
ITEM_CIGARETTE	merc.h	1753;"	d
ITEM_CLASS_ASSASSIN	merc.h	1816;"	d
ITEM_CLASS_CLERIC	merc.h	1811;"	d
ITEM_CLASS_GLADIATOR	merc.h	1813;"	d
ITEM_CLASS_GUNSLINGER	merc.h	1821;"	d
ITEM_CLASS_ILLUSIONIST	merc.h	1820;"	d
ITEM_CLASS_MAGE	merc.h	1812;"	d
ITEM_CLASS_MONK	merc.h	1818;"	d
ITEM_CLASS_NECROMANCER	merc.h	1823;"	d
ITEM_CLASS_NINJA	merc.h	1817;"	d
ITEM_CLASS_PALADIN	merc.h	1815;"	d
ITEM_CLASS_RANGER	merc.h	1822;"	d
ITEM_CLASS_SAMURAI	merc.h	1814;"	d
ITEM_CLASS_TEMPLAR	merc.h	1819;"	d
ITEM_CLASS_THIEF	merc.h	1810;"	d
ITEM_CLASS_WARRIOR	merc.h	1809;"	d
ITEM_CLOTHING	merc.h	1725;"	d
ITEM_CONTAINER	merc.h	1728;"	d
ITEM_CORPSE_NPC	merc.h	1734;"	d
ITEM_CORPSE_PC	merc.h	1735;"	d
ITEM_DARK	merc.h	1762;"	d
ITEM_DOWSING_STICK	merc.h	1748;"	d
ITEM_DRINK_CON	merc.h	1729;"	d
ITEM_EASY_DROP	merc.h	1791;"	d
ITEM_EVIL	merc.h	1764;"	d
ITEM_EXPLOSIVE	merc.h	1746;"	d
ITEM_FOOD	merc.h	1731;"	d
ITEM_FOUNTAIN	merc.h	1736;"	d
ITEM_FURNITURE	merc.h	1726;"	d
ITEM_GEM	merc.h	1743;"	d
ITEM_GLOW	merc.h	1760;"	d
ITEM_HAD_TIMER	merc.h	1781;"	d
ITEM_HOGTIE	merc.h	1747;"	d
ITEM_HOLD	merc.h	1843;"	d
ITEM_HUM	merc.h	1761;"	d
ITEM_INVENTORY	merc.h	1773;"	d
ITEM_INVIS	merc.h	1765;"	d
ITEM_JAMMED	merc.h	1787;"	d
ITEM_JEWELRY	merc.h	1744;"	d
ITEM_JUKEBOX	merc.h	1745;"	d
ITEM_KEY	merc.h	1730;"	d
ITEM_LIGHT	merc.h	1717;"	d
ITEM_LOCK	merc.h	1763;"	d
ITEM_MAGIC	merc.h	1766;"	d
ITEM_MAP	merc.h	1739;"	d
ITEM_MELT_DROP	merc.h	1780;"	d
ITEM_MONEY	merc.h	1732;"	d
ITEM_MOTTLED_HERB	merc.h	1752;"	d
ITEM_NODROP	merc.h	1767;"	d
ITEM_NOLOCATE	merc.h	1779;"	d
ITEM_NONMETAL	merc.h	1778;"	d
ITEM_NOPURGE	merc.h	1774;"	d
ITEM_NOREMOVE	merc.h	1772;"	d
ITEM_NOUNCURSE	merc.h	1785;"	d
ITEM_NO_EXTRACT	merc.h	1792;"	d
ITEM_NO_LORE	merc.h	1777;"	d
ITEM_NO_SAC	merc.h	1844;"	d
ITEM_ONE_USE	merc.h	1788;"	d
ITEM_PILL	merc.h	1737;"	d
ITEM_PORTAL	merc.h	1740;"	d
ITEM_POTION	merc.h	1724;"	d
ITEM_PROTECT	merc.h	1738;"	d
ITEM_QUESTEQ	merc.h	1793;"	d
ITEM_RANDOM	merc.h	1783;"	d
ITEM_RANDOM_CASTER	merc.h	1795;"	d
ITEM_RANDOM_PHYSICAL	merc.h	1794;"	d
ITEM_RED_HERB	merc.h	1751;"	d
ITEM_REMORT	merc.h	1789;"	d
ITEM_ROOM_KEY	merc.h	1742;"	d
ITEM_ROT_DEATH	merc.h	1775;"	d
ITEM_SCROLL	merc.h	1718;"	d
ITEM_SELL_EXTRACT	merc.h	1782;"	d
ITEM_SILVER_HERB	merc.h	1749;"	d
ITEM_STAFF	merc.h	1720;"	d
ITEM_STICKY	merc.h	1786;"	d
ITEM_TAKE	merc.h	1829;"	d
ITEM_TRANSLUCENT	merc.h	1846;"	d
ITEM_TRAPPED	merc.h	1790;"	d
ITEM_TRASH	merc.h	1727;"	d
ITEM_TREASURE	merc.h	1722;"	d
ITEM_VIS_DEATH	merc.h	1776;"	d
ITEM_WAND	merc.h	1719;"	d
ITEM_WARP_STONE	merc.h	1741;"	d
ITEM_WEAPON	merc.h	1721;"	d
ITEM_WEAR_ABOUT	merc.h	1839;"	d
ITEM_WEAR_ARMS	merc.h	1837;"	d
ITEM_WEAR_FEET	merc.h	1835;"	d
ITEM_WEAR_FINGER	merc.h	1830;"	d
ITEM_WEAR_FLOAT	merc.h	1845;"	d
ITEM_WEAR_HANDS	merc.h	1836;"	d
ITEM_WEAR_HEAD	merc.h	1833;"	d
ITEM_WEAR_LEGS	merc.h	1834;"	d
ITEM_WEAR_NECK	merc.h	1831;"	d
ITEM_WEAR_SHIELD	merc.h	1838;"	d
ITEM_WEAR_TORSO	merc.h	1832;"	d
ITEM_WEAR_WAIST	merc.h	1840;"	d
ITEM_WEAR_WRIST	merc.h	1841;"	d
ITEM_WIELD	merc.h	1842;"	d
I_BIT	merc.h	3770;"	d
I_IS_SET	merc.h	3774;"	d
I_IS_SET	merc.h	3779;"	d
I_REMOVE_BIT	merc.h	3773;"	d
I_REMOVE_BIT	merc.h	3778;"	d
I_SET_BIT	merc.h	3772;"	d
I_SET_BIT	merc.h	3777;"	d
I_TOGGLE_BIT	merc.h	3775;"	d
I_TOGGLE_BIT	merc.h	3780;"	d
InfoMessage	protocol.c	/^static void InfoMessage( descriptor_t *apDescriptor, const char *apData )$/;"	f	file:
IsNumber	protocol.c	/^static bool_t IsNumber( const char *apString )$/;"	f	file:
IsValidColour	protocol.c	/^static bool_t IsValidColour( const char *apArgument )$/;"	f	file:
J	merc.h	1145;"	d
K	merc.h	1146;"	d
KEY	auth.c	167;"	d	file:
KEY	auth.c	170;"	d	file:
KEY	bsave.c	1371;"	d	file:
KEY	bsave.c	1374;"	d	file:
KEY	clan.c	26;"	d	file:
KEY	clan.c	29;"	d	file:
KEY	db.c	1015;"	d	file:
KEY	db.c	1018;"	d	file:
KEY	db2.c	361;"	d	file:
KEY	db2.c	563;"	d	file:
KEY	religion.c	49;"	d	file:
KEY	religion.c	52;"	d	file:
KEYF	bsave.c	1384;"	d	file:
KEYS	bsave.c	1378;"	d	file:
KEYS	bsave.c	1381;"	d	file:
KEYS	religion.c	56;"	d	file:
KEYS	religion.c	59;"	d	file:
KILL_DATA	merc.h	/^typedef struct  kill_data        KILL_DATA;$/;"	t	typeref:struct:kill_data
L	merc.h	1147;"	d
L1	merc.h	315;"	d
L2	merc.h	316;"	d
L3	merc.h	317;"	d
L4	merc.h	318;"	d
L5	merc.h	319;"	d
L6	merc.h	320;"	d
L7	merc.h	321;"	d
L8	merc.h	322;"	d
L9	merc.h	323;"	d
LAG_FREE	merc.h	33;"	d
LBOARD_BHD	merc.h	2320;"	d
LBOARD_EXPL	merc.h	2323;"	d
LBOARD_FILE	merc.h	4123;"	d
LBOARD_LEVEL	merc.h	2325;"	d
LBOARD_MKILL	merc.h	2318;"	d
LBOARD_PKILL	merc.h	2326;"	d
LBOARD_QCOMP	merc.h	2319;"	d
LBOARD_QFAIL	merc.h	2324;"	d
LBOARD_QPNT	merc.h	2321;"	d
LBOARD_RESULT_FILE	merc.h	4124;"	d
LBOARD_WKILL	merc.h	2322;"	d
LEVEL_HERO	merc.h	257;"	d
LEVEL_IMMORTAL	merc.h	256;"	d
LEVEL_MIN_HERO	merc.h	258;"	d
LEVEL_UNAUTHED	merc.h	259;"	d
LFUN	lua_arclib.c	1116;"	d	file:
LIGHT_BRIGHT	handler.c	3447;"	d	file:
LIGHT_DARK	handler.c	3444;"	d	file:
LIGHT_GLOW	handler.c	3446;"	d	file:
LIGHT_NORMAL	handler.c	3445;"	d	file:
LIQ_WATER	merc.h	2789;"	d
LOADSCRIPT_VNUM	lua_main.h	14;"	d
LOADTABLE_FUNCTION	lua_main.h	10;"	d
LOAD_COLOUR	bsave.c	106;"	d	file:
LOG_ALWAYS	interp.c	51;"	d	file:
LOG_NEVER	interp.c	52;"	d	file:
LOG_NORMAL	interp.c	50;"	d	file:
LOWER	merc.h	3761;"	d
LOWER_MASK	mt19937ar.c	51;"	d	file:
LUA_ARCLIB_H	lua_arclib.h	2;"	d
LUA_DIR	merc.h	4099;"	d
LUA_EXTRA_VAL	lua_arclib.h	/^} LUA_EXTRA_VAL;$/;"	t	typeref:struct:lua_extra_val
LUA_LOOP_CHECK_INCREMENT	lua_main.c	18;"	d	file:
LUA_LOOP_CHECK_MAX_CNT	lua_main.c	17;"	d	file:
LUA_MAIN_H	lua_main.h	2;"	d
LUA_OBJ_TYPE	lua_arclib.h	/^} LUA_OBJ_TYPE;$/;"	t	typeref:struct:lua_obj_type
LUA_PROP_TYPE	lua_arclib.c	/^} LUA_PROP_TYPE;$/;"	t	typeref:struct:lua_prop_type	file:
LUA_SCRIPTER	lua_scripting.c	/^} LUA_SCRIPTER; $/;"	t	typeref:struct:lua_scripter	file:
LUA_SCRIPTING_H	lua_scripting.h	2;"	d
LUA_STARTUP	merc.h	4130;"	d
LVL_STAT_AC_EXOTIC	olc_act.c	5750;"	d	file:
LVL_STAT_AC_WEAPON	olc_act.c	5749;"	d	file:
LVL_STAT_DAM_DICE_BONUS	olc_act.c	5748;"	d	file:
LVL_STAT_DAM_DICE_NUMBER	olc_act.c	5746;"	d	file:
LVL_STAT_DAM_DICE_TYPE	olc_act.c	5747;"	d	file:
LVL_STAT_HP_DICE_BONUS	olc_act.c	5745;"	d	file:
LVL_STAT_HP_DICE_NUMBER	olc_act.c	5743;"	d	file:
LVL_STAT_HP_DICE_TYPE	olc_act.c	5744;"	d	file:
LVL_STAT_NR	olc_act.c	5751;"	d	file:
L_FLAGS	makefile	/^L_FLAGS =  $(PROF) -llua -ldl$/;"	m
L_cancel	lua_arclib.c	/^int L_cancel (lua_State *LS)$/;"	f
L_charloadtest	lua_main.c	/^static int L_charloadtest( lua_State *LS )$/;"	f	file:
L_delay	lua_arclib.c	/^int L_delay (lua_State *LS)$/;"	f
L_dump_prog	lua_main.c	/^static int L_dump_prog( lua_State *LS)$/;"	f	file:
L_load_comm_histories	playback.c	/^static int L_load_comm_histories( lua_State *LS )$/;"	f	file:
L_rundelay	lua_arclib.c	/^static int L_rundelay( lua_State *LS)$/;"	f	file:
L_rvnum	lua_arclib.c	/^static int L_rvnum( lua_State *LS, AREA_DATA *area )$/;"	f	file:
L_save_comm_histories	playback.c	/^static int L_save_comm_histories( lua_State *LS )$/;"	f	file:
L_save_mudconfig	lua_main.c	/^static int L_save_mudconfig(lua_State *LS)$/;"	f	file:
L_wizhelp	lua_main.c	/^static int L_wizhelp( LS )$/;"	f	file:
M	merc.h	1148;"	d
M	mt19937ar.c	48;"	d	file:
MAGENTA	merc.h	358;"	d
MAGIC_NUM	db.h	45;"	d
MATRIX_A	mt19937ar.c	49;"	d	file:
MAX_ALIAS	merc.h	237;"	d
MAX_AREAS	db.c	4325;"	d	file:
MAX_AREA_CLONE	merc.h	248;"	d
MAX_ARROWS	merc.h	254;"	d
MAX_BLOCK_SIZE	comm.c	1677;"	d	file:
MAX_BLOCK_SIZE	comm.c	1703;"	d	file:
MAX_BOARD	merc.h	240;"	d
MAX_BRANCH	hunt.c	267;"	d	file:
MAX_BUF	recycle.h	42;"	d
MAX_BUF_INDEX	comm.c	1834;"	d	file:
MAX_BUF_LIST	recycle.h	43;"	d
MAX_CALL	buffer.c	174;"	d	file:
MAX_CALL	buffer.c	204;"	d	file:
MAX_CALL_LEVEL	mob_prog.c	1137;"	d	file:
MAX_CHAMBER	remort.c	50;"	d	file:
MAX_CLAN	merc.h	241;"	d
MAX_CLAN_RANK	merc.h	242;"	d
MAX_CLASS	merc.h	238;"	d
MAX_COMM_HISTORY	playback.c	21;"	d	file:
MAX_CON_STATE	merc.h	735;"	d
MAX_CP	merc.h	252;"	d
MAX_CURRSTAT	merc.h	847;"	d
MAX_DAMAGE_MESSAGE	merc.h	247;"	d
MAX_DAM_TYPE	olc_act.c	6777;"	d	file:
MAX_DIE	olc_act.c	5230;"	d	file:
MAX_DIE	olc_act.c	5235;"	d	file:
MAX_DIR	merc.h	4677;"	d
MAX_EXT_STATS	merc.h	846;"	d
MAX_FORGET	merc.h	246;"	d
MAX_GROUP	merc.h	234;"	d
MAX_GUILD	merc.h	844;"	d
MAX_HERB	alchemy.c	183;"	d	file:
MAX_INPUT_LENGTH	merc.h	219;"	d
MAX_IN_GROUP	merc.h	235;"	d
MAX_IN_MASTERY	merc.h	236;"	d
MAX_JAIL_ROOM	merc.h	245;"	d
MAX_KEY_HASH	merc.h	216;"	d
MAX_LBOARD	merc.h	2327;"	d
MAX_LEVEL	merc.h	249;"	d
MAX_LINE_COUNT	comm.c	377;"	d	file:
MAX_LINE_LENGTH	merc.h	980;"	d
MAX_LUA_SECURITY	lua_main.h	15;"	d
MAX_MASTERY_GROUP	skills.c	554;"	d	file:
MAX_MASTERY_GROUP	skills.c	567;"	d	file:
MAX_MATCH	grep.c	208;"	d	file:
MAX_MATERIALS	crafting.c	16;"	d	file:
MAX_MEM_LIST	merc.h	221;"	d
MAX_MOB	olc.h	81;"	d
MAX_MORPH_RACE	merc.h	3979;"	d
MAX_MSDP_SIZE	protocol.h	88;"	d
MAX_MSSP_BUFFER	protocol.h	68;"	d
MAX_NEST	bsave.c	91;"	d	file:
MAX_NESTED_LEVEL	mob_prog.c	1133;"	d	file:
MAX_NOTE_TEXT	merc.h	982;"	d
MAX_OUTPUT_BUFFER	protocol.h	67;"	d
MAX_PC_RACE	merc.h	239;"	d
MAX_PENALTY	merc.h	243;"	d
MAX_PENALTY_SEVERITY	merc.h	244;"	d
MAX_PERM_BLOCK	db.c	509;"	d	file:
MAX_PERS_HISTORY	playback.c	25;"	d	file:
MAX_POSE	act_comm.c	1469;"	d	file:
MAX_PRIEST	religion.h	16;"	d
MAX_PROMPT_LENGTH	act_info.c	1282;"	d	file:
MAX_PROTOCOL_BUFFER	protocol.h	65;"	d
MAX_QUOTES	merc.h	251;"	d
MAX_RATING	olc_act.c	3739;"	d	file:
MAX_REMORT	merc.h	286;"	d
MAX_REMORT	merc.h	288;"	d
MAX_SCRIPT_LENGTH	merc.h	218;"	d
MAX_SKILL	merc.h	233;"	d
MAX_STATS	merc.h	845;"	d
MAX_STORAGE_BOX	merc.h	250;"	d
MAX_STRING	db.c	508;"	d	file:
MAX_STRING_LENGTH	merc.h	217;"	d
MAX_STRING_RING_BUF	merc.h	470;"	d
MAX_STR_DUP_KEY	db.c	4204;"	d	file:
MAX_TATTOO	tattoo.c	109;"	d	file:
MAX_TRADE	merc.h	825;"	d
MAX_VARIABLE_LENGTH	protocol.h	66;"	d
MAX_WEAR	merc.h	2101;"	d
MAX_WEAR_LOCATIONS	redit-ilab.c	38;"	d	file:
MAX_WHO	act_info.c	2659;"	d	file:
MAX_WHO	act_info.c	2896;"	d	file:
MAX_WHO_FILE	merc.h	4129;"	d
MCOPY	db2.c	270;"	d	file:
MCOPY	db2.c	355;"	d	file:
MCOPY_FLAGS	db2.c	271;"	d	file:
MCOPY_FLAGS	db2.c	356;"	d	file:
MD	recycle.h	118;"	d
MD	recycle.h	124;"	d
MEDIT	olc_act.c	/^MEDIT ( medit_addmprog )$/;"	f
MEDIT	olc_act.c	/^MEDIT ( medit_delmprog )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_act )          \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_affect )      \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_align )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_armor )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_create )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_damage )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_damtype )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_delete )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_desc )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_form )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_group )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_hitpoints )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_hitroll )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_imm )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_level )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_long )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_mana )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_move )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_name )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_notes)$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_off )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_part )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_position )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_race )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_res )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_saves )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_sex )          \/* Moved out of medit() due to naming conflicts -- Hugin *\/$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_shop )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_short )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_show )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_size )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_spec )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_stance )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_vuln )$/;"	f
MEDIT	olc_act.c	/^MEDIT( medit_wealth )$/;"	f
MEDIT	olc_act.c	86;"	d	file:
MEMFILE	merc.h	/^typedef struct mem_file_type MEMFILE;$/;"	t	typeref:struct:mem_file_type
MEM_AFRAID	merc.h	2432;"	d
MEM_CUSTOMER	merc.h	2429;"	d
MEM_DATA	merc.h	/^typedef struct  mem_data         MEM_DATA;$/;"	t	typeref:struct:mem_data
MEM_HOSTILE	merc.h	2431;"	d
MEM_SELLER	merc.h	2430;"	d
META_MAGIC_CHAIN	merc.h	4069;"	d
META_MAGIC_EMPOWER	merc.h	4067;"	d
META_MAGIC_EXTEND	merc.h	4066;"	d
META_MAGIC_QUICKEN	merc.h	4068;"	d
METH	lua_arclib.c	50;"	d	file:
MID	merc.h	4143;"	d
MID	merc.h	4649;"	d
MIL	merc.h	226;"	d
MINUTE	merc.h	275;"	d
MIN_MAX_ROLLED	stats.c	/^typedef struct min_max_rolled MIN_MAX_ROLLED;$/;"	t	typeref:struct:min_max_rolled	file:
MIX_DAMAGE	merc.h	1338;"	d
MKTIME	makefile	/^MKTIME	:= \\""$(shell date)"\\"$/;"	m
ML	merc.h	314;"	d
MOBPROTO_act	lua_arclib.c	/^static int MOBPROTO_act (lua_State *LS)$/;"	f	file:
MOBPROTO_affected	lua_arclib.c	/^static int MOBPROTO_affected (lua_State *LS)$/;"	f	file:
MOBPROTO_get_area	lua_arclib.c	/^static int MOBPROTO_get_area (lua_State *LS)$/;"	f	file:
MOBPROTO_get_mtrigs	lua_arclib.c	/^static int MOBPROTO_get_mtrigs ( lua_State *LS)$/;"	f	file:
MOBPROTO_get_shop	lua_arclib.c	/^static int MOBPROTO_get_shop ( lua_State *LS)$/;"	f	file:
MOBPROTO_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE MOBPROTO_get_table [] =$/;"	v	file:
MOBPROTO_immune	lua_arclib.c	/^static int MOBPROTO_immune (lua_State *LS)$/;"	f	file:
MOBPROTO_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE MOBPROTO_method_table [] =$/;"	v	file:
MOBPROTO_offensive	lua_arclib.c	/^static int MOBPROTO_offensive (lua_State *LS)$/;"	f	file:
MOBPROTO_resist	lua_arclib.c	/^static int MOBPROTO_resist (lua_State *LS)$/;"	f	file:
MOBPROTO_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE MOBPROTO_set_table [] =$/;"	v	file:
MOBPROTO_vuln	lua_arclib.c	/^static int MOBPROTO_vuln (lua_State *LS)$/;"	f	file:
MOB_ARG	lua_scripting.c	54;"	d	file:
MOB_INDEX_DATA	merc.h	/^typedef struct  mob_index_data   MOB_INDEX_DATA;$/;"	t	typeref:struct:mob_index_data
MOB_INDEX_DATA_OLD	merc.h	/^typedef struct  mob_index_data_old MOB_INDEX_DATA_OLD;$/;"	t	typeref:struct:mob_index_data_old
MOB_VNUM_BASIC_APPARITION	merc.h	1072;"	d
MOB_VNUM_BEAST	merc.h	1075;"	d
MOB_VNUM_CITYGUARD	merc.h	1060;"	d
MOB_VNUM_FIDO	merc.h	1059;"	d
MOB_VNUM_GHOST	merc.h	1070;"	d
MOB_VNUM_HOLY_APPARITION	merc.h	1073;"	d
MOB_VNUM_MEPHFISHTON	merc.h	1067;"	d
MOB_VNUM_PATROLMAN	merc.h	1061;"	d
MOB_VNUM_SIDEKICK	merc.h	1065;"	d
MOB_VNUM_SNAKE	merc.h	1068;"	d
MOB_VNUM_SPIRIT	merc.h	1071;"	d
MOB_VNUM_TREEGOLEM	merc.h	1066;"	d
MOB_VNUM_VAMPIRE	merc.h	1069;"	d
MOB_VNUM_WATER_ELEMENTAL	merc.h	1074;"	d
MOB_VNUM_ZOMBIE	merc.h	1062;"	d
MOBtrigger	comm.c	/^bool            MOBtrigger = TRUE;  \/* act() switch                 *\/$/;"	v
MONTH	merc.h	279;"	d
MORPH_NAGA_HUMAN	merc.h	3981;"	d
MORPH_NAGA_SERPENT	merc.h	3980;"	d
MORPH_WOLFMAN	merc.h	3982;"	d
MPEDIT	olc_mpcode.c	/^MPEDIT (mpedit_create)$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT (mpedit_delete)$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT( mpedit_if )$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT( mpedit_mob )$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT(mpedit_code)$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT(mpedit_lua)$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT(mpedit_security)$/;"	f
MPEDIT	olc_mpcode.c	/^MPEDIT(mpedit_show)$/;"	f
MPEDIT	olc_mpcode.c	19;"	d	file:
MPGET	lua_arclib.c	76;"	d	file:
MPGETBOOL	lua_arclib.c	6507;"	d	file:
MPGETINT	lua_arclib.c	6500;"	d	file:
MPGETSTR	lua_arclib.c	6493;"	d	file:
MPMETH	lua_arclib.c	78;"	d	file:
MPROG_RETURN	mob_prog.c	1138;"	d	file:
MPROG_RETURN	mob_prog.c	1410;"	d	file:
MPSET	lua_arclib.c	77;"	d	file:
MSDPFlush	protocol.c	/^void MSDPFlush( descriptor_t *apDescriptor, variable_t aMSDP )$/;"	f
MSDPSend	protocol.c	/^void MSDPSend( descriptor_t *apDescriptor, variable_t aMSDP )$/;"	f
MSDPSendList	protocol.c	/^void MSDPSendList( descriptor_t *apDescriptor, const char *apVariable, const char *apValue )$/;"	f
MSDPSendPair	protocol.c	/^void MSDPSendPair( descriptor_t *apDescriptor, const char *apVariable, const char *apValue )$/;"	f
MSDPSetArray	protocol.c	/^void MSDPSetArray( descriptor_t *apDescriptor, variable_t aMSDP, const char *apValue )$/;"	f
MSDPSetNumber	protocol.c	/^void MSDPSetNumber( descriptor_t *apDescriptor, variable_t aMSDP, int aValue )$/;"	f
MSDPSetString	protocol.c	/^void MSDPSetString( descriptor_t *apDescriptor, variable_t aMSDP, const char *apValue )$/;"	f
MSDPSetTable	protocol.c	/^void MSDPSetTable( descriptor_t *apDescriptor, variable_t aMSDP, const char *apValue )$/;"	f
MSDPUpdate	protocol.c	/^void MSDPUpdate( descriptor_t *apDescriptor )$/;"	f
MSDP_ARRAY_CLOSE	protocol.h	87;"	d
MSDP_ARRAY_OPEN	protocol.h	86;"	d
MSDP_TABLE_CLOSE	protocol.h	85;"	d
MSDP_TABLE_OPEN	protocol.h	84;"	d
MSDP_VAL	protocol.h	83;"	d
MSDP_VAR	protocol.h	82;"	d
MSDP_t	protocol.h	/^} MSDP_t;$/;"	t	typeref:struct:__anon11
MSETANY	buildutil.c	1802;"	d	file:
MSETFUN	buildutil.c	/^MSETFUN( align )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( bounty )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( drunk )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( full )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( gold )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( group )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( hardcore )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( hp )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( hunger )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( hunt )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( killer )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( law )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( level )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( mana )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( move )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( namecolor )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( pkill )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( practice )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( ptitle )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( questpoints )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( race )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( security )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( sex )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( silver )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( thief )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( thirst )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( train )$/;"	f
MSETFUN	buildutil.c	/^MSETFUN( void )$/;"	f
MSETFUN	buildutil.c	1804;"	d	file:
MSETNONE	buildutil.c	1799;"	d	file:
MSETNPCONLY	buildutil.c	1801;"	d	file:
MSETPCONLY	buildutil.c	1800;"	d	file:
MSETSTAT	buildutil.c	/^MSETSTAT( str, STAT_STR)$/;"	f
MSETSTAT	buildutil.c	1820;"	d	file:
MSL	merc.h	225;"	d
MSSPSetPlayers	protocol.c	/^void MSSPSetPlayers( int aPlayers )$/;"	f
MSSP_VAL	protocol.h	91;"	d
MSSP_VAR	protocol.h	90;"	d
MSSP_t	protocol.h	/^} MSSP_t;$/;"	t	typeref:struct:__anon12
MUD_NAME	protocol.h	17;"	d
MULTI_MORPH	merc.h	3821;"	d
MXPCreateTag	protocol.c	/^const char *MXPCreateTag( descriptor_t *apDescriptor, const char *apTag )$/;"	f
MXPSendTag	protocol.c	/^void MXPSendTag( descriptor_t *apDescriptor, const char *apTag )$/;"	f
MatchString	protocol.c	/^static bool_t MatchString( const char *apFirst, const char *apSecond )$/;"	f	file:
Max	protocol.h	/^   int          Max;           \/* The maximum valid value or string length *\/$/;"	m	struct:__anon10
Min	protocol.h	/^   int          Min;           \/* The minimum valid value or string length *\/$/;"	m	struct:__anon10
N	merc.h	1149;"	d
N	mt19937ar.c	47;"	d	file:
ND	recycle.h	52;"	d
ND	recycle.h	55;"	d
NLRETURN	act_move.c	1335;"	d	file:
NLRETURN	act_move.c	1491;"	d	file:
NOCRYPT	makefile	/^NOCRYPT =$/;"	m
NOP	telnet.h	29;"	d
NORMAL	merc.h	363;"	d
NOTE_DATA	merc.h	/^typedef struct  note_data        NOTE_DATA;$/;"	t	typeref:struct:note_data
NOTE_DIR	merc.h	4097;"	d
NOT_AUTHED	merc.h	3868;"	d
NO_FLAG	merc.h	4678;"	d
NO_ID	tattoo.c	20;"	d	file:
NO_LOC	tattoo.c	19;"	d	file:
NO_MAX	special.c	87;"	d	file:
NO_SHORT_DESC	grep.c	231;"	d	file:
NPC_ACT	merc.h	3829;"	d
NPC_OFF	merc.h	3831;"	d
NTELOPTS	telnet.h	72;"	d
NUL	buffer.c	34;"	d	file:
NUL	redit-ilab.c	42;"	d	file:
NUMBER_IN_THE_RANGE	protocol.c	115;"	d	file:
NUMBER_READ_ONLY	protocol.c	112;"	d	file:
NUMBER_READ_ONLY_SET_TO	protocol.c	113;"	d	file:
NUM_APROG_ARGS	lua_scripting.c	77;"	d	file:
NUM_APROG_RESULTS	lua_scripting.c	81;"	d	file:
NUM_MPROG_ARGS	lua_scripting.c	55;"	d	file:
NUM_OPROG_ARGS	lua_scripting.c	67;"	d	file:
NUM_OPROG_RESULTS	lua_scripting.c	73;"	d	file:
NUM_RPROG_ARGS	lua_scripting.c	85;"	d	file:
NUM_RPROG_RESULTS	lua_scripting.c	93;"	d	file:
Negotiate	protocol.c	/^static void Negotiate( descriptor_t *apDescriptor )$/;"	f	file:
Negotiated	protocol.h	/^   bool_t    Negotiated[eNEGOTIATED_MAX];$/;"	m	struct:__anon13
O	merc.h	1150;"	d
OBJ1_ARG	lua_scripting.c	57;"	d	file:
OBJ2_ARG	lua_scripting.c	58;"	d	file:
OBJGET	lua_arclib.c	60;"	d	file:
OBJMETH	lua_arclib.c	62;"	d	file:
OBJPROTO_adjustdamage	lua_arclib.c	/^static int OBJPROTO_adjustdamage( lua_State *LS)$/;"	f	file:
OBJPROTO_extra	lua_arclib.c	/^static int OBJPROTO_extra( lua_State *LS)$/;"	f	file:
OBJPROTO_get_affects	lua_arclib.c	/^static int OBJPROTO_get_affects ( lua_State *LS)$/;"	f	file:
OBJPROTO_get_area	lua_arclib.c	/^static int OBJPROTO_get_area ( lua_State *LS )$/;"	f	file:
OBJPROTO_get_clan	lua_arclib.c	/^static int OBJPROTO_get_clan (lua_State *LS)$/;"	f	file:
OBJPROTO_get_clanrank	lua_arclib.c	/^static int OBJPROTO_get_clanrank (lua_State *LS)$/;"	f	file:
OBJPROTO_get_cost	lua_arclib.c	/^static int OBJPROTO_get_cost (lua_State *LS)$/;"	f	file:
OBJPROTO_get_damavg	lua_arclib.c	/^static int OBJPROTO_get_damavg( lua_State *LS )$/;"	f	file:
OBJPROTO_get_description	lua_arclib.c	/^static int OBJPROTO_get_description (lua_State *LS)$/;"	f	file:
OBJPROTO_get_ingame	lua_arclib.c	/^static int OBJPROTO_get_ingame ( lua_State *LS )$/;"	f	file:
OBJPROTO_get_level	lua_arclib.c	/^static int OBJPROTO_get_level (lua_State *LS)$/;"	f	file:
OBJPROTO_get_material	lua_arclib.c	/^static int OBJPROTO_get_material (lua_State *LS)$/;"	f	file:
OBJPROTO_get_name	lua_arclib.c	/^static int OBJPROTO_get_name (lua_State *LS)$/;"	f	file:
OBJPROTO_get_otrigs	lua_arclib.c	/^static int OBJPROTO_get_otrigs ( lua_State *LS)$/;"	f	file:
OBJPROTO_get_otype	lua_arclib.c	/^static int OBJPROTO_get_otype (lua_State *LS)$/;"	f	file:
OBJPROTO_get_rating	lua_arclib.c	/^static int OBJPROTO_get_rating ( lua_State *LS)$/;"	f	file:
OBJPROTO_get_shortdescr	lua_arclib.c	/^static int OBJPROTO_get_shortdescr (lua_State *LS)$/;"	f	file:
OBJPROTO_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE OBJPROTO_get_table [] =$/;"	v	file:
OBJPROTO_get_vnum	lua_arclib.c	/^static int OBJPROTO_get_vnum (lua_State *LS)$/;"	f	file:
OBJPROTO_get_weight	lua_arclib.c	/^static int OBJPROTO_get_weight (lua_State *LS)$/;"	f	file:
OBJPROTO_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE OBJPROTO_method_table [] =$/;"	v	file:
OBJPROTO_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE OBJPROTO_set_table [] =$/;"	v	file:
OBJPROTO_wear	lua_arclib.c	/^static int OBJPROTO_wear( lua_State *LS)$/;"	f	file:
OBJSET	lua_arclib.c	61;"	d	file:
OBJVGETINT	lua_arclib.c	1755;"	d	file:
OBJVGETSTR	lua_arclib.c	1765;"	d	file:
OBJVGT	lua_arclib.c	1740;"	d	file:
OBJVIF	lua_arclib.c	2047;"	d	file:
OBJVM	lua_arclib.c	2035;"	d	file:
OBJ_ARG	lua_scripting.c	66;"	d	file:
OBJ_CHECK_FUN	merc.h	/^typedef bool OBJ_CHECK_FUN( OBJ_DATA *obj );$/;"	t
OBJ_DATA	merc.h	/^typedef struct  obj_data         OBJ_DATA;$/;"	t	typeref:struct:obj_data
OBJ_INDEX_DATA	merc.h	/^typedef struct  obj_index_data   OBJ_INDEX_DATA;$/;"	t	typeref:struct:obj_index_data
OBJ_STAT_AC_EXOTIC	olc_act.c	5012;"	d	file:
OBJ_STAT_AC_WEAPON	olc_act.c	5011;"	d	file:
OBJ_STAT_DROP_COST	olc_act.c	5014;"	d	file:
OBJ_STAT_NR	olc_act.c	5015;"	d	file:
OBJ_STAT_SHOP_COST	olc_act.c	5013;"	d	file:
OBJ_VNUM_ARROWS	merc.h	1652;"	d
OBJ_VNUM_BIG_FIRE	merc.h	1676;"	d
OBJ_VNUM_BIG_FISH	merc.h	1679;"	d
OBJ_VNUM_BLOOD	merc.h	1685;"	d
OBJ_VNUM_BOMB	merc.h	1671;"	d
OBJ_VNUM_BOOT	merc.h	1681;"	d
OBJ_VNUM_BRAINS	merc.h	1662;"	d
OBJ_VNUM_COINS	merc.h	1650;"	d
OBJ_VNUM_CORPSE_NPC	merc.h	1655;"	d
OBJ_VNUM_CORPSE_PC	merc.h	1656;"	d
OBJ_VNUM_DISC	merc.h	1667;"	d
OBJ_VNUM_DIVINE_BALL	merc.h	1670;"	d
OBJ_VNUM_DUMMY	merc.h	1674;"	d
OBJ_VNUM_FIRE	merc.h	1675;"	d
OBJ_VNUM_FISH	merc.h	1678;"	d
OBJ_VNUM_GOLD_ONE	merc.h	1647;"	d
OBJ_VNUM_GOLD_SOME	merc.h	1648;"	d
OBJ_VNUM_GOODBERRY	merc.h	1710;"	d
OBJ_VNUM_GRUB	merc.h	1669;"	d
OBJ_VNUM_GUTS	merc.h	1661;"	d
OBJ_VNUM_HUGE_FIRE	merc.h	1677;"	d
OBJ_VNUM_HUGE_FISH	merc.h	1680;"	d
OBJ_VNUM_LIGHT_BALL	merc.h	1665;"	d
OBJ_VNUM_MAP	merc.h	1706;"	d
OBJ_VNUM_MOB_WEAPON	merc.h	1684;"	d
OBJ_VNUM_MUSHROOM	merc.h	1664;"	d
OBJ_VNUM_NEWBIE_GUIDE	merc.h	1703;"	d
OBJ_VNUM_PIT	merc.h	1686;"	d
OBJ_VNUM_PORTAL	merc.h	1668;"	d
OBJ_VNUM_RAFT	merc.h	1682;"	d
OBJ_VNUM_ROSE	merc.h	1683;"	d
OBJ_VNUM_SCHOOL_AXE	merc.h	1693;"	d
OBJ_VNUM_SCHOOL_BANNER	merc.h	1702;"	d
OBJ_VNUM_SCHOOL_BOW	merc.h	1698;"	d
OBJ_VNUM_SCHOOL_DAGGER	merc.h	1689;"	d
OBJ_VNUM_SCHOOL_FLAIL	merc.h	1694;"	d
OBJ_VNUM_SCHOOL_GUN	merc.h	1697;"	d
OBJ_VNUM_SCHOOL_MACE	merc.h	1688;"	d
OBJ_VNUM_SCHOOL_POLEARM	merc.h	1696;"	d
OBJ_VNUM_SCHOOL_SHIELD	merc.h	1701;"	d
OBJ_VNUM_SCHOOL_SPEAR	merc.h	1691;"	d
OBJ_VNUM_SCHOOL_STAFF	merc.h	1692;"	d
OBJ_VNUM_SCHOOL_SWORD	merc.h	1690;"	d
OBJ_VNUM_SCHOOL_VEST	merc.h	1700;"	d
OBJ_VNUM_SCHOOL_WHIP	merc.h	1695;"	d
OBJ_VNUM_SCROLL	merc.h	1653;"	d
OBJ_VNUM_SEVERED_HEAD	merc.h	1657;"	d
OBJ_VNUM_SILVER_ONE	merc.h	1646;"	d
OBJ_VNUM_SILVER_SOME	merc.h	1649;"	d
OBJ_VNUM_SIVA_WEAPON	merc.h	1709;"	d
OBJ_VNUM_SLICED_ARM	merc.h	1659;"	d
OBJ_VNUM_SLICED_LEG	merc.h	1660;"	d
OBJ_VNUM_SPRING	merc.h	1666;"	d
OBJ_VNUM_STORAGE_BOX	merc.h	1711;"	d
OBJ_VNUM_TORCH	merc.h	1673;"	d
OBJ_VNUM_TORN_HEART	merc.h	1658;"	d
OBJ_VNUM_TRAILMIX	merc.h	1672;"	d
OBJ_VNUM_WHISTLE	merc.h	1708;"	d
OBJ_cancel	lua_arclib.c	/^static int OBJ_cancel (lua_State *LS)$/;"	f	file:
OBJ_clone	lua_arclib.c	/^static int OBJ_clone( lua_State *LS)$/;"	f	file:
OBJ_delay	lua_arclib.c	/^static int OBJ_delay (lua_State *LS)$/;"	f	file:
OBJ_destroy	lua_arclib.c	/^static int OBJ_destroy( lua_State *LS)$/;"	f	file:
OBJ_echo	lua_arclib.c	/^static int OBJ_echo( lua_State *LS)$/;"	f	file:
OBJ_extra	lua_arclib.c	/^static int OBJ_extra( lua_State *LS)$/;"	f	file:
OBJ_get_affects	lua_arclib.c	/^static int OBJ_get_affects ( lua_State *LS)$/;"	f	file:
OBJ_get_carriedby	lua_arclib.c	/^static int OBJ_get_carriedby (lua_State *LS)$/;"	f	file:
OBJ_get_clan	lua_arclib.c	/^static int OBJ_get_clan (lua_State *LS)$/;"	f	file:
OBJ_get_clanrank	lua_arclib.c	/^static int OBJ_get_clanrank (lua_State *LS)$/;"	f	file:
OBJ_get_contents	lua_arclib.c	/^static int OBJ_get_contents (lua_State *LS)$/;"	f	file:
OBJ_get_cost	lua_arclib.c	/^static int OBJ_get_cost (lua_State *LS)$/;"	f	file:
OBJ_get_damavg	lua_arclib.c	/^static int OBJ_get_damavg( lua_State *LS )$/;"	f	file:
OBJ_get_description	lua_arclib.c	/^static int OBJ_get_description (lua_State *LS)$/;"	f	file:
OBJ_get_ingame	lua_arclib.c	/^static int OBJ_get_ingame (lua_State *LS)$/;"	f	file:
OBJ_get_inobj	lua_arclib.c	/^static int OBJ_get_inobj (lua_State *LS)$/;"	f	file:
OBJ_get_level	lua_arclib.c	/^static int OBJ_get_level (lua_State *LS)$/;"	f	file:
OBJ_get_material	lua_arclib.c	/^static int OBJ_get_material (lua_State *LS)$/;"	f	file:
OBJ_get_name	lua_arclib.c	/^static int OBJ_get_name (lua_State *LS)$/;"	f	file:
OBJ_get_otype	lua_arclib.c	/^static int OBJ_get_otype (lua_State *LS)$/;"	f	file:
OBJ_get_owner	lua_arclib.c	/^static int OBJ_get_owner (lua_State *LS)$/;"	f	file:
OBJ_get_proto	lua_arclib.c	/^static int OBJ_get_proto (lua_State *LS)$/;"	f	file:
OBJ_get_room	lua_arclib.c	/^static int OBJ_get_room (lua_State *LS)$/;"	f	file:
OBJ_get_shortdescr	lua_arclib.c	/^static int OBJ_get_shortdescr (lua_State *LS)$/;"	f	file:
OBJ_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE OBJ_get_table [] =$/;"	v	file:
OBJ_get_timer	lua_arclib.c	/^static int OBJ_get_timer (lua_State *LS)$/;"	f	file:
OBJ_get_v0	lua_arclib.c	/^static int OBJ_get_v0 (lua_State *LS)$/;"	f	file:
OBJ_get_v1	lua_arclib.c	/^static int OBJ_get_v1 (lua_State *LS)$/;"	f	file:
OBJ_get_v2	lua_arclib.c	/^static int OBJ_get_v2 (lua_State *LS)$/;"	f	file:
OBJ_get_v3	lua_arclib.c	/^static int OBJ_get_v3 (lua_State *LS)$/;"	f	file:
OBJ_get_v4	lua_arclib.c	/^static int OBJ_get_v4 (lua_State *LS)$/;"	f	file:
OBJ_get_vnum	lua_arclib.c	/^static int OBJ_get_vnum (lua_State *LS)$/;"	f	file:
OBJ_get_wearlocation	lua_arclib.c	/^static int OBJ_get_wearlocation (lua_State *LS)$/;"	f	file:
OBJ_get_weight	lua_arclib.c	/^static int OBJ_get_weight (lua_State *LS)$/;"	f	file:
OBJ_getval	lua_arclib.c	/^static int OBJ_getval (lua_State *LS)$/;"	f	file:
OBJ_loadfunction	lua_arclib.c	/^static int OBJ_loadfunction (lua_State *LS)$/;"	f	file:
OBJ_loadprog	lua_arclib.c	/^static int OBJ_loadprog (lua_State *LS)$/;"	f	file:
OBJ_loadscript	lua_arclib.c	/^static int OBJ_loadscript (lua_State *LS)$/;"	f	file:
OBJ_loadstring	lua_arclib.c	/^static int OBJ_loadstring (lua_State *LS)$/;"	f	file:
OBJ_loadtbl	lua_arclib.c	/^static int OBJ_loadtbl (lua_State *LS)$/;"	f	file:
OBJ_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE OBJ_method_table [] =$/;"	v	file:
OBJ_oload	lua_arclib.c	/^static int OBJ_oload (lua_State *LS)$/;"	f	file:
OBJ_rvnum	lua_arclib.c	/^static int OBJ_rvnum ( lua_State *LS)$/;"	f	file:
OBJ_savetbl	lua_arclib.c	/^static int OBJ_savetbl (lua_State *LS)$/;"	f	file:
OBJ_set_carriedby	lua_arclib.c	/^static int OBJ_set_carriedby (lua_State *LS)$/;"	f	file:
OBJ_set_description	lua_arclib.c	/^static int OBJ_set_description (lua_State *LS)$/;"	f	file:
OBJ_set_level	lua_arclib.c	/^static int OBJ_set_level (lua_State *LS)$/;"	f	file:
OBJ_set_material	lua_arclib.c	/^static int OBJ_set_material (lua_State *LS)$/;"	f	file:
OBJ_set_name	lua_arclib.c	/^static int OBJ_set_name (lua_State *LS)$/;"	f	file:
OBJ_set_owner	lua_arclib.c	/^static int OBJ_set_owner (lua_State *LS)$/;"	f	file:
OBJ_set_room	lua_arclib.c	/^static int OBJ_set_room (lua_State *LS)$/;"	f	file:
OBJ_set_shortdescr	lua_arclib.c	/^static int OBJ_set_shortdescr (lua_State *LS)$/;"	f	file:
OBJ_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE OBJ_set_table [] =$/;"	v	file:
OBJ_set_weight	lua_arclib.c	/^static int OBJ_set_weight (lua_State *LS)$/;"	f	file:
OBJ_setval	lua_arclib.c	/^static int OBJ_setval (lua_State *LS)$/;"	f	file:
OBJ_tprint	lua_arclib.c	/^static int OBJ_tprint ( lua_State *LS)$/;"	f	file:
OBJ_wear	lua_arclib.c	/^static int OBJ_wear( lua_State *LS)$/;"	f	file:
OD	act_obj.c	52;"	d	file:
OD	act_obj.c	64;"	d	file:
OD	merc.h	4144;"	d
OD	merc.h	4650;"	d
OD	recycle.h	101;"	d
OD	recycle.h	104;"	d
OEDIT	olc_act.c	/^OEDIT ( oedit_addoprog )$/;"	f
OEDIT	olc_act.c	/^OEDIT ( oedit_deloprog )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_addaffect )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_addapply )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_adjust )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_clan )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_combine )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_condition )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_cost )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_create )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_delaffect )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_delete )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_ed )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_extra )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_level )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_long )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_material )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_name )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_notes)$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_rank )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_rating )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_short )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_show )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_type )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value0 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value1 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value2 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value3 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_value4 )$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_wear )      \/* Moved out of oedit() due to naming conflicts -- Hugin *\/$/;"	f
OEDIT	olc_act.c	/^OEDIT( oedit_weight )$/;"	f
OEDIT	olc_act.c	85;"	d	file:
OFFHAND_ATTACK	fight.c	1179;"	d	file:
OFFHAND_ATTACK	fight.c	1219;"	d	file:
OFF_AREA_ATTACK	merc.h	1345;"	d
OFF_ARMED	merc.h	1368;"	d
OFF_BACKSTAB	merc.h	1346;"	d
OFF_BASH	merc.h	1347;"	d
OFF_BERSERK	merc.h	1348;"	d
OFF_CIRCLE	merc.h	1369;"	d
OFF_CRUSH	merc.h	1359;"	d
OFF_DISARM	merc.h	1349;"	d
OFF_DISTRACT	merc.h	1366;"	d
OFF_DODGE	merc.h	1350;"	d
OFF_FADE	merc.h	1351;"	d
OFF_FAST	merc.h	1352;"	d
OFF_HUNT	merc.h	1367;"	d
OFF_KICK	merc.h	1353;"	d
OFF_KICK_DIRT	merc.h	1354;"	d
OFF_PARRY	merc.h	1355;"	d
OFF_PETRIFY	merc.h	1370;"	d
OFF_RESCUE	merc.h	1356;"	d
OFF_TAIL	merc.h	1357;"	d
OFF_TRIP	merc.h	1358;"	d
OID	merc.h	4145;"	d
OID	merc.h	4651;"	d
OLC_FUN	olc.h	/^typedef	bool OLC_FUN		args( ( CHAR_DATA *ch, char *argument ) );$/;"	t
OPEDIT	olc_opcode.c	/^OPEDIT (opedit_create)$/;"	f
OPEDIT	olc_opcode.c	/^OPEDIT (opedit_delete)$/;"	f
OPEDIT	olc_opcode.c	/^OPEDIT(opedit_code)$/;"	f
OPEDIT	olc_opcode.c	/^OPEDIT(opedit_security)$/;"	f
OPEDIT	olc_opcode.c	/^OPEDIT(opedit_show)$/;"	f
OPEDIT	olc_opcode.c	17;"	d	file:
OPGET	lua_arclib.c	72;"	d	file:
OPGETV	lua_arclib.c	6260;"	d	file:
OPMETH	lua_arclib.c	74;"	d	file:
OPSET	lua_arclib.c	73;"	d	file:
OPT_CP	merc.h	253;"	d
OTRIG_CALL	merc.h	3153;"	d
OTRIG_COMMAND	merc.h	3161;"	d
OTRIG_DROP	merc.h	3141;"	d
OTRIG_EAT	merc.h	3142;"	d
OTRIG_ENTER	merc.h	3156;"	d
OTRIG_FIGHT	merc.h	3158;"	d
OTRIG_GET	merc.h	3150;"	d
OTRIG_GIVE	merc.h	3140;"	d
OTRIG_GREET	merc.h	3152;"	d
OTRIG_HIT	merc.h	3159;"	d
OTRIG_LOOK	merc.h	3154;"	d
OTRIG_LORE	merc.h	3155;"	d
OTRIG_OPEN	merc.h	3163;"	d
OTRIG_PREHIT	merc.h	3160;"	d
OTRIG_PUT	merc.h	3149;"	d
OTRIG_QUAFF	merc.h	3162;"	d
OTRIG_RAND	merc.h	3151;"	d
OTRIG_REMOVE	merc.h	3145;"	d
OTRIG_SACRIFICE	merc.h	3143;"	d
OTRIG_SIT	merc.h	3165;"	d
OTRIG_SPEECH	merc.h	3147;"	d
OTRIG_SPELL	merc.h	3146;"	d
OTRIG_TIMER	merc.h	3157;"	d
OTRIG_TRY	merc.h	3148;"	d
OTRIG_UNLOCK	merc.h	3164;"	d
OTRIG_WAKE	merc.h	3166;"	d
OTRIG_WEAR	merc.h	3144;"	d
O_FILES	makefile	/^O_FILES = act_comm.o act_enter.o act_info.o act_move.o act_obj.o act_wiz.o \\$/;"	m
P	merc.h	1151;"	d
PAGELEN	merc.h	220;"	d
PARENT	makefile	/^PARENT	:= \\""$(shell hg summary | grep parent | sed 's\/parent: \/\/')"\\"$/;"	m
PART_ARMS	merc.h	1499;"	d
PART_BRAINS	merc.h	1502;"	d
PART_CLAWS	merc.h	1516;"	d
PART_EAR	merc.h	1507;"	d
PART_EYE	merc.h	1508;"	d
PART_EYESTALKS	merc.h	1510;"	d
PART_FANGS	merc.h	1517;"	d
PART_FEET	merc.h	1505;"	d
PART_FINGERS	merc.h	1506;"	d
PART_FINS	merc.h	1512;"	d
PART_GUTS	merc.h	1503;"	d
PART_HANDS	merc.h	1504;"	d
PART_HEAD	merc.h	1498;"	d
PART_HEART	merc.h	1501;"	d
PART_HORNS	merc.h	1518;"	d
PART_LEGS	merc.h	1500;"	d
PART_LONG_TONGUE	merc.h	1509;"	d
PART_SCALES	merc.h	1519;"	d
PART_TAIL	merc.h	1514;"	d
PART_TENTACLES	merc.h	1511;"	d
PART_TUSKS	merc.h	1520;"	d
PART_WINGS	merc.h	1513;"	d
PC_DATA	merc.h	/^typedef struct  pc_data          PC_DATA;$/;"	t	typeref:struct:pc_data
PD	recycle.h	108;"	d
PD	recycle.h	113;"	d
PENALTY_DATA	merc.h	/^typedef struct  penalty_data     PENALTY_DATA;$/;"	t	typeref:struct:penalty_data
PENALTY_FILE	merc.h	4115;"	d
PENALTY_FREEZE	merc.h	2279;"	d
PENALTY_JAIL	merc.h	2280;"	d
PENALTY_LOG_FILE	merc.h	4114;"	d
PENALTY_NOCHANNEL	merc.h	2278;"	d
PENALTY_NOEMOTE	merc.h	2275;"	d
PENALTY_NONOTE	merc.h	2281;"	d
PENALTY_NOSHOUT	merc.h	2276;"	d
PENALTY_NOTELL	merc.h	2277;"	d
PENALTY_STATUS_COMPLETE	merc.h	661;"	d
PENALTY_STATUS_NONE	merc.h	654;"	d
PENALTY_STATUS_PARDONED	merc.h	660;"	d
PENALTY_STATUS_PARDON_PENDING	merc.h	658;"	d
PENALTY_STATUS_PAROLED	merc.h	659;"	d
PENALTY_STATUS_PAROLE_PENDING	merc.h	657;"	d
PENALTY_STATUS_PENDING	merc.h	655;"	d
PENALTY_STATUS_SERVING	merc.h	656;"	d
PERS	merc.h	3890;"	d
PERS_ENTRY	merc.h	/^typedef struct pers_comm_entry PERS_ENTRY;$/;"	t	typeref:struct:pers_comm_entry
PERS_HISTORY	merc.h	/^typedef struct pers_comm_history PERS_HISTORY;$/;"	t	typeref:struct:pers_comm_history
PKILL_RANGE	fight.c	3652;"	d	file:
PK_EXPIRE_DAYS	merc.h	282;"	d
PLAYER_DIR	merc.h	4094;"	d
PLAYER_TEMP_DIR	merc.h	4120;"	d
PLR_ACT	merc.h	3830;"	d
PLR_ANTI_HELEPR	merc.h	2197;"	d
PLR_AUTOASSIST	merc.h	2148;"	d
PLR_AUTOEXIT	merc.h	2149;"	d
PLR_AUTOGOLD	merc.h	2152;"	d
PLR_AUTOLOOT	merc.h	2150;"	d
PLR_AUTORESCUE	merc.h	2159;"	d
PLR_AUTOSAC	merc.h	2151;"	d
PLR_AUTOSPLIT	merc.h	2153;"	d
PLR_CANLOOT	merc.h	2165;"	d
PLR_COLOUR	merc.h	2174;"	d
PLR_COLOUR_VERBATIM	merc.h	2175;"	d
PLR_CONSENT	merc.h	2157;"	d
PLR_DENY	merc.h	2180;"	d
PLR_HARDCORE	merc.h	2190;"	d
PLR_HELPER	merc.h	2161;"	d
PLR_HOLYLIGHT	merc.h	2164;"	d
PLR_INACTIVE_HELPER	merc.h	2196;"	d
PLR_IS_NPC	merc.h	2143;"	d
PLR_KILLER	merc.h	2182;"	d
PLR_LAW	merc.h	2160;"	d
PLR_LOG	merc.h	2179;"	d
PLR_NOACCEPT	merc.h	2192;"	d
PLR_NOCANCEL	merc.h	2187;"	d
PLR_NOEXP	merc.h	2198;"	d
PLR_NOFOLLOW	merc.h	2167;"	d
PLR_NOHELP	merc.h	2199;"	d
PLR_NOLOCATE	merc.h	2191;"	d
PLR_NOSUMMON	merc.h	2166;"	d
PLR_NOSURR	merc.h	2193;"	d
PLR_PERMIT	merc.h	2178;"	d
PLR_PERM_PKILL	merc.h	2186;"	d
PLR_QUESTOR	merc.h	2168;"	d
PLR_QUESTORHARD	merc.h	2169;"	d
PLR_REMORT_ROLL	merc.h	2200;"	d
PLR_RP	merc.h	2194;"	d
PLR_THIEF	merc.h	2181;"	d
PLR_TITLE	merc.h	2185;"	d
PLR_UNAUTHED	merc.h	2156;"	d
PLR_WAR	merc.h	2188;"	d
PORTAL_DATA	merc.h	/^typedef struct  portal_data      PORTAL_DATA;$/;"	t	typeref:struct:portal_data
PORTAL_FILE	merc.h	4121;"	d
POS_DEAD	merc.h	2128;"	d
POS_FIGHTING	merc.h	2135;"	d
POS_INCAP	merc.h	2130;"	d
POS_MORTAL	merc.h	2129;"	d
POS_RESTING	merc.h	2133;"	d
POS_SITTING	merc.h	2134;"	d
POS_SLEEPING	merc.h	2132;"	d
POS_STANDING	merc.h	2136;"	d
POS_STUNNED	merc.h	2131;"	d
PRAYER_DATA	merc.h	/^typedef struct prayer_data PRAYER_DATA;$/;"	t	typeref:struct:prayer_data
PRFLAG	act_wiz.c	3392;"	d	file:
PROF	makefile	/^PROF	= -I\/home\/m256ada\/include -L\/home\/m256ada\/lib -O$/;"	m
PROGGET	lua_arclib.c	88;"	d	file:
PROG_CODE	merc.h	/^typedef struct  prog_code        PROG_CODE;$/;"	t	typeref:struct:prog_code
PROG_LIST	merc.h	/^typedef struct  prog_list        PROG_LIST;$/;"	t	typeref:struct:prog_list
PROG_get_code	lua_arclib.c	/^static int PROG_get_code ( lua_State *LS )$/;"	f	file:
PROG_get_islua	lua_arclib.c	/^static int PROG_get_islua ( lua_State *LS )$/;"	f	file:
PROG_get_security	lua_arclib.c	/^static int PROG_get_security ( lua_State *LS )$/;"	f	file:
PROG_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE PROG_get_table [] =$/;"	v	file:
PROG_get_vnum	lua_arclib.c	/^static int PROG_get_vnum ( lua_State *LS )$/;"	f	file:
PROG_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE PROG_method_table [] =$/;"	v	file:
PROG_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE PROG_set_table [] =$/;"	v	file:
PROMPT_DEFAULT	merc.h	4136;"	d
PROTOCOL_H	protocol.h	11;"	d
PULSE_AREA	merc.h	266;"	d
PULSE_HERB	merc.h	268;"	d
PULSE_LUA_ARCGC	merc.h	271;"	d
PULSE_MOBILE	merc.h	263;"	d
PULSE_MOBILE_SPECIAL	merc.h	264;"	d
PULSE_PER_MINUTE	merc.h	270;"	d
PULSE_PER_SECOND	merc.h	261;"	d
PULSE_SAVE	merc.h	267;"	d
PULSE_TICK	merc.h	265;"	d
PULSE_TIMER_TRIG	merc.h	269;"	d
PULSE_VIOLENCE	merc.h	262;"	d
PUT_AT	merc.h	1902;"	d
PUT_IN	merc.h	1904;"	d
PUT_INSIDE	merc.h	1905;"	d
PUT_ON	merc.h	1903;"	d
ParseATCP	protocol.c	/^static void ParseATCP( descriptor_t *apDescriptor, const char *apData )$/;"	f	file:
ParseMSDP	protocol.c	/^static void ParseMSDP( descriptor_t *apDescriptor, const char *apData )$/;"	f	file:
PerformHandshake	protocol.c	/^static void PerformHandshake( descriptor_t *apDescriptor, char aCmd, char aProtocol )$/;"	f	file:
PerformSubnegotiation	protocol.c	/^static void PerformSubnegotiation( descriptor_t *apDescriptor, char aCmd, char *apData, int aSize )$/;"	f	file:
PrefixString	protocol.c	/^static bool_t PrefixString( const char *apPart, const char *apWhole )$/;"	f	file:
ProtocolCreate	protocol.c	/^protocol_t *ProtocolCreate( void )$/;"	f
ProtocolDestroy	protocol.c	/^void ProtocolDestroy( protocol_t *apProtocol )$/;"	f
ProtocolInput	protocol.c	/^void ProtocolInput( descriptor_t *apDescriptor, char *apData, int aSize, char *apOut )$/;"	f
ProtocolNegotiate	protocol.c	/^void ProtocolNegotiate( descriptor_t *apDescriptor )$/;"	f
ProtocolNoEcho	protocol.c	/^void ProtocolNoEcho( descriptor_t *apDescriptor, bool_t abOn )$/;"	f
ProtocolOutput	protocol.c	/^const char *ProtocolOutput( descriptor_t *apDescriptor, const char *apData, int *apLength )$/;"	f
Q	merc.h	1152;"	d
QSET_TIMER_NONE	quest.c	1429;"	d	file:
QUEST_COUNTDOWN_MAX	quest.c	62;"	d	file:
QUEST_COUNTDOWN_MIN	quest.c	61;"	d	file:
QUEST_DATA	merc.h	/^typedef struct  quest_data       QUEST_DATA;$/;"	t	typeref:struct:quest_data
QUEST_ITEM	quest.c	/^typedef struct quest_item QUEST_ITEM;$/;"	t	typeref:struct:quest_item	file:
QUEST_ITEM1	quest.c	29;"	d	file:
QUEST_ITEM10	quest.c	38;"	d	file:
QUEST_ITEM11	quest.c	39;"	d	file:
QUEST_ITEM12	quest.c	40;"	d	file:
QUEST_ITEM13	quest.c	41;"	d	file:
QUEST_ITEM14	quest.c	42;"	d	file:
QUEST_ITEM15	quest.c	43;"	d	file:
QUEST_ITEM16	quest.c	44;"	d	file:
QUEST_ITEM17	quest.c	45;"	d	file:
QUEST_ITEM18	quest.c	46;"	d	file:
QUEST_ITEM19	quest.c	47;"	d	file:
QUEST_ITEM2	quest.c	30;"	d	file:
QUEST_ITEM20	quest.c	48;"	d	file:
QUEST_ITEM21	quest.c	49;"	d	file:
QUEST_ITEM22	quest.c	50;"	d	file:
QUEST_ITEM23	quest.c	51;"	d	file:
QUEST_ITEM24	quest.c	52;"	d	file:
QUEST_ITEM25	quest.c	53;"	d	file:
QUEST_ITEM26	quest.c	54;"	d	file:
QUEST_ITEM27	quest.c	55;"	d	file:
QUEST_ITEM28	quest.c	56;"	d	file:
QUEST_ITEM29	quest.c	57;"	d	file:
QUEST_ITEM3	quest.c	31;"	d	file:
QUEST_ITEM4	quest.c	32;"	d	file:
QUEST_ITEM5	quest.c	33;"	d	file:
QUEST_ITEM6	quest.c	34;"	d	file:
QUEST_ITEM7	quest.c	35;"	d	file:
QUEST_ITEM8	quest.c	36;"	d	file:
QUEST_ITEM9	quest.c	37;"	d	file:
QUEST_NEXTQUEST_MAX	quest.c	64;"	d	file:
QUEST_NEXTQUEST_MIN	quest.c	63;"	d	file:
QUEST_OBJQUEST1	quest.c	250;"	d	file:
QUEST_OBJQUEST2	quest.c	251;"	d	file:
QUEST_OBJQUEST3	quest.c	252;"	d	file:
QUEST_OBJQUEST4	quest.c	253;"	d	file:
QUEST_OBJQUEST5	quest.c	254;"	d	file:
QUEST_STATUS_NONE	quest.c	1428;"	d	file:
R	merc.h	1153;"	d
R1	remort.c	38;"	d	file:
R2	remort.c	39;"	d	file:
R3	remort.c	40;"	d	file:
R4	remort.c	41;"	d	file:
R5	remort.c	42;"	d	file:
R6	remort.c	43;"	d	file:
R7	remort.c	44;"	d	file:
R8	remort.c	45;"	d	file:
RACEEDIT	olc_act.c	90;"	d	file:
RACE_WAR	warfare.h	39;"	d
RBUFFER	buffer_util.h	/^typedef struct read_buffer_type RBUFFER;$/;"	t	typeref:struct:read_buffer_type
RED	merc.h	354;"	d
REDIT	olc_act.c	/^REDIT ( redit_addrprog )$/;"	f
REDIT	olc_act.c	/^REDIT ( redit_delrprog )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_clan )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_clan_rank )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_create )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_delete )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_desc )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_down )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_east )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_ed )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_format )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_heal )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mana )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mlist )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mreset )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_mshow )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_name )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_north )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_northeast )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_northwest )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_notes )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_olist )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_oreset )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_oshow )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_owner )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_rlist )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_room )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_sector )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_show )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_south )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_southeast )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_southwest )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_up )$/;"	f
REDIT	olc_act.c	/^REDIT( redit_west )$/;"	f
REDIT	olc_act.c	84;"	d	file:
REF_FREED	lua_arclib.c	7112;"	d	file:
REJECTED	protocol.h	72;"	d
RELIGION_DATA	merc.h	/^typedef struct religion_data RELIGION_DATA;$/;"	t	typeref:struct:religion_data
RELIGION_FILE	merc.h	4122;"	d
RELIGION_FUN	religion.h	/^typedef void RELIGION_FUN( RELIGION_DATA* religion );$/;"	t
RELIGION_H	religion.h	7;"	d
RELIGION_MAX_RANK	religion.h	21;"	d
RELIGION_RANK_DATA	merc.h	/^typedef struct religion_rank_data RELIGION_RANK_DATA;$/;"	t	typeref:struct:religion_rank_data
RELIGION_RANK_NEO	religion.h	22;"	d
RELIGION_WAR	warfare.h	43;"	d
REMORTEDIT	olc_act.c	92;"	d	file:
REMORT_FILE	merc.h	4111;"	d
REMORT_TABLE	remort.c	/^typedef struct remort_table REMORT_TABLE;$/;"	t	typeref:struct:remort_table	file:
REMOVE_AFFECT	merc.h	3824;"	d
REMOVE_BIT	merc.h	3785;"	d
REMOVE_BIT	merc.h	3790;"	d
REMOVE_BITS	merc.h	3796;"	d
RESERVED_DATA	merc.h	/^typedef struct  reserved_data    RESERVED_DATA;$/;"	t	typeref:struct:reserved_data
RESERVED_LIST	merc.h	4117;"	d
RESETGETARG	lua_arclib.c	6125;"	d	file:
RESET_DATA	merc.h	/^typedef struct  reset_data       RESET_DATA;$/;"	t	typeref:struct:reset_data
RESET_get_command	lua_arclib.c	/^static int RESET_get_command(lua_State *LS, RESET_DATA *rd )$/;"	f	file:
RESET_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE RESET_get_table [] =$/;"	v	file:
RESET_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE RESET_method_table [] =$/;"	v	file:
RESET_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE RESET_set_table [] =$/;"	v	file:
REST_AT	merc.h	1896;"	d
REST_IN	merc.h	1898;"	d
REST_ON	merc.h	1897;"	d
RES_ACID	merc.h	1414;"	d
RES_BASH	merc.h	1408;"	d
RES_CHARM	merc.h	1405;"	d
RES_COLD	merc.h	1412;"	d
RES_DISEASE	merc.h	1420;"	d
RES_DROWNING	merc.h	1421;"	d
RES_ENERGY	merc.h	1418;"	d
RES_FIRE	merc.h	1411;"	d
RES_HOLY	merc.h	1417;"	d
RES_IRON	merc.h	1426;"	d
RES_LIGHT	merc.h	1422;"	d
RES_LIGHTNING	merc.h	1413;"	d
RES_MAGIC	merc.h	1406;"	d
RES_MENTAL	merc.h	1419;"	d
RES_NEGATIVE	merc.h	1416;"	d
RES_PIERCE	merc.h	1409;"	d
RES_POISON	merc.h	1415;"	d
RES_SILVER	merc.h	1425;"	d
RES_SLASH	merc.h	1410;"	d
RES_SOUND	merc.h	1423;"	d
RES_SUMMON	merc.h	1404;"	d
RES_WEAPON	merc.h	1407;"	d
RES_WOOD	merc.h	1424;"	d
REVERSE	merc.h	351;"	d
REWARD_EXP	mob_cmds.c	2058;"	d	file:
REWARD_GOLD	mob_cmds.c	2060;"	d	file:
REWARD_QP	mob_cmds.c	2059;"	d	file:
RID	merc.h	4146;"	d
RID	merc.h	4652;"	d
ROOMGET	lua_arclib.c	68;"	d	file:
ROOMMETH	lua_arclib.c	70;"	d	file:
ROOMSET	lua_arclib.c	69;"	d	file:
ROOM_ARENA	merc.h	2015;"	d
ROOM_ARG	lua_scripting.c	84;"	d	file:
ROOM_BARREN	merc.h	2016;"	d
ROOM_BLACKSMITH	merc.h	2011;"	d
ROOM_BOX_ROOM	merc.h	2018;"	d
ROOM_BOX_SHOP	merc.h	2017;"	d
ROOM_DARK	merc.h	1992;"	d
ROOM_DONATION	merc.h	2009;"	d
ROOM_GODS_ONLY	merc.h	2004;"	d
ROOM_HARD_QUEST	merc.h	2019;"	d
ROOM_HEROES_ONLY	merc.h	2005;"	d
ROOM_IMP_ONLY	merc.h	2003;"	d
ROOM_INDEX_DATA	merc.h	/^typedef struct  room_index_data  ROOM_INDEX_DATA;$/;"	t	typeref:struct:room_index_data
ROOM_INDOORS	merc.h	1994;"	d
ROOM_JAIL	merc.h	2013;"	d
ROOM_LAW	merc.h	2007;"	d
ROOM_NEWBIES_ONLY	merc.h	2006;"	d
ROOM_NOWHERE	merc.h	2008;"	d
ROOM_NO_MOB	merc.h	1993;"	d
ROOM_NO_QUEST	merc.h	2014;"	d
ROOM_NO_RECALL	merc.h	2002;"	d
ROOM_NO_SCOUT	merc.h	1995;"	d
ROOM_NO_TELEPORT	merc.h	1997;"	d
ROOM_PEEL	merc.h	2012;"	d
ROOM_PET_SHOP	merc.h	2001;"	d
ROOM_PRIVATE	merc.h	1998;"	d
ROOM_SAFE	merc.h	1999;"	d
ROOM_SNARE	merc.h	2010;"	d
ROOM_SOLITARY	merc.h	2000;"	d
ROOM_TATTOO_SHOP	merc.h	1996;"	d
ROOM_VNUM_ALTAR	merc.h	1972;"	d
ROOM_VNUM_AUTH_END	merc.h	1984;"	d
ROOM_VNUM_AUTH_START	merc.h	1983;"	d
ROOM_VNUM_BALANCE	merc.h	1974;"	d
ROOM_VNUM_BANK	merc.h	1980;"	d
ROOM_VNUM_CHAT	merc.h	1970;"	d
ROOM_VNUM_CIRCLE	merc.h	1975;"	d
ROOM_VNUM_DEMISE	merc.h	1976;"	d
ROOM_VNUM_DONATION	merc.h	1981;"	d
ROOM_VNUM_EAGLE	merc.h	1982;"	d
ROOM_VNUM_HONOR	merc.h	1977;"	d
ROOM_VNUM_LIMBO	merc.h	1969;"	d
ROOM_VNUM_MORGUE	merc.h	1978;"	d
ROOM_VNUM_RECALL	merc.h	1979;"	d
ROOM_VNUM_SCHOOL	merc.h	1973;"	d
ROOM_VNUM_TEMPLE	merc.h	1971;"	d
ROOM_cancel	lua_arclib.c	/^static int ROOM_cancel (lua_State *LS)$/;"	f	file:
ROOM_delay	lua_arclib.c	/^static int ROOM_delay (lua_State *LS)$/;"	f	file:
ROOM_dir	lua_arclib.c	5871;"	d	file:
ROOM_echo	lua_arclib.c	/^static int ROOM_echo( lua_State *LS)$/;"	f	file:
ROOM_flag	lua_arclib.c	/^static int ROOM_flag( lua_State *LS)$/;"	f	file:
ROOM_get_area	lua_arclib.c	/^static int ROOM_get_area (lua_State *LS)$/;"	f	file:
ROOM_get_clan	lua_arclib.c	/^static int ROOM_get_clan (lua_State *LS)$/;"	f	file:
ROOM_get_clanrank	lua_arclib.c	/^static int ROOM_get_clanrank (lua_State *LS)$/;"	f	file:
ROOM_get_contents	lua_arclib.c	/^static int ROOM_get_contents (lua_State *LS)$/;"	f	file:
ROOM_get_description	lua_arclib.c	/^static int ROOM_get_description (lua_State *LS)$/;"	f	file:
ROOM_get_exits	lua_arclib.c	/^static int ROOM_get_exits (lua_State *LS)$/;"	f	file:
ROOM_get_healrate	lua_arclib.c	/^static int ROOM_get_healrate (lua_State *LS)$/;"	f	file:
ROOM_get_ingame	lua_arclib.c	/^static int ROOM_get_ingame( lua_State *LS )$/;"	f	file:
ROOM_get_manarate	lua_arclib.c	/^static int ROOM_get_manarate (lua_State *LS)$/;"	f	file:
ROOM_get_mobs	lua_arclib.c	/^static int ROOM_get_mobs (lua_State *LS)$/;"	f	file:
ROOM_get_name	lua_arclib.c	/^static int ROOM_get_name (lua_State *LS)$/;"	f	file:
ROOM_get_owner	lua_arclib.c	/^static int ROOM_get_owner (lua_State *LS)$/;"	f	file:
ROOM_get_people	lua_arclib.c	/^static int ROOM_get_people (lua_State *LS)$/;"	f	file:
ROOM_get_players	lua_arclib.c	/^static int ROOM_get_players (lua_State *LS)$/;"	f	file:
ROOM_get_resets	lua_arclib.c	/^static int ROOM_get_resets (lua_State *LS)$/;"	f	file:
ROOM_get_rtrigs	lua_arclib.c	/^static int ROOM_get_rtrigs ( lua_State *LS)$/;"	f	file:
ROOM_get_sector	lua_arclib.c	/^static int ROOM_get_sector (lua_State *LS)$/;"	f	file:
ROOM_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE ROOM_get_table [] =$/;"	v	file:
ROOM_get_vnum	lua_arclib.c	/^static int ROOM_get_vnum (lua_State *LS)$/;"	f	file:
ROOM_loadfunction	lua_arclib.c	/^static int ROOM_loadfunction ( lua_State *LS)$/;"	f	file:
ROOM_loadprog	lua_arclib.c	/^static int ROOM_loadprog (lua_State *LS)$/;"	f	file:
ROOM_loadscript	lua_arclib.c	/^static int ROOM_loadscript (lua_State *LS)$/;"	f	file:
ROOM_loadstring	lua_arclib.c	/^static int ROOM_loadstring (lua_State *LS)$/;"	f	file:
ROOM_loadtbl	lua_arclib.c	/^static int ROOM_loadtbl (lua_State *LS)$/;"	f	file:
ROOM_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE ROOM_method_table [] =$/;"	v	file:
ROOM_mload	lua_arclib.c	/^static int ROOM_mload (lua_State *LS)$/;"	f	file:
ROOM_oload	lua_arclib.c	/^static int ROOM_oload (lua_State *LS)$/;"	f	file:
ROOM_rvnum	lua_arclib.c	/^static int ROOM_rvnum ( lua_State *LS)$/;"	f	file:
ROOM_savetbl	lua_arclib.c	/^static int ROOM_savetbl (lua_State *LS)$/;"	f	file:
ROOM_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE ROOM_set_table [] =$/;"	v	file:
ROOM_tprint	lua_arclib.c	/^static int ROOM_tprint ( lua_State *LS)$/;"	f	file:
RPEDIT	olc_rpcode.c	/^RPEDIT (rpedit_create)$/;"	f
RPEDIT	olc_rpcode.c	/^RPEDIT (rpedit_delete)$/;"	f
RPEDIT	olc_rpcode.c	/^RPEDIT(rpedit_code)$/;"	f
RPEDIT	olc_rpcode.c	/^RPEDIT(rpedit_security)$/;"	f
RPEDIT	olc_rpcode.c	/^RPEDIT(rpedit_show)$/;"	f
RPEDIT	olc_rpcode.c	17;"	d	file:
RSTGET	lua_arclib.c	84;"	d	file:
RSTMETH	lua_arclib.c	86;"	d	file:
RSTSET	lua_arclib.c	85;"	d	file:
RTRIG_CALL	merc.h	3189;"	d
RTRIG_CLOSE	merc.h	3193;"	d
RTRIG_COMMAND	merc.h	3200;"	d
RTRIG_ENTER	merc.h	3196;"	d
RTRIG_EXIT	merc.h	3197;"	d
RTRIG_LOCK	merc.h	3195;"	d
RTRIG_LOOK	merc.h	3198;"	d
RTRIG_MOVE	merc.h	3191;"	d
RTRIG_OPEN	merc.h	3192;"	d
RTRIG_TIMER	merc.h	3190;"	d
RTRIG_TRY	merc.h	3199;"	d
RTRIG_UNLOCK	merc.h	3194;"	d
RUNDELAY_VNUM	lua_main.h	13;"	d
RegisterLuaRoutines	lua_main.c	/^static int RegisterLuaRoutines (lua_State *LS)$/;"	f	file:
ReportBug	protocol.c	/^static void ReportBug( const char *apText )$/;"	f	file:
S	merc.h	1154;"	d
SAVANT	merc.h	309;"	d
SAVETABLE_FUNCTION	lua_main.h	9;"	d
SAVE_STATE_NOSAVE	simsave.c	28;"	d	file:
SAVE_STATE_SIMSAVE	simsave.c	25;"	d	file:
SAVE_STATE_TEMPCOPY	simsave.c	27;"	d	file:
SAVE_STATE_TEMPSAVE	simsave.c	26;"	d	file:
SB	telnet.h	20;"	d
SCRIPT_GLOBS_TABLE	lua_arclib.c	1211;"	d	file:
SE	telnet.h	30;"	d
SECOND_DAMAGE	merc.h	1342;"	d
SECT_AIR	merc.h	2069;"	d
SECT_CITY	merc.h	2061;"	d
SECT_DESERT	merc.h	2070;"	d
SECT_FIELD	merc.h	2062;"	d
SECT_FOREST	merc.h	2063;"	d
SECT_HILLS	merc.h	2064;"	d
SECT_INSIDE	merc.h	2060;"	d
SECT_MAX	merc.h	2072;"	d
SECT_MOUNTAIN	merc.h	2065;"	d
SECT_UNDERGROUND	merc.h	2071;"	d
SECT_UNDERWATER	merc.h	2068;"	d
SECT_WATER_DEEP	merc.h	2067;"	d
SECT_WATER_SHALLOW	merc.h	2066;"	d
SEC_NOSCRIPT	lua_arclib.c	111;"	d	file:
SEE_CAN	handler.c	3343;"	d	file:
SEE_CANT	handler.c	3342;"	d	file:
SEE_MAY	handler.c	3344;"	d	file:
SEND	protocol.h	70;"	d
SETP	lua_arclib.c	44;"	d	file:
SET_AFFECT	merc.h	3823;"	d
SET_BIT	merc.h	3784;"	d
SET_BIT	merc.h	3789;"	d
SET_BITS	merc.h	3795;"	d
SET_STR	aclone.c	17;"	d	file:
SET_WEAPON_STAT	merc.h	3884;"	d
SEX_BOTH	merc.h	1616;"	d
SEX_FEMALE	merc.h	1615;"	d
SEX_MALE	merc.h	1614;"	d
SEX_NEUTRAL	merc.h	1613;"	d
SF	merc.h	4147;"	d
SF	merc.h	4653;"	d
SFORM	stats.c	1152;"	d	file:
SFORM	stats.c	1167;"	d	file:
SHIFT	vshift.c	26;"	d	file:
SHOPGET	lua_arclib.c	92;"	d	file:
SHOPGETINT	lua_arclib.c	6634;"	d	file:
SHOPMETH	lua_arclib.c	93;"	d	file:
SHOP_DATA	merc.h	/^typedef struct  shop_data        SHOP_DATA;$/;"	t	typeref:struct:shop_data
SHOP_buytype	lua_arclib.c	/^static int SHOP_buytype ( lua_State *LS )$/;"	f	file:
SHOP_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE SHOP_get_table [] =$/;"	v	file:
SHOP_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE SHOP_method_table [] =$/;"	v	file:
SHOP_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE SHOP_set_table [] =$/;"	v	file:
SHUTDOWN_FILE	merc.h	4107;"	d
SIMSAVE_H	simsave.h	7;"	d
SIT_AT	merc.h	1893;"	d
SIT_IN	merc.h	1895;"	d
SIT_ON	merc.h	1894;"	d
SIZE_GIANT	merc.h	1635;"	d
SIZE_HUGE	merc.h	1634;"	d
SIZE_LARGE	merc.h	1633;"	d
SIZE_MEDIUM	merc.h	1632;"	d
SIZE_SMALL	merc.h	1631;"	d
SIZE_TINY	merc.h	1630;"	d
SKEY	db.c	1020;"	d	file:
SKILLEDIT	olc_act.c	91;"	d	file:
SKILL_FILE	merc.h	4112;"	d
SKY_CLOUDLESS	merc.h	485;"	d
SKY_CLOUDY	merc.h	486;"	d
SKY_LIGHTNING	merc.h	488;"	d
SKY_RAINING	merc.h	487;"	d
SLEEP_AT	merc.h	1899;"	d
SLEEP_IN	merc.h	1901;"	d
SLEEP_ON	merc.h	1900;"	d
SMITH_DATA	merc.h	/^} SMITH_DATA;$/;"	t	typeref:struct:smith_data
SMITH_FUN	smith.c	/^typedef void SMITH_FUN args( ( CHAR_DATA *ch, char *argument ) );$/;"	t	file:
SMITH_LOG	merc.h	42;"	d
SMITH_PRICE_FUN	smith.c	/^typedef void SMITH_PRICE_FUN args( ( CHAR_DATA *ch, int *gold, int *qp ) );$/;"	t	file:
SMITH_SET_FUN	smith.c	/^typedef void SMITH_SET_FUN args( ( CHAR_DATA *ch, char *argument) );$/;"	t	file:
SM_FUN	smith.c	/^SM_FUN( smith_cancel )$/;"	f
SM_FUN	smith.c	/^SM_FUN( smith_finish )$/;"	f
SM_FUN	smith.c	/^SM_FUN( smith_give )$/;"	f
SM_FUN	smith.c	/^SM_FUN( smith_set)$/;"	f
SM_FUN	smith.c	/^SM_FUN( smith_status )$/;"	f
SM_FUN	smith.c	11;"	d	file:
SM_PRICE_FUN	smith.c	/^SM_PRICE_FUN( smith_set_name_price )$/;"	f
SM_PRICE_FUN	smith.c	/^SM_PRICE_FUN( smith_set_sticky_price )$/;"	f
SM_PRICE_FUN	smith.c	13;"	d	file:
SM_SET_FUN	smith.c	/^SM_SET_FUN( smith_set_description )$/;"	f
SM_SET_FUN	smith.c	/^SM_SET_FUN( smith_set_name)$/;"	f
SM_SET_FUN	smith.c	/^SM_SET_FUN( smith_set_short_descr )$/;"	f
SM_SET_FUN	smith.c	/^SM_SET_FUN( smith_set_sticky )$/;"	f
SM_SET_FUN	smith.c	12;"	d	file:
SNIPPET_VERSION	protocol.h	63;"	d
SOCIAL_FILE	social-edit.c	39;"	d	file:
SOCIAL_FILE	social-edit.c	41;"	d	file:
SORT_TABLE	merc.h	/^typedef struct  sort_table       SORT_TABLE;$/;"	t	typeref:struct:sort_table
SPECIAL_H	special.h	2;"	d
SPEC_FUN	merc.h	/^typedef bool SPEC_FUN   args( ( CHAR_DATA *ch ) );$/;"	t
SPELL_COST	healer.c	/^typedef struct spell_cost SPELL_COST;$/;"	t	typeref:struct:spell_cost	file:
SPELL_FUN	merc.h	/^typedef void SPELL_FUN  args( ( int sn, int level, CHAR_DATA *ch, void *vo,$/;"	t
SR_BUF	merc.h	/^typedef struct  string_ring_buf  SR_BUF;$/;"	t	typeref:struct:string_ring_buf
STANCE_AMBUSH	merc.h	3953;"	d
STANCE_ANKLEBITER	merc.h	3971;"	d
STANCE_ARCANA	merc.h	3972;"	d
STANCE_AVERSION	merc.h	3975;"	d
STANCE_BEAR	merc.h	3931;"	d
STANCE_BLADE_DANCE	merc.h	3948;"	d
STANCE_BLOODBATH	merc.h	3954;"	d
STANCE_BOA	merc.h	3932;"	d
STANCE_BUNNY	merc.h	3970;"	d
STANCE_DEFAULT	merc.h	3930;"	d
STANCE_DIMENSIONAL_BLADE	merc.h	3973;"	d
STANCE_DRAGON	merc.h	3933;"	d
STANCE_EAGLE	merc.h	3934;"	d
STANCE_EEL	merc.h	3935;"	d
STANCE_ELEMENTAL_BLADE	merc.h	3974;"	d
STANCE_FINESSE	merc.h	3945;"	d
STANCE_FIREWITCHS_SEANCE	merc.h	3969;"	d
STANCE_GOBLINCLEAVER	merc.h	3964;"	d
STANCE_INQUISITION	merc.h	3962;"	d
STANCE_JIHAD	merc.h	3958;"	d
STANCE_KAMIKAZE	merc.h	3955;"	d
STANCE_KORINNS_INSPIRATION	merc.h	3966;"	d
STANCE_LION	merc.h	3936;"	d
STANCE_PARADEMIAS_BILE	merc.h	3967;"	d
STANCE_PHOENIX	merc.h	3937;"	d
STANCE_PORCUPINE	merc.h	3938;"	d
STANCE_RAGE	merc.h	3946;"	d
STANCE_RETRIBUTION	merc.h	3947;"	d
STANCE_RHINO	merc.h	3939;"	d
STANCE_SCORPION	merc.h	3940;"	d
STANCE_SERPENT	merc.h	3976;"	d
STANCE_SHADOWCLAW	merc.h	3949;"	d
STANCE_SHADOWESSENCE	merc.h	3950;"	d
STANCE_SHADOWSOUL	merc.h	3951;"	d
STANCE_SHADOWWALK	merc.h	3952;"	d
STANCE_SHOWDOWN	merc.h	3956;"	d
STANCE_SWAYDES_MERCY	merc.h	3968;"	d
STANCE_TARGET_PRACTICE	merc.h	3957;"	d
STANCE_TEMPEST	merc.h	3963;"	d
STANCE_TIGER	merc.h	3941;"	d
STANCE_TOAD	merc.h	3942;"	d
STANCE_TORTOISE	merc.h	3943;"	d
STANCE_UNICORN	merc.h	3944;"	d
STANCE_VAMPIRE_HUNTING	merc.h	3959;"	d
STANCE_WENDIGO	merc.h	3965;"	d
STANCE_WEREWOLF_HUNTING	merc.h	3961;"	d
STANCE_WITCH_HUNTING	merc.h	3960;"	d
STAND_AT	merc.h	1890;"	d
STAND_IN	merc.h	1892;"	d
STAND_ON	merc.h	1891;"	d
STAT_AGI	merc.h	851;"	d
STAT_CHA	merc.h	856;"	d
STAT_CON	merc.h	849;"	d
STAT_DEX	merc.h	852;"	d
STAT_DIS	merc.h	855;"	d
STAT_FILE	merc.h	4113;"	d
STAT_INT	merc.h	853;"	d
STAT_LUC	merc.h	857;"	d
STAT_NONE	merc.h	858;"	d
STAT_STR	merc.h	848;"	d
STAT_VIT	merc.h	850;"	d
STAT_WIS	merc.h	854;"	d
STRING_GUI	protocol.c	119;"	d	file:
STRING_READ_ONLY	protocol.c	114;"	d	file:
STRING_WITH_LENGTH_OF	protocol.c	117;"	d	file:
STRING_WRITE_ONCE	protocol.c	118;"	d	file:
STR_DUP_STRINGS	db.c	/^static int STR_DUP_STRINGS = 0;$/;"	v	file:
STS_ACTIVE	lua_arclib.c	105;"	d	file:
STS_DEPRECATED	lua_arclib.c	106;"	d	file:
SUN_DARK	merc.h	480;"	d
SUN_LIGHT	merc.h	482;"	d
SUN_RISE	merc.h	481;"	d
SUN_SET	merc.h	483;"	d
SYNCH	telnet.h	33;"	d
ScreenHeight	protocol.h	/^   int       ScreenHeight;     \/* The client's screen height *\/$/;"	m	struct:__anon13
ScreenWidth	protocol.h	/^   int       ScreenWidth;      \/* The client's screen width *\/$/;"	m	struct:__anon13
SendATCP	protocol.c	/^static void SendATCP( descriptor_t *apDescriptor, const char *apVariable, const char *apValue )$/;"	f	file:
SendMSSP	protocol.c	/^static void SendMSSP( descriptor_t *apDescriptor )$/;"	f	file:
SendNegotiationSequence	protocol.c	/^static void SendNegotiationSequence( descriptor_t *apDescriptor, char aCmd, char aProtocol )$/;"	f	file:
SoundSend	protocol.c	/^void SoundSend( descriptor_t *apDescriptor, const char *apTrigger )$/;"	f
T	merc.h	1155;"	d
TAG_BLUE	merc.h	2272;"	d
TAG_FROZEN	merc.h	2270;"	d
TAG_PLAYING	merc.h	2269;"	d
TAG_RED	merc.h	2271;"	d
TARGET_CHAR	merc.h	3036;"	d
TARGET_NONE	merc.h	3039;"	d
TARGET_OBJ	merc.h	3037;"	d
TARGET_ROOM	merc.h	3038;"	d
TAR_ALL	merc.h	3048;"	d
TAR_CHAR_DEFENSIVE	merc.h	3027;"	d
TAR_CHAR_NEUTRAL	merc.h	3033;"	d
TAR_CHAR_OFFENSIVE	merc.h	3026;"	d
TAR_CHAR_SELF	merc.h	3028;"	d
TAR_ENEMY	merc.h	3045;"	d
TAR_FRIEND	merc.h	3049;"	d
TAR_GROUP	merc.h	3043;"	d
TAR_IGNORE	merc.h	3025;"	d
TAR_IGNORE_OFF	merc.h	3034;"	d
TAR_NEUTRAL	merc.h	3044;"	d
TAR_NONE	merc.h	3041;"	d
TAR_NOT_ENEMY	merc.h	3053;"	d
TAR_NOT_FRIEND	merc.h	3050;"	d
TAR_NOT_GROUP	merc.h	3054;"	d
TAR_NOT_NEUTRAL	merc.h	3052;"	d
TAR_NOT_SELF	merc.h	3051;"	d
TAR_OBJ_CHAR_DEF	merc.h	3030;"	d
TAR_OBJ_CHAR_OFF	merc.h	3031;"	d
TAR_OBJ_INV	merc.h	3029;"	d
TAR_OFFENSIVE	merc.h	3046;"	d
TAR_SELF	merc.h	3042;"	d
TAR_VIS_CHAR_OFF	merc.h	3032;"	d
TATTOO	tattoo.c	17;"	d	file:
TATTOO_DATA	tattoo.c	/^typedef struct tattoo_data TATTOO_DATA;$/;"	t	typeref:struct:tattoo_data	file:
TATTOO_H	tattoo.h	2;"	d
TATTOO_ID	tattoo.c	18;"	d	file:
TATTOO_NONE	merc.h	2111;"	d
TELOPT_ATCP	protocol.h	80;"	d
TELOPT_BINARY	telnet.h	43;"	d
TELOPT_BM	telnet.h	62;"	d
TELOPT_CHARSET	protocol.h	74;"	d
TELOPT_DET	telnet.h	63;"	d
TELOPT_ECHO	telnet.h	44;"	d
TELOPT_EOR	telnet.h	68;"	d
TELOPT_EXOPL	telnet.h	69;"	d
TELOPT_LOGOUT	telnet.h	61;"	d
TELOPT_MCCP	protocol.h	77;"	d
TELOPT_MSDP	protocol.h	75;"	d
TELOPT_MSP	protocol.h	78;"	d
TELOPT_MSSP	protocol.h	76;"	d
TELOPT_MXP	protocol.h	79;"	d
TELOPT_NAMS	telnet.h	47;"	d
TELOPT_NAOCRD	telnet.h	53;"	d
TELOPT_NAOFFD	telnet.h	56;"	d
TELOPT_NAOHTD	telnet.h	55;"	d
TELOPT_NAOHTS	telnet.h	54;"	d
TELOPT_NAOL	telnet.h	51;"	d
TELOPT_NAOLFD	telnet.h	59;"	d
TELOPT_NAOP	telnet.h	52;"	d
TELOPT_NAOVTD	telnet.h	58;"	d
TELOPT_NAOVTS	telnet.h	57;"	d
TELOPT_RCP	telnet.h	45;"	d
TELOPT_RCTE	telnet.h	50;"	d
TELOPT_SGA	telnet.h	46;"	d
TELOPT_SNDLOC	telnet.h	66;"	d
TELOPT_STATUS	telnet.h	48;"	d
TELOPT_SUPDUP	telnet.h	64;"	d
TELOPT_SUPDUPOUTPUT	telnet.h	65;"	d
TELOPT_TM	telnet.h	49;"	d
TELOPT_TTYPE	telnet.h	67;"	d
TELOPT_XASCII	telnet.h	60;"	d
TELQUAL_IS	telnet.h	84;"	d
TELQUAL_SEND	telnet.h	85;"	d
TEMP_FILE	merc.h	4096;"	d
TEXT1_ARG	lua_scripting.c	60;"	d	file:
TEXT2_ARG	lua_scripting.c	61;"	d	file:
TIMER_H	timer.h	2;"	d
TIMER_NODE	timer.h	/^typedef struct timer_node TIMER_NODE;$/;"	t	typeref:struct:timer_node
TIME_INFO_DATA	merc.h	/^typedef struct  time_info_data   TIME_INFO_DATA;$/;"	t	typeref:struct:time_info_data
TIME_PLAYED	merc.h	3837;"	d
TM_LUAFUNC	timer.c	18;"	d	file:
TM_PROG	timer.c	17;"	d	file:
TM_UNDEFINED	timer.c	16;"	d	file:
TOGGLE_BIT	merc.h	3787;"	d
TOGGLE_BIT	merc.h	3792;"	d
TOGG_OLDFINGER	merc.h	1639;"	d
TOGG_OLDSCORE	merc.h	1638;"	d
TOGG_STATBARS	merc.h	1640;"	d
TO_AFFECTS	merc.h	1027;"	d
TO_ALL	merc.h	793;"	d
TO_CHAR	merc.h	792;"	d
TO_IMMUNE	merc.h	1029;"	d
TO_NOTVICT	merc.h	790;"	d
TO_OBJECT	merc.h	1028;"	d
TO_RESIST	merc.h	1030;"	d
TO_ROOM	merc.h	789;"	d
TO_ROOM_UNAUTHED	merc.h	794;"	d
TO_SPECIAL	merc.h	1034;"	d
TO_VICT	merc.h	791;"	d
TO_VULN	merc.h	1031;"	d
TO_WEAPON	merc.h	1032;"	d
TPRINTSTR_FUNCTION	lua_main.h	11;"	d
TRIGGET	lua_arclib.c	90;"	d	file:
TRIGTYPE_ARG	lua_scripting.c	63;"	d	file:
TRIG_ACT	merc.h	3109;"	d
TRIG_ARG	lua_scripting.c	59;"	d	file:
TRIG_BRIBE	merc.h	3110;"	d
TRIG_CALL	merc.h	3133;"	d
TRIG_COMMAND	merc.h	3135;"	d
TRIG_DEATH	merc.h	3111;"	d
TRIG_DEFEAT	merc.h	3127;"	d
TRIG_DELAY	merc.h	3123;"	d
TRIG_DRBOMB	merc.h	3125;"	d
TRIG_ENTRY	merc.h	3112;"	d
TRIG_EXALL	merc.h	3122;"	d
TRIG_EXBOMB	merc.h	3126;"	d
TRIG_EXIT	merc.h	3121;"	d
TRIG_FIGHT	merc.h	3113;"	d
TRIG_GIVE	merc.h	3114;"	d
TRIG_GRALL	merc.h	3116;"	d
TRIG_GREET	merc.h	3115;"	d
TRIG_HPCNT	merc.h	3118;"	d
TRIG_KILL	merc.h	3117;"	d
TRIG_MPCNT	merc.h	3131;"	d
TRIG_RANDOM	merc.h	3119;"	d
TRIG_RESET	merc.h	3130;"	d
TRIG_SOCIAL	merc.h	3128;"	d
TRIG_SPEECH	merc.h	3120;"	d
TRIG_SPELL	merc.h	3132;"	d
TRIG_SURR	merc.h	3124;"	d
TRIG_TIMER	merc.h	3134;"	d
TRIG_TRY	merc.h	3129;"	d
TRIG_get_prog	lua_arclib.c	/^static int TRIG_get_prog ( lua_State *LS )$/;"	f	file:
TRIG_get_table	lua_arclib.c	/^static const LUA_PROP_TYPE TRIG_get_table [] =$/;"	v	file:
TRIG_get_trigphrase	lua_arclib.c	/^static int TRIG_get_trigphrase ( lua_State *LS )$/;"	f	file:
TRIG_get_trigtype	lua_arclib.c	/^static int TRIG_get_trigtype ( lua_State *LS )$/;"	f	file:
TRIG_method_table	lua_arclib.c	/^static const LUA_PROP_TYPE TRIG_method_table [] =$/;"	v	file:
TRIG_set_table	lua_arclib.c	/^static const LUA_PROP_TYPE TRIG_set_table [] =$/;"	v	file:
TRUE	merc.h	71;"	d
TYPE_AREA	timer.c	13;"	d	file:
TYPE_CH	timer.c	11;"	d	file:
TYPE_HIT	merc.h	3018;"	d
TYPE_OBJ	timer.c	12;"	d	file:
TYPE_ROOM	timer.c	14;"	d	file:
TYPE_UNDEFINED	merc.h	3017;"	d
TYPE_UNDEFINED	timer.c	10;"	d	file:
TYPO_FILE	merc.h	4106;"	d
U	merc.h	1156;"	d
UMAX	merc.h	3759;"	d
UMIN	merc.h	3758;"	d
UNICODE_FEMALE	protocol.h	94;"	d
UNICODE_MALE	protocol.h	93;"	d
UNICODE_NEUTER	protocol.h	95;"	d
UPPER	merc.h	3762;"	d
UPPER_MASK	mt19937ar.c	50;"	d	file:
URANGE	merc.h	3760;"	d
USER_DIR	merc.h	4100;"	d
UTILF	lua_arclib.c	1119;"	d	file:
UnicodeAdd	protocol.c	/^void UnicodeAdd( char **apString, int aValue )$/;"	f
UnicodeGet	protocol.c	/^char *UnicodeGet( int aValue )$/;"	f
V	merc.h	1157;"	d
VALIDATE	merc.h	3756;"	d
VERSION	olc.h	25;"	d
VER_EXIT_FLAGS	db.c	525;"	d	file:
VER_EXP_RAISE	bsave.c	116;"	d	file:
VER_FLAG_CHANGE	bsave.c	114;"	d	file:
VER_MONEY_WIPE	bsave.c	115;"	d	file:
VER_NEW_MOB_LDESC	db.c	527;"	d	file:
VER_NEW_MOB_LDESC	db2.c	47;"	d	file:
VER_NEW_PROG_FORMAT	db.c	526;"	d	file:
VICEARCHON	merc.h	306;"	d
VICTIM_ARG	lua_scripting.c	62;"	d	file:
VSIZE	tflag.c	12;"	d	file:
VULN_ACID	merc.h	1439;"	d
VULN_BASH	merc.h	1433;"	d
VULN_CHARM	merc.h	1430;"	d
VULN_COLD	merc.h	1437;"	d
VULN_DISEASE	merc.h	1445;"	d
VULN_DROWNING	merc.h	1446;"	d
VULN_ENERGY	merc.h	1443;"	d
VULN_FIRE	merc.h	1436;"	d
VULN_HOLY	merc.h	1442;"	d
VULN_IRON	merc.h	1451;"	d
VULN_LIGHT	merc.h	1447;"	d
VULN_LIGHTNING	merc.h	1438;"	d
VULN_MAGIC	merc.h	1431;"	d
VULN_MENTAL	merc.h	1444;"	d
VULN_NEGATIVE	merc.h	1441;"	d
VULN_PIERCE	merc.h	1434;"	d
VULN_POISON	merc.h	1440;"	d
VULN_SILVER	merc.h	1450;"	d
VULN_SLASH	merc.h	1435;"	d
VULN_SOUND	merc.h	1448;"	d
VULN_SUMMON	merc.h	1429;"	d
VULN_WEAPON	merc.h	1432;"	d
VULN_WOOD	merc.h	1449;"	d
ValueInt	protocol.h	/^   int          ValueInt;      \/* The numeric value of the variable *\/$/;"	m	struct:__anon11
Variable	protocol.h	/^   variable_t   Variable;      \/* The enum type of this variable *\/$/;"	m	struct:__anon10
VariableNameTable	protocol.c	/^static variable_name_t VariableNameTable[eMSDP_MAX+1] = $/;"	v	file:
W	merc.h	1158;"	d
WAIT_STATE	merc.h	3850;"	d
WAR_DATA	warfare.h	/^typedef struct war_data WAR_DATA;$/;"	t	typeref:struct:war_data
WAR_ROOM_FIRST	warfare.h	47;"	d
WAR_ROOM_LAST	warfare.h	48;"	d
WAR_ROOM_LOSER	warfare.h	49;"	d
WAR_ROOM_PREP	warfare.h	46;"	d
WAR_ROOM_WINNER	warfare.h	50;"	d
WD	recycle.h	64;"	d
WD	recycle.h	67;"	d
WEAPON_AXE	merc.h	1854;"	d
WEAPON_BOW	merc.h	1859;"	d
WEAPON_DAGGER	merc.h	1851;"	d
WEAPON_DUMB	merc.h	1872;"	d
WEAPON_EXOTIC	merc.h	1849;"	d
WEAPON_FLAIL	merc.h	1855;"	d
WEAPON_FLAMING	merc.h	1862;"	d
WEAPON_FROST	merc.h	1863;"	d
WEAPON_GUN	merc.h	1858;"	d
WEAPON_MACE	merc.h	1853;"	d
WEAPON_MANASUCK	merc.h	1870;"	d
WEAPON_MOVESUCK	merc.h	1871;"	d
WEAPON_PARALYSIS_POISON	merc.h	1874;"	d
WEAPON_POISON	merc.h	1869;"	d
WEAPON_POLEARM	merc.h	1857;"	d
WEAPON_PUNCTURE	merc.h	1873;"	d
WEAPON_SHARP	merc.h	1865;"	d
WEAPON_SHOCKING	merc.h	1868;"	d
WEAPON_SPEAR	merc.h	1852;"	d
WEAPON_STORMING	merc.h	1875;"	d
WEAPON_SWORD	merc.h	1850;"	d
WEAPON_TWO_HANDS	merc.h	1867;"	d
WEAPON_VAMPIRIC	merc.h	1864;"	d
WEAPON_VORPAL	merc.h	1866;"	d
WEAPON_WHIP	merc.h	1856;"	d
WEAR_ABOUT	merc.h	2093;"	d
WEAR_ARMS	merc.h	2091;"	d
WEAR_FEET	merc.h	2089;"	d
WEAR_FINGER_L	merc.h	2082;"	d
WEAR_FINGER_R	merc.h	2083;"	d
WEAR_FLOAT	merc.h	2099;"	d
WEAR_HANDS	merc.h	2090;"	d
WEAR_HEAD	merc.h	2087;"	d
WEAR_HOLD	merc.h	2098;"	d
WEAR_LEGS	merc.h	2088;"	d
WEAR_LIGHT	merc.h	2081;"	d
WEAR_NECK_1	merc.h	2084;"	d
WEAR_NECK_2	merc.h	2085;"	d
WEAR_NONE	merc.h	2080;"	d
WEAR_SECONDARY	merc.h	2100;"	d
WEAR_SHIELD	merc.h	2092;"	d
WEAR_TORSO	merc.h	2086;"	d
WEAR_WAIST	merc.h	2094;"	d
WEAR_WIELD	merc.h	2097;"	d
WEAR_WRIST_L	merc.h	2095;"	d
WEAR_WRIST_R	merc.h	2096;"	d
WEATHER_DATA	merc.h	/^typedef struct  weather_data     WEATHER_DATA;$/;"	t	typeref:struct:weather_data
WEEK	merc.h	278;"	d
WEIGHT_MULT	merc.h	3885;"	d
WHITE	merc.h	360;"	d
WILL	telnet.h	19;"	d
WIZ_ASAVE	merc.h	2260;"	d
WIZ_AUTH	merc.h	2262;"	d
WIZ_BUGS	merc.h	2266;"	d
WIZ_CHEAT	merc.h	2263;"	d
WIZ_DATA	merc.h	/^typedef struct	wiz_data         WIZ_DATA;$/;"	t	typeref:struct:wiz_data
WIZ_DEATHS	merc.h	2245;"	d
WIZ_FILE	merc.h	4119;"	d
WIZ_FLAGS	merc.h	2248;"	d
WIZ_FTAG	merc.h	2261;"	d
WIZ_LEVELS	merc.h	2251;"	d
WIZ_LINKS	merc.h	2244;"	d
WIZ_LOAD	merc.h	2256;"	d
WIZ_LOGINS	merc.h	2242;"	d
WIZ_MEMCHECK	merc.h	2265;"	d
WIZ_MOBDEATHS	merc.h	2247;"	d
WIZ_NEWBIE	merc.h	2257;"	d
WIZ_ON	merc.h	2240;"	d
WIZ_PENALTIES	merc.h	2249;"	d
WIZ_PREFIX	merc.h	2258;"	d
WIZ_RELIGION	merc.h	2264;"	d
WIZ_RESETS	merc.h	2246;"	d
WIZ_RESTORE	merc.h	2255;"	d
WIZ_SACCING	merc.h	2250;"	d
WIZ_SECURE	merc.h	2252;"	d
WIZ_SITES	merc.h	2243;"	d
WIZ_SNOOPS	merc.h	2254;"	d
WIZ_SPAM	merc.h	2259;"	d
WIZ_SWITCHES	merc.h	2253;"	d
WIZ_TICKS	merc.h	2241;"	d
WONT	telnet.h	18;"	d
WORLD_SIZE	hunt.c	63;"	d	file:
Write	protocol.c	/^static void Write( descriptor_t *apDescriptor, const char *apData )$/;"	f	file:
WriteOOB	protocol.h	/^   int       WriteOOB;         \/* Used internally to indicate OOB data *\/$/;"	m	struct:__anon13
X	merc.h	1159;"	d
Y	merc.h	1160;"	d
YEAR	merc.h	280;"	d
YELLOW	merc.h	356;"	d
Z	merc.h	1161;"	d
__buffer_new	buffer.c	/^DBUFFER * __buffer_new (int min_size)$/;"	f
__buffer_strcat	buffer.c	/^void __buffer_strcat (DBUFFER *buffer, const char *text)$/;"	f
_arpa_telnet_h	telnet.h	13;"	d
_hash_enter	hunt.c	/^void _hash_enter(struct hash_header *ht,int key,void *data)$/;"	f
aa	merc.h	1163;"	d
abbreviation	tables.h	/^	char *abbreviation;$/;"	m	struct:stat_type
ac	merc.h	/^	sh_int      ac[4];$/;"	m	struct:mob_index_data_old
ac_percent	merc.h	/^    sh_int      ac_percent;$/;"	m	struct:mob_index_data
ac_type	tables.c	/^const struct flag_type ac_type[] =$/;"	v	typeref:struct:flag_type
ach_reward	merc.h	/^   int ach_reward; $/;"	m	struct:achievement_entry
achievement_display	act_info.c	/^msl_string achievement_display [] =$/;"	v
achievement_entry	merc.h	/^struct achievement_entry$/;"	s
achievement_reward	act_info.c	/^void achievement_reward( CHAR_DATA *ch, int table_index)$/;"	f
achievement_table	tables.c	/^const ACHIEVEMENT achievement_table [] =$/;"	v
achievements	merc.h	/^    tflag       achievements;$/;"	m	struct:pc_data
achpoints	merc.h	/^    int             achpoints; \/* Astark September 2012*\/$/;"	m	struct:pc_data
acid_effect	effects.c	/^void acid_effect(void *vo, int level, int dam, int target)$/;"	f
act	comm.c	/^void act( const char *format, CHAR_DATA *ch, const void *arg1, const void *arg2,$/;"	f
act	merc.h	/^	tflag        act;$/;"	m	struct:char_data
act	merc.h	/^	tflag        act;$/;"	m	struct:mob_index_data_old
act	merc.h	/^	tflag   act;            \/* act bits for the race *\/$/;"	m	struct:race_type
act	merc.h	/^    tflag       act;$/;"	m	struct:mob_index_data
act_bits_name	handler.c	/^char* act_bits_name( tflag flag )$/;"	f
act_flags	tables.c	/^const struct flag_type act_flags[] =$/;"	v	typeref:struct:flag_type
act_gag	comm.c	/^void act_gag(const char *format, CHAR_DATA *ch, const void *arg1, $/;"	f
act_new	comm.c	/^void act_new( const char *format, CHAR_DATA *ch, const void *arg1, $/;"	f
act_new_gag	comm.c	/^void act_new_gag( const char *format, CHAR_DATA *ch, const void *arg1, $/;"	f
act_non_wizi	mob_cmds.c	/^void act_non_wizi(const char *format, CHAR_DATA *ch, $/;"	f
act_see	comm.c	/^void act_see( const char *format, CHAR_DATA *ch, const void *arg1, $/;"	f
act_tell_char	act_comm.c	/^void act_tell_char( CHAR_DATA *ch, CHAR_DATA *victim, char *argument )$/;"	f
active	merc.h	/^    bool     active;           $/;"	m	struct:clan_data
active_char	alias.c	/^static CHAR_DATA *active_char = NULL;$/;"	v	file:
add_apply	handler.c	/^void add_apply(CHAR_DATA *ch, int mod, int location)$/;"	f
add_area_world	aclone.c	/^void add_area_world( AREA_DATA *area )$/;"	f
add_auto_auth	auth.c	/^void add_auto_auth( char *name )$/;"	f
add_buf	recycle.c	/^bool add_buf(BUFFER *buffer, char *string)$/;"	f
add_buff	comm.c	/^bool add_buff(BUFFER *buffer, char *fmt, ...)$/;"	f
add_buff_pad	comm.c	/^bool add_buff_pad(BUFFER *buffer, int pad_length, char *fmt, ...)$/;"	f
add_clanwar_node	clanwar.c	/^void add_clanwar_node(CHAR_DATA *ch, sh_int other_clan, int status)$/;"	f
add_craft_affect	crafting.c	/^void add_craft_affect( OBJ_DATA *obj, AFFECT_DATA *aff )$/;"	f
add_craft_affect_physical	crafting.c	/^void add_craft_affect_physical( OBJ_DATA *obj, AFFECT_DATA *aff )$/;"	f
add_descriptor	comm.c	/^void add_descriptor( DESCRIPTOR_DATA *d )$/;"	f
add_enchant_affect	enchant.c	/^void add_enchant_affect( OBJ_DATA *obj, AFFECT_DATA *aff )$/;"	f
add_follower	act_comm.c	/^void add_follower( CHAR_DATA *ch, CHAR_DATA *master )$/;"	f
add_money	handler.c	/^void add_money( CHAR_DATA *ch, int gold, int silver, CHAR_DATA *source )$/;"	f
add_money_mixed	handler.c	/^void add_money_mixed( CHAR_DATA *ch, int silver, CHAR_DATA *source )$/;"	f
add_religion	religion.c	/^void add_religion( RELIGION_DATA *religion )$/;"	f
add_reset	olc.c	/^void add_reset( ROOM_INDEX_DATA *room, RESET_DATA *pReset, int index )$/;"	f
add_room_world	aclone.c	/^void add_room_world( ROOM_INDEX_DATA *room )$/;"	f
add_tattoo	tattoo.c	/^void add_tattoo( tattoo_list tl, int loc, int ID )$/;"	f
add_timer	timer.c	/^static void add_timer( TIMER_NODE *tmr)$/;"	f	file:
add_to_auth	auth.c	/^void add_to_auth( CHAR_DATA *ch )$/;"	f
add_to_comm_history	playback.c	/^void add_to_comm_history ( COMM_HISTORY *history, COMM_ENTRY *entry ) $/;"	f
add_war_kills	warfare.c	/^void add_war_kills( CHAR_DATA *ch )$/;"	f
adjust_align_change	religion.c	/^double adjust_align_change( CHAR_DATA *ch, double change )$/;"	f
adjust_alignment	fight.c	/^void adjust_alignment( CHAR_DATA *gch, CHAR_DATA *victim, int base_xp, float gain_factor )$/;"	f
adjust_damage	fight.c	/^int adjust_damage(CHAR_DATA *ch, CHAR_DATA *victim, int dam, int dam_type)$/;"	f
adjust_gain	update.c	/^int adjust_gain( CHAR_DATA *ch, int gain, int target )$/;"	f
adjust_obj_weight	olc_act.c	/^bool adjust_obj_weight( OBJ_INDEX_DATA *obj )$/;"	f
adjust_pkgrade	fight.c	/^void adjust_pkgrade( CHAR_DATA *killer, CHAR_DATA *victim, bool theft )$/;"	f
adjust_spell_damage	magic.c	/^int adjust_spell_damage( int dam, CHAR_DATA *ch )$/;"	f
adjust_wargrade	fight.c	/^void adjust_wargrade( CHAR_DATA *killer, CHAR_DATA *victim )$/;"	f
adjust_weapon_dam	olc_act.c	/^bool adjust_weapon_dam( OBJ_INDEX_DATA *pObj )$/;"	f
advance_level	update.c	/^void advance_level( CHAR_DATA *ch, bool hide )$/;"	f
aedit	olc.c	/^void aedit( CHAR_DATA *ch, char *argument )$/;"	f
aedit_addaprog	olc.h	/^DECLARE_OLC_FUN( aedit_addaprog  );  \/* ROM *\/$/;"	v
aedit_age	olc.h	/^DECLARE_OLC_FUN( aedit_age		);$/;"	v
aedit_builder	olc.h	/^DECLARE_OLC_FUN( aedit_builder		);$/;"	v
aedit_clone	olc.h	/^DECLARE_OLC_FUN( aedit_clone		);$/;"	v
aedit_create	olc.h	/^DECLARE_OLC_FUN( aedit_create		);$/;"	v
aedit_credits	olc.h	/^DECLARE_OLC_FUN( aedit_credits		);$/;"	v
aedit_delaprog	olc.h	/^DECLARE_OLC_FUN( aedit_delaprog  );  \/* ROM *\/$/;"	v
aedit_file	olc.h	/^DECLARE_OLC_FUN( aedit_file		);$/;"	v
aedit_lvnum	olc.h	/^DECLARE_OLC_FUN( aedit_lvnum		);$/;"	v
aedit_maxlevel	olc.h	/^DECLARE_OLC_FUN( aedit_maxlevel        );$/;"	v
aedit_miniquests	olc.h	/^DECLARE_OLC_FUN( aedit_miniquests        );$/;"	v
aedit_minlevel	olc.h	/^DECLARE_OLC_FUN( aedit_minlevel         );$/;"	v
aedit_move	olc.h	/^DECLARE_OLC_FUN( aedit_move		);$/;"	v
aedit_name	olc.h	/^DECLARE_OLC_FUN( aedit_name		);$/;"	v
aedit_notes	olc.h	/^DECLARE_OLC_FUN( aedit_notes        );$/;"	v
aedit_purge	olc.h	/^DECLARE_OLC_FUN( aedit_purge		);$/;"	v
aedit_remort	olc.h	/^DECLARE_OLC_FUN( aedit_remort		);$/;"	v
aedit_reset	olc.h	/^DECLARE_OLC_FUN( aedit_reset		);$/;"	v
aedit_reset_time	olc.h	/^DECLARE_OLC_FUN( aedit_reset_time   );$/;"	v
aedit_scrap	olc.h	/^DECLARE_OLC_FUN( aedit_scrap		);$/;"	v
aedit_security	olc.h	/^DECLARE_OLC_FUN( aedit_security		);$/;"	v
aedit_show	olc.h	/^DECLARE_OLC_FUN( aedit_show		);$/;"	v
aedit_table	olc.c	/^const struct olc_cmd_type aedit_table[] =$/;"	v	typeref:struct:olc_cmd_type
aedit_uvnum	olc.h	/^DECLARE_OLC_FUN( aedit_uvnum		);$/;"	v
aedit_vnum	olc.h	/^DECLARE_OLC_FUN( aedit_vnum		);$/;"	v
aff_cmp	handler.c	/^int aff_cmp( AFFECT_DATA *af1, AFFECT_DATA *af2 )$/;"	f
affcmp	handler.c	1293;"	d	file:
affcmp	handler.c	1301;"	d	file:
affect_bit_name	handler.c	/^char* affect_bit_name( int flag )$/;"	f
affect_bits_name	handler.c	/^char* affect_bits_name( tflag flag )$/;"	f
affect_check	handler.c	/^void affect_check(CHAR_DATA *ch,int where,int vector)$/;"	f
affect_data	merc.h	/^struct  affect_data$/;"	s
affect_field	merc.h	/^        tflag       affect_field;$/;"	m	struct:char_data
affect_field	merc.h	/^        tflag       affect_field;$/;"	m	struct:mob_index_data_old
affect_field	merc.h	/^        tflag   affect_field;   \/* aff bits for the race *\/$/;"	m	struct:race_type
affect_field	merc.h	/^    tflag       affect_field;$/;"	m	struct:mob_index_data
affect_find	handler.c	/^AFFECT_DATA *affect_find(AFFECT_DATA *paf, int sn)$/;"	f
affect_find_flag	handler.c	/^AFFECT_DATA *affect_find_flag(AFFECT_DATA *paf, int flag)$/;"	f
affect_flags	tables.c	/^const struct flag_type affect_flags[] =$/;"	v	typeref:struct:flag_type
affect_insert	handler.c	/^AFFECT_DATA* affect_insert( AFFECT_DATA *affect_list, AFFECT_DATA *paf )$/;"	f
affect_join	handler.c	/^void affect_join( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_level	handler.c	/^int affect_level( CHAR_DATA *ch, int sn )$/;"	f
affect_loc_name	handler.c	/^char *affect_loc_name( int location )$/;"	f
affect_modify	handler.c	/^void affect_modify( CHAR_DATA *ch, AFFECT_DATA *paf, bool fAdd )$/;"	f
affect_modify_new	handler.c	/^void affect_modify_new( CHAR_DATA *ch, AFFECT_DATA *paf, bool fAdd, bool drop )$/;"	f
affect_remove	handler.c	/^void affect_remove( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_remove_obj	handler.c	/^void affect_remove_obj( OBJ_DATA *obj, AFFECT_DATA *paf)$/;"	f
affect_spellup_mob	db.c	/^void affect_spellup_mob( CHAR_DATA *mob )$/;"	f
affect_strip	handler.c	/^void affect_strip( CHAR_DATA *ch, int sn )$/;"	f
affect_strip_flag	handler.c	/^void affect_strip_flag( CHAR_DATA *ch, int flag )$/;"	f
affect_strip_obj	handler.c	/^void affect_strip_obj( OBJ_DATA *obj, int sn )$/;"	f
affect_strip_offensive	handler.c	/^void affect_strip_offensive( CHAR_DATA *ch )$/;"	f
affect_to_char	handler.c	/^void affect_to_char( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_to_char_tagsafe	handler.c	/^void affect_to_char_tagsafe( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
affect_to_obj	handler.c	/^void affect_to_obj(OBJ_DATA *obj, AFFECT_DATA *paf)$/;"	f
affect_to_obj_tagsafe	handler.c	/^void affect_to_obj_tagsafe(OBJ_DATA *obj, AFFECT_DATA *paf)$/;"	f
affect_update	update.c	/^void affect_update( CHAR_DATA *ch )$/;"	f
affected	merc.h	/^	AFFECT_DATA *   affected;$/;"	m	struct:char_data
affected	merc.h	/^	AFFECT_DATA *   affected;$/;"	m	struct:obj_data
affected	merc.h	/^	AFFECT_DATA *   affected;$/;"	m	struct:obj_index_data
age	merc.h	/^	sh_int      age;$/;"	m	struct:area_data
aggr_update	update.c	/^void aggr_update( void )$/;"	f
aggressors	merc.h	/^	MEM_DATA *		aggressors;$/;"	m	struct:char_data
agi_app_defensive	stats.c	/^int agi_app_defensive(int x)$/;"	f
aim_targets	fight2.c	/^const char* aim_targets[] = { "head", "hand", "foot", "" };$/;"	v
alias	merc.h	/^    char *      alias[MAX_ALIAS];$/;"	m	struct:pc_data
alias_sub	merc.h	/^    char *      alias_sub[MAX_ALIAS];$/;"	m	struct:pc_data
align	merc.h	/^    int align;$/;"	m	struct:align_type
align_lookup	lookup.c	/^int align_lookup (const char *name)$/;"	f
align_table	const.c	/^struct align_type align_table [] =$/;"	v	typeref:struct:align_type
align_type	merc.h	/^struct align_type$/;"	s
alignment	merc.h	/^	sh_int      alignment;$/;"	m	struct:char_data
alignment	merc.h	/^	sh_int      alignment;$/;"	m	struct:mob_index_data_old
alignment	merc.h	/^    sh_int      alignment;$/;"	m	struct:mob_index_data
all_colour	handler.c	/^void all_colour( CHAR_DATA *ch, char *argument )$/;"	f
all_religions	religion.c	/^void all_religions( RELIGION_FUN *rel_fun )$/;"	f
alloc	lua_arclib.h	/^    void *(*alloc);$/;"	m	struct:lua_obj_type
alloc_mem	db.c	/^void *alloc_mem( int sMem )$/;"	f
alloc_perm	db.c	/^void *alloc_perm( int sMem )$/;"	f
allow_recruits	merc.h	/^    bool     allow_recruits;    \/* Whether or not players may currently recruit to this clan. *\/$/;"	m	struct:clan_data
alt_flagvalue	olc_act.c	/^long alt_flagvalue( const struct flag_type *flag_table, char *argument )$/;"	f
alt_flagvalue_toggle	olc_act.c	/^long alt_flagvalue_toggle( long old_flag, const struct flag_type *flag_table,$/;"	f
altar_room_vnum	religion.h	/^    int altar_room_vnum;$/;"	m	struct:religion_data
ancestor	hunt.c	/^    int   ancestor;$/;"	m	struct:nodes	file:
answer	merc.h	/^	int answer[3];          \/* {j *\/$/;"	m	struct:pc_data
answer_text	merc.h	/^	int answer_text[3];     \/* {J *\/$/;"	m	struct:pc_data
anti_spam_interpret	alias.c	/^void anti_spam_interpret( CHAR_DATA *ch, char *argument )$/;"	f
ap_boot_trigger	area_prog.c	/^void ap_boot_trigger()$/;"	f
ap_enter_trigger	area_prog.c	/^bool ap_enter_trigger(CHAR_DATA *ch, AREA_DATA *from_area)$/;"	f
ap_exit_trigger	area_prog.c	/^bool ap_exit_trigger(CHAR_DATA *ch, AREA_DATA *to_area)$/;"	f
ap_percent_trigger	area_prog.c	/^bool ap_percent_trigger($/;"	f
ap_quit_trigger	area_prog.c	/^void ap_quit_trigger(CHAR_DATA *ch)$/;"	f
ap_recall_trigger	area_prog.c	/^bool ap_recall_trigger( CHAR_DATA *ch)$/;"	f
ap_renter_trigger	area_prog.c	/^bool ap_renter_trigger(CHAR_DATA *ch)$/;"	f
ap_rexit_trigger	area_prog.c	/^bool ap_rexit_trigger(CHAR_DATA *ch)$/;"	f
ap_shutdown_trigger	area_prog.c	/^void ap_shutdown_trigger()$/;"	f
ap_timer_trigger	area_prog.c	/^void ap_timer_trigger( AREA_DATA *area )$/;"	f
ap_unvoid_trigger	area_prog.c	/^bool ap_unvoid_trigger( CHAR_DATA *ch)$/;"	f
ap_void_trigger	area_prog.c	/^void ap_void_trigger(CHAR_DATA *ch)$/;"	f
apedit	olc_apcode.c	/^void apedit( CHAR_DATA *ch, char *argument)$/;"	f
apedit_code	olc.h	/^DECLARE_OLC_FUN( apedit_code     );$/;"	v
apedit_create	olc.h	/^DECLARE_OLC_FUN( apedit_create   );$/;"	v
apedit_delete	olc.h	/^DECLARE_OLC_FUN( apedit_delete   );$/;"	v
apedit_security	olc.h	/^DECLARE_OLC_FUN( apedit_security );$/;"	v
apedit_show	olc.h	/^DECLARE_OLC_FUN( apedit_show     );$/;"	v
apedit_table	olc_apcode.c	/^const struct olc_cmd_type apedit_table[] =$/;"	v	typeref:struct:olc_cmd_type
append_file	db.c	/^void append_file( CHAR_DATA *ch, char *file, char *str )$/;"	f
append_note	board.c	/^static void append_note (FILE *fp, NOTE_DATA *note)$/;"	f	file:
apply_ac	handler.c	/^int apply_ac( OBJ_DATA *obj, int iWear, int type )$/;"	f
apply_flags	tables.c	/^const struct flag_type apply_flags[] =$/;"	v	typeref:struct:flag_type
apply_obj_hardcaps	olc_act.c	/^bool apply_obj_hardcaps( OBJ_INDEX_DATA *obj )$/;"	f
apply_string	tables.h	/^    char *apply_string;                        \/* "no-channelled", "no-emoted", "frozen", etc. *\/$/;"	m	struct:penalty_type
apply_types	tables.c	/^const   struct  flag_type   apply_types []  =$/;"	v	typeref:struct:flag_type
aprog_flags	merc.h	/^    tflag   aprog_flags;$/;"	m	struct:area_data
aprog_flags	tables.c	/^const struct flag_type aprog_flags[] =$/;"	v	typeref:struct:flag_type
aprog_list	db.c	/^PROG_CODE *    aprog_list;$/;"	v
aprog_setup	area_prog.c	/^void aprog_setup( AREA_DATA *area )$/;"	f
aprog_timer_init	area_prog.c	/^void aprog_timer_init( AREA_DATA *area)$/;"	f
aprogs	merc.h	/^    PROG_LIST *aprogs;$/;"	m	struct:area_data
arcane_cost	healer.c	/^static SPELL_COST arcane_cost[] =$/;"	v	file:
archive_note	board.c	/^static void archive_note (BOARD_DATA *board, NOTE_DATA *pnote)$/;"	f	file:
area	merc.h	/^	AREA_DATA *        area;       \/* OLC *\/$/;"	m	struct:obj_index_data
area	merc.h	/^	AREA_DATA *     area;       \/* OLC *\/$/;"	m	struct:mob_index_data_old
area	merc.h	/^    AREA_DATA *     area;$/;"	m	struct:room_index_data
area	merc.h	/^    AREA_DATA*  area;$/;"	m	struct:mob_index_data
area	merc.h	/^   AREA_DATA *  area;$/;"	m	struct:help_area_data
area_data	merc.h	/^struct  area_data$/;"	s
area_first	db.c	/^AREA_DATA *     area_first;$/;"	v
area_flags	merc.h	/^	tflag       area_flags; \/* OLC *\/$/;"	m	struct:area_data
area_flags	tables.c	/^const struct flag_type area_flags[] =$/;"	v	typeref:struct:flag_type
area_last	db.c	/^AREA_DATA *     area_last;$/;"	v
area_name	act_info.c	/^    char * area_name;$/;"	m	struct:newbie_data	file:
area_update	db.c	/^void area_update( bool all )$/;"	f
area_version	db.c	/^int area_version = 0;$/;"	v
arg1	merc.h	/^	sh_int      arg1;$/;"	m	struct:reset_data
arg2	merc.h	/^	sh_int      arg2;$/;"	m	struct:reset_data
arg3	merc.h	/^	sh_int      arg3;$/;"	m	struct:reset_data
arg4	merc.h	/^	sh_int      arg4;$/;"	m	struct:reset_data
arg_list	lua_scripting.c	/^    const char *arg_list[];$/;"	m	struct:lua_scripter	file:
args	merc.h	51;"	d
arm_npc	db.c	/^void arm_npc( CHAR_DATA *mob )$/;"	f
armageddon_kills	merc.h	/^	int                 armageddon_kills;$/;"	m	struct:pc_data
armageddon_lost	merc.h	/^	int                 armageddon_lost;$/;"	m	struct:pc_data
armageddon_won	merc.h	/^	int                 armageddon_won;$/;"	m	struct:pc_data
armor	merc.h	/^	sh_int      armor[4];$/;"	m	struct:char_data
assign_area_vnum	db.c	/^void assign_area_vnum( int vnum )$/;"	f
assigned_die	merc.h	/^	int     assigned_die[MAX_EXT_STATS];$/;"	m	struct:gen_data
atrig_timer	merc.h	/^    TIMER_NODE *atrig_timer; \/* should not be touched except in timer.c *\/$/;"	m	struct:area_data
attack_affect_strip	fight.c	/^void attack_affect_strip( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
attack_factor	merc.h	/^    sh_int  attack_factor;      \/* replace the old thac0 values --Bobble *\/$/;"	m	struct:class_type
attack_lookup	handler.c	/^int attack_lookup  (const char *name)$/;"	f
attack_table	const.c	/^const   struct attack_type  attack_table    [MAX_DAMAGE_MESSAGE]    =$/;"	v	typeref:struct:attack_type
attack_type	merc.h	/^struct attack_type$/;"	s
attacks_attempts	merc.h	/^	int	attacks_attempts;$/;"	m	struct:char_data
attacks_misses	merc.h	/^	int	attacks_misses;$/;"	m	struct:char_data
attacks_success	merc.h	/^	int	attacks_success;$/;"	m	struct:char_data
attr_prime	merc.h	/^    sh_int  attr_prime;     \/* Prime attribute      *\/$/;"	m	struct:class_type
attr_second	merc.h	/^    sh_int  attr_second[2]; \/* Secondary attributes  *\/$/;"	m	struct:class_type
auction	merc.h	/^	int auction[3];         \/* {a *\/$/;"	m	struct:pc_data
auction_text	merc.h	/^	int auction_text[3];    \/* {A *\/$/;"	m	struct:pc_data
aura_damage	fight.c	/^void aura_damage( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield )$/;"	f
auth_list	merc.h	/^struct auth_list$/;"	s
auth_state	merc.h	/^    sh_int      auth_state;$/;"	m	struct:pc_data
auth_types	merc.h	/^} auth_types;$/;"	t	typeref:enum:__anon3
auth_update	auth.c	/^void auth_update( void ) $/;"	f
authed_by	merc.h	/^    char *      authed_by;$/;"	m	struct:pc_data
authed_by	merc.h	/^   char  * authed_by;	   \/* Name of immortal who authorized the name *\/$/;"	m	struct:auth_list
auto_assign_stats	stats.c	/^void auto_assign_stats(CHAR_DATA *ch)$/;"	f
auto_war	warfare.c	/^void auto_war(void)$/;"	f
auto_war_time	warfare.c	/^long auto_war_time = 0;$/;"	v
availability	remort.c	/^    int availability;$/;"	m	struct:remort_chamber	file:
available_slots	merc.h	/^    int      available_slots;   \/* Number of players that may currently be promoted to this rank. *\/$/;"	m	struct:clan_rank_data
average_mob_damage	olc_act.c	/^int average_mob_damage( int level )$/;"	f
average_mob_hp	olc_act.c	/^int average_mob_hp( int level )$/;"	f
average_roll	olc_act.c	/^int average_roll( int nr, int type, int bonus )$/;"	f
average_weapon_dam	grep.c	/^int average_weapon_dam( OBJ_DATA *obj )$/;"	f
average_weapon_index_dam	grep.c	/^int average_weapon_index_dam( OBJ_INDEX_DATA *obj )$/;"	f
b256Support	protocol.h	/^   support_t b256Support;      \/* The client supports XTerm 256 colors *\/$/;"	m	struct:__anon13
bATCP	protocol.h	/^   bool_t    bATCP;            \/* The client supports ATCP *\/$/;"	m	struct:__anon13
bBlockMXP	protocol.h	/^   bool_t    bBlockMXP;        \/* Used internally based on MXP version *\/$/;"	m	struct:__anon13
bCHARSET	protocol.h	/^   bool_t    bCHARSET;         \/* The client supports CHARSET *\/$/;"	m	struct:__anon13
bConfigurable	protocol.h	/^   bool_t       bConfigurable; \/* Can it be configured by the client? *\/$/;"	m	struct:__anon10
bDirty	protocol.h	/^   bool_t       bDirty;        \/* Does this variable need to be sent again? *\/$/;"	m	struct:__anon11
bECHO	protocol.h	/^   bool_t    bECHO;            \/* Toggles ECHO on\/off *\/$/;"	m	struct:__anon13
bGUI	protocol.h	/^   bool_t       bGUI;          \/* It's a special GUI configuration variable *\/$/;"	m	struct:__anon10
bIACMode	protocol.h	/^   bool_t    bIACMode;         \/* Current mode - deals with broken packets *\/$/;"	m	struct:__anon13
bMCCP	protocol.h	/^   bool_t    bMCCP;            \/* The client supports MCCP *\/$/;"	m	struct:__anon13
bMSDP	protocol.h	/^   bool_t    bMSDP;            \/* The client supports MSDP *\/$/;"	m	struct:__anon13
bMSP	protocol.h	/^   bool_t    bMSP;             \/* The client supports MSP *\/$/;"	m	struct:__anon13
bMSSP	protocol.h	/^   bool_t    bMSSP;            \/* The client supports MSSP *\/$/;"	m	struct:__anon13
bMXP	protocol.h	/^   bool_t    bMXP;             \/* The client supports MXP *\/$/;"	m	struct:__anon13
bNAWS	protocol.h	/^   bool_t    bNAWS;            \/* The client supports NAWS *\/$/;"	m	struct:__anon13
bNeedMXPVersion	protocol.h	/^   bool_t    bNeedMXPVersion;  \/* Workaround for clients that autoconnect *\/$/;"	m	struct:__anon13
bNegotiated	protocol.h	/^   bool_t    bNegotiated;      \/* Indicates client successfully negotiated *\/$/;"	m	struct:__anon13
bRenegotiate	protocol.h	/^   bool_t    bRenegotiate;     \/* Workaround for clients that autoconnect *\/$/;"	m	struct:__anon13
bReport	protocol.h	/^   bool_t       bReport;       \/* Is this variable being reported? *\/$/;"	m	struct:__anon11
bString	protocol.h	/^   bool_t       bString;       \/* Is this variable a string or a number? *\/$/;"	m	struct:__anon10
bTTYPE	protocol.h	/^   bool_t    bTTYPE;           \/* The client supports TTYPE *\/$/;"	m	struct:__anon13
bWriteOnce	protocol.h	/^   bool_t       bWriteOnce;    \/* Can only set this variable once *\/$/;"	m	struct:__anon10
backstab_char	fight2.c	/^void backstab_char( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
bamfin	merc.h	/^    char *      bamfin;$/;"	m	struct:pc_data
bamfout	merc.h	/^    char *      bamfout;$/;"	m	struct:pc_data
ban_data	merc.h	/^struct  ban_data$/;"	s
ban_flags	merc.h	/^	tflag   ban_flags;$/;"	m	struct:ban_data
ban_free	recycle.c	/^BAN_DATA *ban_free;$/;"	v
ban_list	ban.c	/^BAN_DATA *ban_list;$/;"	v
ban_site	ban.c	/^void ban_site(CHAR_DATA *ch, char *argument, bool fPerm)$/;"	f
bank	merc.h	/^	long		bank;$/;"	m	struct:pc_data
base_group	merc.h	/^    char *  base_group;     \/* base skills gained       *\/$/;"	m	struct:class_type
basic_dam_name	olc_act.c	/^char* basic_dam_name( int dam_type )$/;"	f
basic_dam_names	olc_act.c	/^static const char* basic_dam_names[MAX_DAM_TYPE] = $/;"	v	file:
battle_prompt	comm.c	/^void battle_prompt( DESCRIPTOR_DATA *d )$/;"	f
bb	merc.h	1164;"	d
bcopy	hunt.c	/^void bcopy(register char *s1,register char *s2,int len)$/;"	f
beats	merc.h	/^	sh_int  beats;          \/* Waiting time after use   *\/$/;"	m	struct:skill_type
behead	fight2.c	/^void behead(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
behead_cnt	merc.h	/^    sh_int          behead_cnt;$/;"	m	struct:pc_data
beof	buffer_util.c	/^bool beof( RBUFFER *rbuf )$/;"	f
bgetc	buffer_util.c	/^char bgetc( RBUFFER *rbuf )$/;"	f
bin_info_string	comm.c	/^const char *bin_info_string=$/;"	v
bin_info_string	merc.h	/^const char *	bin_info_string;$/;"	v
bit	tables.h	/^    int bit;$/;"	m	struct:flag_type
bit	tables.h	/^    long bit;                                  \/* flag bit to assign to player *\/$/;"	m	struct:penalty_type
bit_list_to_tflag	tflag.c	/^void bit_list_to_tflag( tflag f )$/;"	f
bit_type	tables.h	/^struct bit_type$/;"	s
bit_vector	merc.h	/^   int bit_vector;$/;"	m	struct:achievement_entry
bitch	merc.h	/^	int bitch[3];           \/* {f *\/$/;"	m	struct:pc_data
bitch_text	merc.h	/^	int bitch_text[3];      \/* {F *\/$/;"	m	struct:pc_data
bits	merc.h	/^	unsigned int bits;$/;"	m	struct:explore_holder
bitvector	merc.h	/^    int         bitvector;$/;"	m	struct:affect_data
bitvector_type	tables.c	/^const   struct  bit_type    bitvector_type  []  =$/;"	v	typeref:struct:bit_type
bless	lua_arclib.c	/^GODLIBHELP_DURATION( bless );$/;"	v
blind_penalty	fight.c	/^bool blind_penalty( CHAR_DATA *ch )$/;"	f
board	merc.h	/^    BOARD_DATA *  board;                \/* The current board *\/$/;"	m	struct:pc_data
board_data	merc.h	/^struct board_data$/;"	s
board_lookup	board.c	/^int board_lookup (const char *name)$/;"	f
board_number	board.c	/^int board_number (const BOARD_DATA *board)$/;"	f
boards	board.c	/^BOARD_DATA boards[MAX_BOARD] =$/;"	v
bool	merc.h	/^typedef unsigned char           bool;$/;"	t
bool_t	protocol.h	/^} bool_t;$/;"	t	typeref:enum:__anon6
boot_db	db.c	/^void boot_db()$/;"	f
bootup_temp_clean_done	simsave.c	/^static bool bootup_temp_clean_done = FALSE;$/;"	v	file:
bounty	merc.h	/^    int         bounty;$/;"	m	struct:pc_data
bounty_sort	merc.h	/^    SORT_TABLE *    bounty_sort;$/;"	m	struct:pc_data
bounty_table	db.c	/^SORT_TABLE *    bounty_table;$/;"	v
box_data	merc.h	/^    OBJ_DATA *	box_data[MAX_STORAGE_BOX];\/*So we know if boxes are loaded and have easy access to them for saving purposes*\/$/;"	m	struct:pc_data
box_mf_list	simsave.c	/^MEMFILE *box_mf_list     = NULL;$/;"	v
boxtemp	simsave.c	/^bool boxtemp = FALSE;\/\/track if there are temp box files needing to be moved$/;"	v
bprintf	buffer.c	/^int bprintf (DBUFFER *buffer, char *fmt, ...)$/;"	f
bread_char	bsave.c	/^void bread_char( CHAR_DATA *ch, RBUFFER *buf )$/;"	f
bread_flag	db.c	/^long bread_flag( RBUFFER *rbuf )$/;"	f
bread_letter	db.c	/^char bread_letter( RBUFFER *rbuf )$/;"	f
bread_number	db.c	/^int bread_number( RBUFFER *rbuf )$/;"	f
bread_obj	bsave.c	/^void bread_obj( CHAR_DATA *ch, RBUFFER *buf,OBJ_DATA *storage_box )$/;"	f
bread_pet	bsave.c	/^void bread_pet( CHAR_DATA *ch, RBUFFER *buf )$/;"	f
bread_string	db.c	/^char* bread_string( RBUFFER *rbuf )$/;"	f
bread_string_eol	db.c	/^char* bread_string_eol( RBUFFER *rbuf )$/;"	f
bread_tattoos	tattoo.c	/^void bread_tattoos( RBUFFER *rbuf, tattoo_list tl )$/;"	f
bread_tflag	tflag.c	/^void bread_tflag( RBUFFER *rbuf, tflag f )$/;"	f
bread_to_eol	db.c	/^void bread_to_eol( RBUFFER *rbuf )$/;"	f
bread_word	db.c	/^char* bread_word( RBUFFER *rbuf )$/;"	f
break_connect	nanny.c	/^bool	break_connect ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
buckets	hunt.c	/^    struct hash_link  **buckets;$/;"	m	struct:hash_header	typeref:struct:hash_header::hash_link	file:
buckets	merc.h	/^	EXPLORE_HOLDER *buckets;$/;"	m	struct:exploration_data
buf	buffer_util.h	/^  DBUFFER *buf;$/;"	m	struct:mem_file_type
buf	buffer_util.h	/^  DBUFFER *buf;$/;"	m	struct:read_buffer_type
buf	merc.h	/^    char buf[MAX_STRING_RING_BUF][MSL];$/;"	m	struct:string_ring_buf
buf_free	recycle.c	/^BUFFER *buf_free;$/;"	v
buf_size	recycle.c	/^const int buf_size[MAX_BUF_LIST] =$/;"	v
buf_string	recycle.c	/^char *buf_string(BUFFER *buffer)$/;"	f
buf_type	merc.h	/^struct buf_type$/;"	s
buffer_clear	buffer.c	/^void buffer_clear (DBUFFER *buffer)$/;"	f
buffer_free	buffer.c	/^void buffer_free (DBUFFER *buffer)$/;"	f
buffer_new	buffer.h	15;"	d
buffer_new	buffer.h	7;"	d
buffer_strcat	buffer.h	16;"	d
buffer_strcat	buffer.h	8;"	d
buffer_type	merc.h	/^struct buffer_type$/;"	s
bug	db.c	/^void bug( const char *fmt, int param )$/;"	f
bug_buf	db.c	/^char            bug_buf     [2*MAX_INPUT_LENGTH];$/;"	v
bug_string	db.c	/^void bug_string( const char *str )$/;"	f
bugf	comm.c	/^void bugf (char * fmt, ...)$/;"	f
builders	merc.h	/^        char *      builders;   \/* OLC *\/ \/* Listing of *\/$/;"	m	struct:area_data
bungetc	buffer_util.c	/^void bungetc( RBUFFER *rbuf )$/;"	f
bust_a_prompt	comm.c	/^void bust_a_prompt( CHAR_DATA *ch )$/;"	f
buy_type	merc.h	/^	sh_int  buy_type [MAX_TRADE];   \/* Item types shop will buy *\/$/;"	m	struct:shop_data
bwrite_char	bsave.c	/^void bwrite_char( CHAR_DATA *ch, DBUFFER *buf )$/;"	f
bwrite_obj	bsave.c	/^void bwrite_obj( CHAR_DATA *ch, OBJ_DATA *obj, DBUFFER *buf, int iNest )$/;"	f
bwrite_pet	bsave.c	/^void bwrite_pet( CHAR_DATA *pet, DBUFFER *buf)$/;"	f
bzero	hunt.c	/^void bzero(register char *sp,int len)$/;"	f
calc_min_max_rolled	stats.c	/^MIN_MAX_ROLLED* calc_min_max_rolled(CHAR_DATA *ch, int stat)$/;"	f
calc_smith_cost	smith.c	/^void calc_smith_cost( CHAR_DATA *ch, int *gold, int *qp )$/;"	f
calc_stats	stats.c	/^void calc_stats(CHAR_DATA *ch)$/;"	f
calculate_base_exp	fight.c	/^int calculate_base_exp( int power, CHAR_DATA *victim )$/;"	f
calculate_exp_factor	fight.c	/^float calculate_exp_factor( CHAR_DATA *gch )$/;"	f
calm	merc.h	/^    sh_int      calm;$/;"	m	struct:char_data
can_attack	fight.c	/^bool can_attack(CHAR_DATA *ch)$/;"	f
can_buy	act_obj.c	/^bool can_buy( CHAR_DATA *ch, OBJ_DATA *obj, bool quiet )$/;"	f
can_carry_n	handler.c	/^int can_carry_n( CHAR_DATA *ch )$/;"	f
can_carry_w	handler.c	/^int can_carry_w( CHAR_DATA *ch )$/;"	f
can_cast_transport	magic.c	/^bool can_cast_transport( CHAR_DATA *ch )$/;"	f
can_declare_treaty	merc.h	/^    bool     can_declare_treaty;\/* Ability to declare clan treaties  *\/$/;"	m	struct:clan_rank_data
can_declare_truce	merc.h	/^    bool     can_declare_truce; \/* Ability to declare truces in clan wars *\/$/;"	m	struct:clan_rank_data
can_declare_war	merc.h	/^    bool     can_declare_war;   \/* Ability to declare clan wars      *\/$/;"	m	struct:clan_rank_data
can_delete_reset	olc.c	/^bool can_delete_reset( RESET_DATA *reset )$/;"	f
can_delete_reset_msg	olc.c	/^bool can_delete_reset_msg( CHAR_DATA *ch, RESET_DATA *reset )$/;"	f
can_dispel	magic.c	/^bool can_dispel(int sn)$/;"	f
can_drop_obj	handler.c	/^bool can_drop_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
can_gain_skill	skills.c	/^bool can_gain_skill( CHAR_DATA *ch, int sn )$/;"	f
can_invite	merc.h	/^    bool     can_invite;        \/* Ability to invite others to join the clan *\/$/;"	m	struct:clan_rank_data
can_locate	act_info.c	/^bool can_locate( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
can_loot	act_obj.c	/^bool can_loot(CHAR_DATA *ch, OBJ_DATA *obj, bool allow_group)$/;"	f
can_marry	merc.h	/^    bool     can_marry;         \/* Ability to marry clan members.    *\/$/;"	m	struct:clan_rank_data
can_move_dir	act_move.c	/^bool can_move_dir( CHAR_DATA *ch, int dir, bool show )$/;"	f
can_move_room	act_move.c	/^bool can_move_room( CHAR_DATA *ch, ROOM_INDEX_DATA *to_room, bool show )$/;"	f
can_note	merc.h	/^    bool     can_note;          \/* Ability to read\/write clan notes. *\/$/;"	m	struct:clan_rank_data
can_order	interp.c	/^bool can_order( char *command, CHAR_DATA *victim )$/;"	f
can_remove_penalty	penalty.c	/^bool can_remove_penalty( CHAR_DATA *ch, PENALTY_DATA *pen )$/;"	f
can_see	handler.c	/^bool can_see( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
can_see_combat	handler.c	/^bool can_see_combat( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
can_see_new	handler.c	/^int can_see_new( CHAR_DATA *ch, CHAR_DATA *victim, bool combat )$/;"	f
can_see_obj	handler.c	/^bool can_see_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
can_see_room	handler.c	/^bool can_see_room( CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
can_set_motd	merc.h	/^    bool     can_set_motd;      \/* Ability to set the clan motd *\/$/;"	m	struct:clan_rank_data
can_spellup	magic.c	/^bool can_spellup( CHAR_DATA *ch, CHAR_DATA *victim, int sn )$/;"	f
can_steal	act_obj.c	/^bool can_steal( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *obj, bool verbose )$/;"	f
can_trigger	mob_prog.c	/^bool can_trigger( CHAR_DATA *mob, int trigger )$/;"	f
can_use_clantalk	merc.h	/^    bool     can_use_clantalk;  \/* Ability to see clan channel.      *\/$/;"	m	struct:clan_rank_data
can_use_obj	act_obj.c	/^bool can_use_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
can_warfare	merc.h	/^    bool     can_warfare;       \/* Ability to participate in warfare clan wars. *\/$/;"	m	struct:clan_rank_data
can_wear	grep.c	/^bool can_wear( OBJ_INDEX_DATA *obj )$/;"	f
cancel_smith	smith.c	/^void cancel_smith( CHAR_DATA *ch )$/;"	f
cap	merc.h	/^	sh_int	cap[MAX_CLASS];		\/* Maximum learnable percentage *\/$/;"	m	struct:skill_type
cap_all	db.c	/^char* cap_all( const char* str )$/;"	f
capitalize	db.c	/^char *capitalize( const char *str )$/;"	f
carried_by	merc.h	/^	CHAR_DATA *     carried_by;$/;"	m	struct:obj_data
carries_relic	religion.c	/^bool carries_relic( CHAR_DATA *ch )$/;"	f
carry_number	merc.h	/^	sh_int      carry_number;$/;"	m	struct:char_data
carry_weight	merc.h	/^	int         carry_weight;$/;"	m	struct:char_data
carrying	merc.h	/^	OBJ_DATA *      carrying;$/;"	m	struct:char_data
cast_spell	magic.c	/^void cast_spell( CHAR_DATA *ch, int sn, int chance )$/;"	f
cc	merc.h	1165;"	d
center	string.c	/^char *center( char *argument, int width, char fill )$/;"	f
cfg_enable_exp_mult	mudconfig.c	/^bool cfg_enable_exp_mult=FALSE;$/;"	v
cfg_enable_qp_mult	mudconfig.c	/^bool cfg_enable_qp_mult=FALSE;$/;"	v
cfg_exp_mult	mudconfig.c	/^float cfg_exp_mult;$/;"	v
cfg_exp_mult_default	mudconfig.c	/^const float cfg_exp_mult_default=1;$/;"	v
cfg_qp_mult	mudconfig.c	/^float cfg_qp_mult;$/;"	v
cfg_qp_mult_default	mudconfig.c	/^const float cfg_qp_mult_default=1;$/;"	v
cfg_show_exp_mult	mudconfig.c	/^bool cfg_show_exp_mult=FALSE;$/;"	v
cfg_show_qp_mult	mudconfig.c	/^bool cfg_show_qp_mult=FALSE;$/;"	v
cfg_word_of_day	mudconfig.c	/^char *cfg_word_of_day;$/;"	v
cfg_word_of_day_default	mudconfig.c	/^const char *cfg_word_of_day_default="bananahammock";$/;"	v
ch_agi_defensive	stats.c	/^int ch_agi_defensive(CHAR_DATA *ch)$/;"	f
ch_cha_aggro	stats.c	/^int ch_cha_aggro(CHAR_DATA *ch)$/;"	f
ch_con_hitp	stats.c	/^int ch_con_hitp(CHAR_DATA *ch)$/;"	f
ch_con_shock	stats.c	/^int ch_con_shock(CHAR_DATA *ch)$/;"	f
ch_dex_extrahit	stats.c	/^int ch_dex_extrahit(CHAR_DATA *ch)$/;"	f
ch_dex_tohit	stats.c	/^int ch_dex_tohit(CHAR_DATA *ch)$/;"	f
ch_dis_field	stats.c	/^int ch_dis_field(CHAR_DATA *ch)$/;"	f
ch_dis_practice	stats.c	/^int ch_dis_practice(CHAR_DATA *ch)$/;"	f
ch_int_field	stats.c	/^int ch_int_field(CHAR_DATA *ch)$/;"	f
ch_int_learn	stats.c	/^int ch_int_learn(CHAR_DATA *ch)$/;"	f
ch_luc_quest	stats.c	/^int ch_luc_quest(CHAR_DATA *ch)$/;"	f
ch_name	act_comm.c	/^char* ch_name(CHAR_DATA *ch)$/;"	f
ch_prac_gains	stats.c	/^int ch_prac_gains(CHAR_DATA *ch, int for_level)$/;"	f
ch_rel	merc.h	/^    FOLLOWER_DATA *ch_rel;$/;"	m	struct:pc_data
ch_str_carry	stats.c	/^int ch_str_carry(CHAR_DATA *ch)$/;"	f
ch_str_todam	stats.c	/^int ch_str_todam(CHAR_DATA *ch)$/;"	f
ch_str_wield	stats.c	/^int ch_str_wield(CHAR_DATA *ch)$/;"	f
ch_wis_field	stats.c	/^int ch_wis_field(CHAR_DATA *ch)$/;"	f
cha_app_aggro	stats.c	/^int cha_app_aggro(int x)$/;"	f
cha_cur_follow	magic.c	/^int cha_cur_follow( CHAR_DATA *ch )$/;"	f
cha_max_follow	magic.c	/^int cha_max_follow( CHAR_DATA *ch )$/;"	f
chain_spell	magic.c	/^void chain_spell( int sn, int level, CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
chamber_list	remort.c	/^REMORT_TABLE *chamber_list[MAX_CHAMBER];$/;"	v
chambers	remort.c	/^const struct remort_chamber chambers[] =$/;"	v	typeref:struct:remort_chamber
chance	quest.c	/^bool chance(int num)$/;"	f
change	merc.h	/^	int     change;$/;"	m	struct:weather_data
change_align	update.c	/^void change_align (CHAR_DATA *ch, int change_by)$/;"	f
change_by	merc.h	/^   char  * change_by;	   \/* Name of immortal requesting name change *\/$/;"	m	struct:auth_list
change_exit	olc_act.c	/^bool change_exit( CHAR_DATA *ch, char *argument, int door )$/;"	f
change_leader	act_comm.c	/^void change_leader( CHAR_DATA *old_leader, CHAR_DATA *new_leader )$/;"	f
change_wizlist	wizlist.c	/^void change_wizlist(CHAR_DATA *ch, bool add, int level, char *argument)$/;"	f
changed	merc.h	/^	bool changed;$/;"	m	struct:board_data
changed	merc.h	/^    bool     changed;           \/* Flag to indicate whether a clan has changed and needs to be saved *\/$/;"	m	struct:clan_data
changed_by	merc.h	/^    char *changed_by;             \/* Name of character changing this record last *\/$/;"	m	struct:penalty_data
changed_time	merc.h	/^    long changed_time;            \/* Actual date\/time of last change to this record *\/$/;"	m	struct:penalty_data
channel	merc.h	/^    sh_int channel;$/;"	m	struct:comm_history_entry
channel_init	db.c	/^void channel_init()$/;"	f
channel_type	merc.h	/^typedef struct channel_type$/;"	s
char_auto	merc.h	/^	char *      char_auto;$/;"	m	struct:social_type
char_data	merc.h	/^struct  char_data$/;"	s
char_found	merc.h	/^	char *    char_found;$/;"	m	struct:social_type
char_from_char_list	handler.c	/^void char_from_char_list( CHAR_DATA *ch )$/;"	f
char_from_room	handler.c	/^void char_from_room( CHAR_DATA *ch )$/;"	f
char_list	db.c	/^CHAR_DATA *     char_list;$/;"	v
char_list_insert	handler.c	/^void char_list_insert( CHAR_DATA *ch )$/;"	f
char_list_next_char	handler.c	/^CHAR_DATA* char_list_next_char( CHAR_DATA *ch )$/;"	f
char_look_info	act_info.c	/^char* char_look_info( CHAR_DATA *ch )$/;"	f
char_no_arg	merc.h	/^	char *    char_no_arg;$/;"	m	struct:social_type
char_not_found	merc.h	/^	char *    char_not_found;$/;"	m	struct:social_type
char_to_room	handler.c	/^void char_to_room( CHAR_DATA *ch, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
char_update	update.c	/^void char_update( void )$/;"	f
character	merc.h	/^	CHAR_DATA *     character;$/;"	m	struct:descriptor_data
charm	interp.h	/^	bool	    charm;$/;"	m	struct:cmd_type
cheat_log	db.c	/^void cheat_log( const char *str )$/;"	f
check	lua_arclib.h	/^    void *(*check)();$/;"	m	struct:lua_obj_type
check	merc.h	/^	CHAN_CHECK *check; \/*pointer to special check func*\/$/;"	m	struct:channel_type
check_achievement	act_info.c	/^void check_achievement( CHAR_DATA *ch )$/;"	f
check_affect_add	db.c	/^void check_affect_add( CHAR_DATA *mob, int affect, int sn )$/;"	f
check_anger	hunt.c	/^int check_anger(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
check_aprog	lua_scripting.c	/^void check_aprog( lua_State *LS, int vnum, const char *code )$/;"	f
check_assassinate	fight.c	/^void check_assassinate( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield, int chance )$/;"	f
check_assist	fight.c	/^void check_assist(CHAR_DATA *ch)$/;"	f
check_auth_state	auth.c	/^void check_auth_state( CHAR_DATA *ch )$/;"	f
check_auto_auth	auth.c	/^bool check_auto_auth( char *name )$/;"	f
check_avoid_hit	fight.c	/^bool check_avoid_hit( CHAR_DATA *ch, CHAR_DATA *victim, bool show )$/;"	f
check_avoidance	fight.c	/^bool check_avoidance( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_back_leap	fight.c	/^void check_back_leap( CHAR_DATA *victim )$/;"	f
check_ban	ban.c	/^bool check_ban(char *site,int type)$/;"	f
check_beast_mastery	update.c	/^void check_beast_mastery( CHAR_DATA *ch )$/;"	f
check_behead	fight.c	/^void check_behead( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield )$/;"	f
check_bleed	act_move.c	/^void check_bleed( CHAR_DATA *ch, int dir )$/;"	f
check_blind	act_info.c	/^bool check_blind( CHAR_DATA *ch )$/;"	f
check_bodyguard	fight.c	/^CHAR_DATA* check_bodyguard( CHAR_DATA *attacker, CHAR_DATA *victim )$/;"	f
check_bomb	act_obj.c	/^void check_bomb( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
check_cha_follow	magic.c	/^int check_cha_follow( CHAR_DATA *ch, int required )$/;"	f
check_clan_align	update.c	/^void check_clan_align( CHAR_DATA *gch )$/;"	f
check_clan_eq	clan.c	/^void check_clan_eq(CHAR_DATA *victim)$/;"	f
check_concentration	magic.c	/^bool check_concentration( CHAR_DATA *ch )$/;"	f
check_craft_obj	crafting.c	/^void check_craft_obj( OBJ_DATA *obj, int type )$/;"	f
check_critical	fight.c	/^bool check_critical(CHAR_DATA *ch, bool secondary)$/;"	f
check_disabled	interp.c	/^bool check_disabled (const struct cmd_type *command)$/;"	f
check_dispel	magic.c	/^bool check_dispel( int dis_level, CHAR_DATA *victim, int sn )$/;"	f
check_dispel_magic	magic.c	/^bool check_dispel_magic(int level, CHAR_DATA *victim)$/;"	f
check_dodge	fight.c	/^bool check_dodge( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_drop_weapon	handler.c	/^void check_drop_weapon( CHAR_DATA *ch )$/;"	f
check_drown	act_move.c	/^bool check_drown(CHAR_DATA *ch)$/;"	f
check_duck	fight.c	/^bool check_duck( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_enchant_obj	enchant.c	/^void check_enchant_obj( OBJ_DATA *obj )$/;"	f
check_equipment_align	update.c	/^void check_equipment_align( CHAR_DATA *gch )$/;"	f
check_evasion	fight.c	/^bool check_evasion( CHAR_DATA *ch, CHAR_DATA *victim, int sn, bool show )$/;"	f
check_exit_trap_hit	act_move.c	/^bool check_exit_trap_hit( CHAR_DATA *ch, int door, bool step_in )$/;"	f
check_explore	act_move.c	/^void check_explore( CHAR_DATA *ch, ROOM_INDEX_DATA *pRoom )$/;"	f
check_fade	fight.c	/^bool check_fade( CHAR_DATA *ch, CHAR_DATA *victim, bool show ) $/;"	f
check_fear	fight.c	/^bool check_fear( CHAR_DATA *ch )$/;"	f
check_flag	lua_arclib.c	/^static int check_flag( lua_State *LS,$/;"	f	file:
check_fstring	lua_main.c	/^const char *check_fstring( lua_State *LS, int index, size_t size)$/;"	f
check_gag_arg	act_comm.c	/^bool check_gag_arg(char* arg, char* cmp_str, long value, CHAR_DATA *ch)$/;"	f
check_hit	fight.c	/^bool check_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt, int dam_type, int skill )$/;"	f
check_iflag	lua_arclib.c	/^static int check_iflag( lua_State *LS,$/;"	f	file:
check_immtalk	act_comm.c	/^bool check_immtalk( CHAR_DATA *ch )$/;"	f
check_immune	handler.c	/^int check_immune(CHAR_DATA *ch, int dam_type)$/;"	f
check_improve	skills.c	/^void check_improve( CHAR_DATA *ch, int sn, bool success, int multiplier )$/;"	f
check_in_container	mob_prog.c	/^bool check_in_container( OBJ_DATA *container, int vnum, char *obj_name )$/;"	f
check_item_trap_hit	act_move.c	/^bool check_item_trap_hit( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
check_jam	fight.c	/^bool check_jam( CHAR_DATA *ch, int odds, bool offhand )$/;"	f
check_jump_up	fight.c	/^void check_jump_up( CHAR_DATA *ch )$/;"	f
check_kill_quest_completed	quest.c	/^void check_kill_quest_completed( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_kill_steal	fight.c	/^bool check_kill_steal( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_kill_trigger	fight.c	/^bool check_kill_trigger( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_killer	fight.c	/^void check_killer( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_lasso	fight.c	/^bool check_lasso( CHAR_DATA *victim )$/;"	f
check_lboard_reset	lua_main.c	/^void check_lboard_reset()$/;"	f
check_lose_stance	fight.c	/^bool check_lose_stance( CHAR_DATA *ch )$/;"	f
check_lua_stack	lua_main.c	/^void check_lua_stack()$/;"	f
check_mercy	fight.c	/^bool check_mercy( CHAR_DATA *ch )$/;"	f
check_mirror	fight.c	/^bool check_mirror( CHAR_DATA *ch, CHAR_DATA *victim, bool show ) $/;"	f
check_mprog	lua_scripting.c	/^void check_mprog( lua_State *LS, int vnum, const char *code )$/;"	f
check_oprog	lua_scripting.c	/^void check_oprog( lua_State *LS, int vnum, const char *code )$/;"	f
check_outmaneuver	fight.c	/^bool check_outmaneuver( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_parry	fight.c	/^bool check_parry( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_parse_name	nanny.c	/^bool check_parse_name( char *name, bool newchar )$/;"	f
check_penlist	penalty.c	/^void check_penlist()$/;"	f
check_petrify	fight.c	/^bool check_petrify(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
check_phantasmal	fight.c	/^bool check_phantasmal( CHAR_DATA *ch, CHAR_DATA *victim, bool show ) $/;"	f
check_playing	nanny.c	/^bool check_playing( DESCRIPTOR_DATA *d, char *name )$/;"	f
check_range	olc_act.c	/^bool check_range( int lower, int upper )$/;"	f
check_reconnect	nanny.c	/^bool check_reconnect( DESCRIPTOR_DATA *d, char *name, bool fConn )$/;"	f
check_reflection	magic.c	/^void* check_reflection( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
check_religion_align	religion.c	/^void check_religion_align( CHAR_DATA *ch )$/;"	f
check_rescue	fight.c	/^void check_rescue( CHAR_DATA *ch )$/;"	f
check_reset_stance	fight.c	/^void check_reset_stance(CHAR_DATA *ch)$/;"	f
check_rprog	lua_scripting.c	/^void check_rprog( lua_State *LS, int vnum, const char *code )$/;"	f
check_savant	act_comm.c	/^bool check_savant( CHAR_DATA *ch )$/;"	f
check_see	handler.c	/^bool check_see( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_see_combat	handler.c	/^bool check_see_combat( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_see_eyes	act_info.c	/^bool check_see_eyes( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_see_new	handler.c	/^bool check_see_new( CHAR_DATA *ch, CHAR_DATA *victim, bool combat )$/;"	f
check_see_target	handler.c	/^bool check_see_target( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_shield	fight.c	/^bool check_shield( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_shield_block	fight.c	/^bool check_shield_block( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
check_skill	skills.c	/^bool check_skill( CHAR_DATA *ch, int sn )$/;"	f
check_smith_obj	smith.c	/^bool check_smith_obj( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
check_sn_multiplay	act_wiz.c	/^void check_sn_multiplay( CHAR_DATA *ch, CHAR_DATA *victim, int sn )$/;"	f
check_social	interp.c	/^bool check_social( CHAR_DATA *ch, char *command, char *argument )$/;"	f
check_social_new	interp.c	/^bool check_social_new( CHAR_DATA *ch, char *command, char *argument, bool exact )$/;"	f
check_spell_disabled	interp.c	/^bool check_spell_disabled (const struct skill_type *command)$/;"	f
check_spouse	marry.c	/^void check_spouse( CHAR_DATA *ch )$/;"	f
check_stance	fight.c	/^void check_stance(CHAR_DATA *ch)$/;"	f
check_string	lua_main.c	/^const char *check_string( lua_State *LS, int index, size_t size)$/;"	f
check_swim	act_move.c	/^bool check_swim( CHAR_DATA *ch, ROOM_INDEX_DATA *to_room )$/;"	f
check_team_frozen	freeze.c	/^void check_team_frozen ( CHAR_DATA *ch )$/;"	f
check_tflag_iflag	lua_arclib.c	/^static int check_tflag_iflag( lua_State *LS, $/;"	f	file:
check_war_win	warfare.c	/^void check_war_win( void )$/;"	f
clan	merc.h	/^	int clan[3];            \/* {l *\/$/;"	m	struct:pc_data
clan	merc.h	/^	sh_int	    clan;$/;"	m	struct:obj_index_data
clan	merc.h	/^	sh_int	clan;$/;"	m	struct:obj_data
clan	merc.h	/^	sh_int      clan;$/;"	m	struct:char_data
clan	merc.h	/^    sh_int      clan;$/;"	m	struct:room_index_data
clan_data	merc.h	/^struct clan_data$/;"	s
clan_dump_obj	clan.c	/^void clan_dump_obj(CHAR_DATA *ch, int clan)$/;"	f
clan_dump_room	clan.c	/^void clan_dump_room(CHAR_DATA *ch, int clan)$/;"	f
clan_history	merc.h	/^	PERS_HISTORY *clan_history;$/;"	m	struct:pc_data
clan_kills	merc.h	/^	int                 clan_kills;$/;"	m	struct:pc_data
clan_lookup	lookup.c	/^int clan_lookup(const char *name)$/;"	f
clan_lost	merc.h	/^	int                 clan_lost;$/;"	m	struct:pc_data
clan_one	merc.h	/^   sh_int clan_one;       \/* Clan declaring war                        *\/$/;"	m	struct:clanwar_data
clan_rank	merc.h	/^	sh_int      clan_rank; \/* 0 for unguilded and loner, > 0 otherwise *\/$/;"	m	struct:pc_data
clan_rank	merc.h	/^    sh_int      clan_rank;$/;"	m	struct:room_index_data
clan_rank_data	merc.h	/^struct clan_rank_data$/;"	s
clan_rank_lookup	lookup.c	/^int clan_rank_lookup(sh_int clan, const char *name)$/;"	f
clan_table	clan.c	/^struct clan_data clan_table[MAX_CLAN];$/;"	v	typeref:struct:clan_data
clan_text	merc.h	/^	int clan_text[3];       \/* {L *\/$/;"	m	struct:pc_data
clan_two	merc.h	/^   sh_int clan_two;       \/* Opposing clan                             *\/$/;"	m	struct:clanwar_data
clan_won	merc.h	/^	int                 clan_won;$/;"	m	struct:pc_data
clanwar_data	merc.h	/^struct clanwar_data$/;"	s
clanwar_lookup	clanwar.c	/^CLANWAR_DATA *clanwar_lookup(sh_int clan_one, sh_int clan_two)$/;"	f
clanwar_pkill	merc.h	/^    bool     clanwar_pkill;     \/* Participation in clanwar pkill.   *\/$/;"	m	struct:clan_rank_data
clanwar_status	clanwar.c	/^void clanwar_status(CHAR_DATA *ch, sh_int clan_number)$/;"	f
clanwar_table	clanwar.c	/^CLANWAR_DATA * clanwar_table;$/;"	v
class_bonus	stats.c	/^int class_bonus( int class, int stat )$/;"	f
class_can_use	stats.c	/^bool class_can_use( int class, tflag extra_flags )$/;"	f
class_can_use_obj	stats.c	/^bool class_can_use_obj( int class, OBJ_DATA *obj )$/;"	f
class_group_table	stats.c	/^bool class_group_table[MAX_CLASS][4] =$/;"	v
class_kills	merc.h	/^	int                 class_kills;$/;"	m	struct:pc_data
class_lookup	handler.c	/^int class_lookup (const char *name)$/;"	f
class_lost	merc.h	/^	int                 class_lost;$/;"	m	struct:pc_data
class_mult	merc.h	/^	sh_int  class_mult[MAX_CLASS];  \/* exp multiplier for class, * 100 *\/$/;"	m	struct:pc_race_type
class_table	const.c	/^const   struct  class_type  class_table [MAX_CLASS] =$/;"	v	typeref:struct:class_type
class_type	merc.h	/^struct  class_type$/;"	s
class_won	merc.h	/^	int                 class_won;$/;"	m	struct:pc_data
classes_can_use	stats.c	/^int classes_can_use( tflag extra_flags )$/;"	f
cleanse	lua_arclib.c	/^GODLIBHELP_INSTANT( cleanse );$/;"	v
cleanup_uds	lua_arclib.c	/^void cleanup_uds()$/;"	f
clear_area_quests	quest.c	/^void clear_area_quests( CHAR_DATA *ch, AREA_DATA *area )$/;"	f
clear_auth_list	auth.c	/^void clear_auth_list()$/;"	f
clear_buf	recycle.c	/^void clear_buf(BUFFER *buffer)$/;"	f
clear_char	db.c	/^void clear_char( CHAR_DATA *ch )$/;"	f
clear_quests	quest.c	/^void clear_quests( CHAR_DATA *ch, int min_id, int max_id )$/;"	f
clear_tattoos	tattoo.c	/^void clear_tattoos( tattoo_list tl )$/;"	f
clone_area	aclone.c	/^void clone_area( AREA_DATA *pArea )$/;"	f
clone_exits	aclone.c	/^void clone_exits( ROOM_INDEX_DATA *room )$/;"	f
clone_extra_list	aclone.c	/^EXTRA_DESC_DATA* clone_extra_list( EXTRA_DESC_DATA *extra )$/;"	f
clone_mob	aclone.c	/^void clone_mob( MOB_INDEX_DATA *mob )$/;"	f
clone_mobile	db.c	/^void clone_mobile(CHAR_DATA *parent, CHAR_DATA *clone)$/;"	f
clone_object	db.c	/^void clone_object(OBJ_DATA *parent, OBJ_DATA *clone)$/;"	f
clone_reset_list	aclone.c	/^RESET_DATA* clone_reset_list( RESET_DATA *reset )$/;"	f
clone_room	aclone.c	/^void clone_room( ROOM_INDEX_DATA *room )$/;"	f
clone_shift	aclone.c	/^int clone_shift( int vnum )$/;"	f
clone_warning	buildutil.c	/^void clone_warning( CHAR_DATA *ch, AREA_DATA *area )$/;"	f
cloned_area	aclone.c	/^static AREA_DATA *cloned_area = NULL;$/;"	v	file:
clones	merc.h	/^        int         clones[MAX_AREA_CLONE]; \/* area cloning *\/$/;"	m	struct:area_data
close_hour	merc.h	/^	sh_int  close_hour;     \/* First closing hour       *\/$/;"	m	struct:shop_data
close_socket	comm.c	/^void close_socket( DESCRIPTOR_DATA *dclose )$/;"	f
clt_list	lua_main.c	/^static CHAR_DATA *clt_list;$/;"	v	file:
cmd_eval	mob_prog.c	/^int cmd_eval( int vnum, char *line, int check,$/;"	f
cmd_table	interp.c	/^const   struct  cmd_type    cmd_table   [] =$/;"	v	typeref:struct:cmd_type
cmd_type	interp.h	/^struct  cmd_type$/;"	s
code	merc.h	/^	char *      code;$/;"	m	struct:prog_code
cold_effect	effects.c	/^void cold_effect(void *vo, int level, int dam, int target)$/;"	f
color_name	quest.c	/^bool color_name( CHAR_DATA * ch, char *argument,CHAR_DATA * victim)$/;"	f
colour	comm.c	/^int colour( char type, CHAR_DATA *ch, char *string )$/;"	f
colourconv	comm.c	/^void colourconv( char *buffer, const char *txt, CHAR_DATA *ch )$/;"	f
combat_action	merc.h	/^    char *      combat_action; \/* default action to perform during combat *\/$/;"	m	struct:pc_data
combat_maneuver_check	fight.c	/^bool combat_maneuver_check(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
combatants	warfare.h	/^   int combatants;$/;"	m	struct:war_data
combine_vnum	merc.h	/^    int         combine_vnum;$/;"	m	struct:obj_index_data
comm	merc.h	/^	tflag        comm;   \/* RT added to pad the vector *\/$/;"	m	struct:char_data
comm_bit_name	handler.c	/^char* comm_bit_name( int flag )$/;"	f
comm_bits_name	handler.c	/^char* comm_bits_name( tflag flag )$/;"	f
comm_entry_free	playback.c	/^void comm_entry_free(COMM_ENTRY *entry)$/;"	f
comm_entry_new	playback.c	/^COMM_ENTRY *comm_entry_new()$/;"	f
comm_flags	tables.c	/^const struct flag_type comm_flags[] =$/;"	v	typeref:struct:flag_type
comm_history_entry	merc.h	/^struct comm_history_entry$/;"	s
comm_history_type	merc.h	/^struct comm_history_type$/;"	s
command	merc.h	/^	char        command;$/;"	m	struct:reset_data
command	olc_act.c	/^    char *command;$/;"	m	struct:olc_help_type	file:
command_name	merc.h	/^   char *command_name;             \/* name of disabled command\/spell *\/$/;"	m	struct:disabled_data
commen_wear_pos	act_info.c	/^bool commen_wear_pos( tflag wear_flag1, tflag wear_flag2 )$/;"	f
compare_area	db.c	/^int compare_area (const void *v1, const void *v2)$/;"	f
compare_area_max	db.c	/^int compare_area_max (const void *v1, const void *v2)$/;"	f
compute_mob_stats	stats.c	/^void compute_mob_stats(CHAR_DATA *mob)$/;"	f
con_app_hitp	stats.c	/^int con_app_hitp(int x)$/;"	f
con_app_shock	stats.c	/^int con_app_shock(int x)$/;"	f
con_state	nanny.c	/^int con_state(DESCRIPTOR_DATA *d)$/;"	f
concentration_power	magic.c	/^int concentration_power( CHAR_DATA *ch )$/;"	f
condition	merc.h	/^	sh_int      condition;$/;"	m	struct:obj_data
condition	merc.h	/^	sh_int      condition;$/;"	m	struct:obj_index_data
condition	merc.h	/^    sh_int      condition   [7];$/;"	m	struct:pc_data
config_data_entry	mudconfig.h	/^typedef struct config_data_entry$/;"	s
confirm_delete	merc.h	/^    bool        confirm_delete;$/;"	m	struct:pc_data
confirm_new_name	nanny.c	/^bool	confirm_new_name ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
confirm_new_password	nanny.c	/^bool	confirm_new_password ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
confirm_pkill	merc.h	/^    bool        confirm_pkill;$/;"	m	struct:pc_data
confuse	lua_arclib.c	/^GODLIBHELP_DURATION( confuse );$/;"	v
connected	merc.h	/^	sh_int      connected;$/;"	m	struct:descriptor_data
conserve_at	religion.h	/^    int conserve_at; \/* if god_power < conserve_at, no mortal prayers are answered *\/$/;"	m	struct:religion_data
construct_train_cost	stats.c	/^int construct_train_cost( int from, int to )$/;"	f
cont_bits_name	handler.c	/^char* cont_bits_name( long flag )$/;"	f
container_flags	tables.c	/^const struct flag_type container_flags[] =$/;"	v	typeref:struct:flag_type
contains	merc.h	/^	OBJ_DATA *      contains;$/;"	m	struct:obj_data
contains_obj_recursive	handler.c	/^bool contains_obj_recursive( OBJ_DATA *obj, OBJ_CHECK_FUN *obj_check )$/;"	f
contents	merc.h	/^    OBJ_DATA *      contents;$/;"	m	struct:room_index_data
control	comm.c	/^int control;$/;"	v
convert_to_mobble	db2.c	/^MOB_INDEX_DATA* convert_to_mobble ( MOB_INDEX_DATA_OLD *pMobIndexOld )$/;"	f
copyover_recover	comm.c	/^void copyover_recover ()$/;"	f
cost	healer.c	/^    int cost;$/;"	m	struct:spell_cost	file:
cost	merc.h	/^	int         cost;$/;"	m	struct:obj_data
cost	merc.h	/^	int         cost;$/;"	m	struct:obj_index_data
cost	merc.h	/^	int     cost;$/;"	m	struct:stance_type
cost	quest.c	/^    int cost;$/;"	m	struct:quest_item	file:
cost	religion.c	/^    sh_int cost;$/;"	m	struct:god_action	file:
cost	tattoo.c	/^    int cost;$/;"	m	struct:tattoo_data	file:
count	lua_arclib.h	/^    int count;$/;"	m	struct:lua_obj_type
count	merc.h	/^	sh_int      count;$/;"	m	struct:mob_index_data_old
count	merc.h	/^	sh_int      count;$/;"	m	struct:obj_index_data
count	merc.h	/^    sh_int      count;$/;"	m	struct:mob_index_data
count_obj_list	handler.c	/^int count_obj_list( OBJ_INDEX_DATA *pObjIndex, OBJ_DATA *list )$/;"	f
count_people_room	mob_prog.c	/^int count_people_room( CHAR_DATA *mob, int iFlag )$/;"	f
count_stat	skills.c	/^void count_stat(FILE *f, int sn)$/;"	f
count_stats	skills.c	/^void count_stats()$/;"	f
count_users	handler.c	/^int count_users(OBJ_DATA *obj)$/;"	f
countdown	merc.h	/^	sh_int              countdown; \/* Vassago *\/$/;"	m	struct:pc_data
craft_obj_caster	crafting.c	/^void craft_obj_caster( OBJ_DATA *obj, int ops )$/;"	f
craft_obj_max_caster	crafting.c	/^void craft_obj_max_caster( OBJ_DATA *obj, int ops )$/;"	f
craft_obj_max_physical	crafting.c	/^void craft_obj_max_physical( OBJ_DATA *obj, int ops )$/;"	f
craft_obj_physical	crafting.c	/^void craft_obj_physical( OBJ_DATA *obj, int ops )$/;"	f
craft_obj_roll_caster	crafting.c	/^void craft_obj_roll_caster( OBJ_DATA *obj, int ops )$/;"	f
craft_obj_roll_physical	crafting.c	/^void craft_obj_roll_physical( OBJ_DATA *obj, int ops )$/;"	f
craft_obj_stat_caster	crafting.c	/^void craft_obj_stat_caster( OBJ_DATA *obj, int ops )$/;"	f
craft_obj_stat_physical	crafting.c	/^void craft_obj_stat_physical( OBJ_DATA *obj, int ops )$/;"	f
crafting_table	crafting.c	/^struct crafting_type crafting_table[] =$/;"	v	typeref:struct:crafting_type
crafting_type	crafting.c	/^struct crafting_type$/;"	s	file:
crafting_vnum	crafting.c	/^    int crafting_vnum;$/;"	m	struct:crafting_type	file:
create_haunt	update.c	/^void create_haunt( CHAR_DATA *ch )$/;"	f
create_mobile	db.c	/^CHAR_DATA *create_mobile( MOB_INDEX_DATA *pMobIndex )$/;"	f
create_money	handler.c	/^OBJ_DATA *create_money( int gold, int silver )$/;"	f
create_object	db.c	/^OBJ_DATA *create_object( OBJ_INDEX_DATA *pObjIndex, int level )$/;"	f
create_quest_item	quest.c	/^bool create_quest_item( CHAR_DATA *ch, char *name, OBJ_DATA **obj )$/;"	f
create_who_array	act_info.c	/^int create_who_array( CHAR_DATA **who_array )$/;"	f
creation_date	merc.h	/^    time_t   creation_date;     \/* Date clan created *\/$/;"	m	struct:clan_data
creation_mode	nanny.c	/^int creation_mode(DESCRIPTOR_DATA *d)$/;"	f
credits	merc.h	/^	char *      credits;$/;"	m	struct:area_data
crime_data	merc.h	/^struct crime_data$/;"	s
crime_free	recycle.c	/^CRIME_DATA *crime_free;$/;"	v
crime_list	penalty.c	/^CRIME_DATA *crime_list;$/;"	v
crimes	merc.h	/^    CRIME_DATA * crimes;$/;"	m	struct:pc_data
critical_chance	fight.c	/^int critical_chance(CHAR_DATA *ch, bool secondary)$/;"	f
crypt	merc.h	4080;"	d
current	timer.c	/^    int current; \/* current val that gets decremented each second *\/$/;"	m	struct:timer_node	file:
current_area	db.c	/^AREA_DATA *     current_area;$/;"	v
current_time	comm.c	/^time_t          current_time;   \/* time of this pulse *\/    $/;"	v
curse	lua_arclib.c	/^GODLIBHELP_DURATION( curse );$/;"	v
curse_effect	breath.c	/^void curse_effect( void *vo, int level, int dam, int target )$/;"	f
custom_affect_strip	handler.c	/^void custom_affect_strip( CHAR_DATA *ch, const char *tag )$/;"	f
customduration	merc.h	/^    sh_int      customduration;$/;"	m	struct:pc_data
customflag	merc.h	/^    char *      customflag;$/;"	m	struct:pc_data
d_next	comm.c	/^DESCRIPTOR_DATA *   d_next;     \/* Next descriptor in loop  *\/$/;"	v
dam_message	fight.c	/^void dam_message( CHAR_DATA *ch, CHAR_DATA *victim,int dam,int dt,bool immune )$/;"	f
dam_type	merc.h	/^	sh_int      dam_type;$/;"	m	struct:char_data
dam_type	merc.h	/^	sh_int      dam_type;$/;"	m	struct:mob_index_data_old
dam_type	merc.h	/^    sh_int      dam_type;$/;"	m	struct:mob_index_data
damage	fight.c	/^bool damage( CHAR_DATA *ch,CHAR_DATA *victim,int dam,int dt,int dam_type,$/;"	f
damage	merc.h	/^	int     damage;         \/* damage class *\/$/;"	m	struct:attack_type
damage	merc.h	/^	sh_int      damage[3];$/;"	m	struct:char_data
damage	merc.h	/^	sh_int      damage[3];$/;"	m	struct:mob_index_data_old
damage_dealt	merc.h	/^	int	damage_dealt;$/;"	m	struct:char_data
damage_percent	merc.h	/^    sh_int      damage_percent;$/;"	m	struct:mob_index_data
damage_taken	merc.h	/^	int	damage_taken;$/;"	m	struct:char_data
damage_type	tables.c	/^const struct flag_type damage_type[] =$/;"	v	typeref:struct:flag_type
damroll	merc.h	/^	sh_int      damroll;$/;"	m	struct:char_data
data	hunt.c	/^    void          *data;$/;"	m	struct:hash_link	file:
data	merc.h	/^	char *data; \/* The data *\/$/;"	m	struct:buffer_type
date	merc.h	/^	char *  date;$/;"	m	struct:note_data
date_stamp	merc.h	/^	time_t  date_stamp;$/;"	m	struct:note_data
day	merc.h	/^	int     day;$/;"	m	struct:time_info_data
day_name	act_info.c	/^char *  const   day_name    [] =$/;"	v
daze	merc.h	/^	sh_int      daze;$/;"	m	struct:char_data
dbglib_show	lua_arclib.c	/^static int dbglib_show ( lua_State *LS)$/;"	f	file:
dd	merc.h	1166;"	d
deal_chain_damage	magic.c	/^void deal_chain_damage( int sn, int level, CHAR_DATA *ch, CHAR_DATA *victim, int dam_type )$/;"	f
deal_damage	fight.c	/^bool deal_damage( CHAR_DATA *ch, CHAR_DATA *victim, int dam, int dt, int dam_type, bool show, bool lethal )$/;"	f
death_cry	fight.c	/^void death_cry( CHAR_DATA *ch )$/;"	f
death_penalty	fight.c	/^void death_penalty( CHAR_DATA *ch )$/;"	f
death_update	update.c	/^void death_update( void )$/;"	f
declb	lua_arclib.c	7114;"	d	file:
declf	lua_arclib.h	93;"	d
declf	merc.h	4732;"	d
declf	merc.h	4758;"	d
deduct_cost	handler.c	/^void deduct_cost(CHAR_DATA *ch, int cost)$/;"	f
deduct_move_cost	fight.c	/^bool deduct_move_cost( CHAR_DATA *ch, int cost )$/;"	f
default_choice	nanny.c	/^bool	default_choice ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
default_colour	handler.c	/^void default_colour( CHAR_DATA *ch )$/;"	f
default_group	merc.h	/^	char *  default_group;      \/* default skills gained    *\/$/;"	m	struct:class_type
default_pos	merc.h	/^	sh_int      default_pos;$/;"	m	struct:char_data
default_pos	merc.h	/^	sh_int      default_pos;$/;"	m	struct:mob_index_data_old
default_pos	merc.h	/^    sh_int      default_pos;$/;"	m	struct:mob_index_data
default_value	mudconfig.h	/^    void *default_value;$/;"	m	struct:config_data_entry
defense_factor	merc.h	/^    sh_int  defense_factor;$/;"	m	struct:class_type
defy	lua_arclib.c	/^GODLIBHELP_INSTANT( defy );$/;"	v
del_last_line	string.c	/^char * del_last_line( char *string )$/;"	f
del_last_line_ext	string.c	/^char * del_last_line_ext( char *string, char *xbuf )$/;"	f
delete_clanwar_node	clanwar.c	/^int delete_clanwar_node(CLANWAR_DATA *node)$/;"	f
delete_penalty_node	penalty.c	/^void delete_penalty_node(PENALTY_DATA *node)$/;"	f
demerit_points	merc.h	/^    int         demerit_points;$/;"	m	struct:pc_data
denied_by	merc.h	/^   char  * denied_by;      \/* Name of immortal who denied the name *\/$/;"	m	struct:auth_list
desc	merc.h	/^	DESCRIPTOR_DATA *   desc;$/;"	m	struct:char_data
desc	merc.h	/^   char   *desc;     \/* Description of crime (used primarily for crime type list) *\/$/;"	m	struct:crime_data
desc	olc_act.c	/^    char *desc;$/;"	m	struct:olc_help_type	file:
desc	religion.c	/^    char *desc;$/;"	m	struct:god_action	file:
desc_cmp	comm.c	/^bool desc_cmp( DESCRIPTOR_DATA *d1, DESCRIPTOR_DATA *d2 )$/;"	f
describe_item	act_obj.c	/^void describe_item( CHAR_DATA *ch, OBJ_DATA* obj )$/;"	f
description	merc.h	/^	char *      description;$/;"	m	struct:char_data
description	merc.h	/^	char *      description;$/;"	m	struct:exit_data
description	merc.h	/^	char *      description;$/;"	m	struct:mob_index_data_old
description	merc.h	/^	char *      description;$/;"	m	struct:obj_data
description	merc.h	/^	char *      description;$/;"	m	struct:obj_index_data
description	merc.h	/^	char *description;          \/* What to see                      *\/$/;"	m	struct:extra_descr_data
description	merc.h	/^    char *      description;$/;"	m	struct:room_index_data
description	merc.h	/^    char*       description;$/;"	m	struct:mob_index_data
descriptor	merc.h	/^	sh_int      descriptor;$/;"	m	struct:descriptor_data
descriptor_data	merc.h	/^struct  descriptor_data$/;"	s
descriptor_free	recycle.c	/^DESCRIPTOR_DATA *descriptor_free;$/;"	v
descriptor_list	comm.c	/^DESCRIPTOR_DATA *   descriptor_list;    \/* All open descriptors     *\/$/;"	v
descriptor_t	protocol.h	/^typedef struct descriptor_data descriptor_t;$/;"	t	typeref:struct:descriptor_data
destance	fight.c	/^bool destance( CHAR_DATA *ch, int attack_mastery )$/;"	f
destroy_hash_table	hunt.c	/^void destroy_hash_table(struct hash_header *ht,void (*gman)())$/;"	f
detect_level	merc.h	/^    sh_int      detect_level;$/;"	m	struct:affect_data
dex_app_extrahit	stats.c	/^int dex_app_extrahit(int x)$/;"	f
dex_app_tohit	stats.c	/^int dex_app_tohit(int x)$/;"	f
dice	db.c	/^int dice( int number, int size )$/;"	f
dice	tables.h	/^	int dice[MAX_STATS];$/;"	m	struct:stat_type
dice_argument	fight2.c	/^int dice_argument (char *argument, char *arg)$/;"	f
dice_lookup	stats.c	/^int dice_lookup(char *stat)$/;"	f
die_follower	act_comm.c	/^void die_follower( CHAR_DATA *ch, bool preservePets )$/;"	f
diff_rating	merc.h	/^    sh_int      diff_rating; \/* difficulty to get object *\/$/;"	m	struct:obj_index_data
dir_name	act_move.c	/^char *  const   dir_name    []      =$/;"	v
direct_damage	fight.c	/^void direct_damage( CHAR_DATA *ch, CHAR_DATA *victim, int dam, int sn )$/;"	f
direction_lookup	fight.c	/^int direction_lookup( char *arg1 )$/;"	f
dis_app_field	stats.c	/^int dis_app_field(int x)$/;"	f
dis_app_practice	stats.c	/^int dis_app_practice(int x)$/;"	f
disabled_by	merc.h	/^   char *disabled_by;              \/* name of disabler *\/$/;"	m	struct:disabled_data
disabled_data	merc.h	/^struct disabled_data$/;"	s
disabled_first	interp.c	/^DISABLED_DATA *disabled_first;$/;"	v
disarm	fight2.c	/^bool disarm( CHAR_DATA *ch, CHAR_DATA *victim, bool quiet, int attack_mastery )$/;"	f
display_resets	olc.c	/^void display_resets( CHAR_DATA *ch, ROOM_INDEX_DATA *pRoom )$/;"	f
dispose_reset	redit-ilab.c	/^static void dispose_reset (RESET_DATA *pReset)$/;"	f	file:
disruption_power	magic.c	/^int disruption_power( CHAR_DATA *ch )$/;"	f
distance	scan.c	/^char *const distance[4]=$/;"	v
do_achievements	act_info.c	/^void do_achievements( CHAR_DATA *ch, char *argument )$/;"	f
do_achievements	interp.h	/^DECLARE_DO_FUN( do_achievements  );$/;"	v
do_action	act_comm.c	/^void do_action( CHAR_DATA *ch, char *argument )$/;"	f
do_action	interp.h	/^DECLARE_DO_FUN( do_action   );$/;"	v
do_advance	act_wiz.c	/^void do_advance( CHAR_DATA *ch, char *argument )$/;"	f
do_advance	interp.h	/^DECLARE_DO_FUN( do_advance  );$/;"	v
do_aedit	interp.h	/^DECLARE_DO_FUN( do_aedit    );$/;"	v
do_aedit	olc.c	/^void do_aedit( CHAR_DATA *ch, char *argument )$/;"	f
do_aedit	olc.h	/^DECLARE_DO_FUN( do_aedit        );$/;"	v
do_affects	act_info.c	/^DECLARE_DO_FUN( do_affects  );$/;"	v
do_affects	act_info.c	/^void do_affects( CHAR_DATA *ch, char *argument )$/;"	f
do_affects	interp.h	/^DECLARE_DO_FUN( do_affects  );$/;"	v
do_afk	act_comm.c	/^void do_afk ( CHAR_DATA *ch, char * argument)$/;"	f
do_afk	interp.h	/^DECLARE_DO_FUN( do_afk      );$/;"	v
do_aim	fight.c	/^DECLARE_DO_FUN(do_aim       );$/;"	v
do_aim	fight2.c	/^void do_aim( CHAR_DATA *ch, char *argument )$/;"	f
do_aim	interp.h	/^DECLARE_DO_FUN( do_aim);$/;"	v
do_alia	alias.c	/^void do_alia(CHAR_DATA *ch, char *argument)$/;"	f
do_alia	interp.h	/^DECLARE_DO_FUN( do_alia     );$/;"	v
do_alias	alias.c	/^void do_alias(CHAR_DATA *ch, char *argument)$/;"	f
do_alias	interp.h	/^DECLARE_DO_FUN( do_alias    );$/;"	v
do_alist	interp.h	/^DECLARE_DO_FUN( do_alist    );$/;"	v
do_alist	lua_main.c	/^void do_alist(CHAR_DATA *ch, char *argument)$/;"	f
do_allow	ban.c	/^void do_allow( CHAR_DATA *ch, char *argument )                        $/;"	f
do_allow	interp.h	/^DECLARE_DO_FUN( do_allow    );$/;"	v
do_answer	act_comm.c	/^void do_answer( CHAR_DATA *ch, char *argument )$/;"	f
do_answer	interp.h	/^DECLARE_DO_FUN( do_answer   );$/;"	v
do_apdump	interp.h	/^DECLARE_DO_FUN( do_apdump   );$/;"	v
do_apdump	mob_cmds.c	/^void do_apdump( CHAR_DATA *ch, char *argument )$/;"	f
do_apedit	interp.h	/^DECLARE_DO_FUN( do_apedit   );$/;"	v
do_apedit	olc.h	/^DECLARE_DO_FUN( do_apedit   );$/;"	v
do_apedit	olc_apcode.c	/^void do_apedit(CHAR_DATA *ch, char *argument)$/;"	f
do_appraise	act_info.c	/^DECLARE_DO_FUN(do_appraise); $/;"	v
do_appraise	act_info.c	/^void do_appraise ( CHAR_DATA *ch, char *argument )$/;"	f
do_appraise	interp.h	/^DECLARE_DO_FUN( do_appraise );$/;"	v
do_aprun	interp.h	/^DECLARE_DO_FUN( do_aprun);$/;"	v
do_aprun	olc_apcode.c	/^void do_aprun( CHAR_DATA *ch, char *argument)$/;"	f
do_areas	db.c	/^void do_areas( CHAR_DATA *ch )$/;"	f
do_areas	interp.h	/^DECLARE_DO_FUN( do_areas    );$/;"	v
do_as	act_wiz.c	/^void do_as(CHAR_DATA *ch, char *argument)$/;"	f
do_as	interp.h	/^DECLARE_DO_FUN( do_as       );$/;"	v
do_asave	comm.c	/^DECLARE_DO_FUN(do_asave     );$/;"	v
do_asave	interp.h	/^DECLARE_DO_FUN( do_asave    );$/;"	v
do_asave	olc_save.c	/^void do_asave( CHAR_DATA *ch, char *argument )$/;"	f
do_ashift	interp.h	/^DECLARE_DO_FUN( do_ashift   );$/;"	v
do_ashift	vshift.c	/^void do_ashift( CHAR_DATA *ch, char *argument )$/;"	f
do_at	act_wiz.c	/^void do_at( CHAR_DATA *ch, char *argument )$/;"	f
do_at	interp.h	/^DECLARE_DO_FUN( do_at       );$/;"	v
do_attributes	act_info.c	/^DECLARE_DO_FUN(do_attributes);$/;"	v
do_attributes	act_info.c	/^void do_attributes( CHAR_DATA *ch, char *argument )$/;"	f
do_attributes	interp.h	/^DECLARE_DO_FUN( do_attributes);$/;"	v
do_auction	act_comm.c	/^void do_auction( CHAR_DATA *ch, char *argument )$/;"	f
do_auction	interp.h	/^DECLARE_DO_FUN( do_auction  );$/;"	v
do_authorize	auth.c	/^void do_authorize( CHAR_DATA *ch, char *argument )$/;"	f
do_authorize	interp.h	/^DECLARE_DO_FUN( do_authorize );$/;"	v
do_autoassist	act_info.c	/^void do_autoassist(CHAR_DATA *ch, char *argument)$/;"	f
do_autoassist	interp.h	/^DECLARE_DO_FUN( do_autoassist   );$/;"	v
do_autoexit	act_info.c	/^void do_autoexit(CHAR_DATA *ch, char *argument)$/;"	f
do_autoexit	interp.h	/^DECLARE_DO_FUN( do_autoexit );$/;"	v
do_autogold	act_info.c	/^void do_autogold(CHAR_DATA *ch, char *argument)$/;"	f
do_autogold	interp.h	/^DECLARE_DO_FUN( do_autogold );$/;"	v
do_autolist	act_info.c	/^void do_autolist(CHAR_DATA *ch, char *argument)$/;"	f
do_autolist	interp.h	/^DECLARE_DO_FUN( do_autolist );$/;"	v
do_autoloot	act_info.c	/^void do_autoloot(CHAR_DATA *ch, char *argument)$/;"	f
do_autoloot	interp.h	/^DECLARE_DO_FUN( do_autoloot );$/;"	v
do_autorescue	act_info.c	/^void do_autorescue(CHAR_DATA *ch, char *argument)$/;"	f
do_autorescue	interp.h	/^DECLARE_DO_FUN( do_autorescue);$/;"	v
do_autosac	act_info.c	/^void do_autosac(CHAR_DATA *ch, char *argument)$/;"	f
do_autosac	interp.h	/^DECLARE_DO_FUN( do_autosac  );$/;"	v
do_autosplit	act_info.c	/^void do_autosplit(CHAR_DATA *ch, char *argument)$/;"	f
do_autosplit	interp.h	/^DECLARE_DO_FUN( do_autosplit);$/;"	v
do_avatar	act_wiz.c	/^void do_avatar( CHAR_DATA *ch, char *argument ) \/* Procedure Avatar *\/$/;"	f
do_avatar	interp.h	/^DECLARE_DO_FUN( do_avatar);$/;"	v
do_backstab	fight.c	/^DECLARE_DO_FUN(do_backstab  );$/;"	v
do_backstab	fight2.c	/^void do_backstab( CHAR_DATA *ch, char *argument )$/;"	f
do_backstab	interp.h	/^DECLARE_DO_FUN( do_backstab );$/;"	v
do_backstab	special.c	/^DECLARE_DO_FUN(do_backstab);$/;"	v
do_balance	act_obj.c	/^void do_balance ( CHAR_DATA *ch, char *argument )$/;"	f
do_balance	interp.h	/^DECLARE_DO_FUN( do_balance  );$/;"	v
do_bamfin	act_wiz.c	/^void do_bamfin( CHAR_DATA *ch, char *argument )$/;"	f
do_bamfin	interp.h	/^DECLARE_DO_FUN( do_bamfin   );$/;"	v
do_bamfout	act_wiz.c	/^void do_bamfout( CHAR_DATA *ch, char *argument )$/;"	f
do_bamfout	interp.h	/^DECLARE_DO_FUN( do_bamfout  );$/;"	v
do_ban	ban.c	/^void do_ban(CHAR_DATA *ch, char *argument)$/;"	f
do_ban	interp.h	/^DECLARE_DO_FUN( do_ban      );$/;"	v
do_bash	fight.c	/^DECLARE_DO_FUN(do_bash      );$/;"	v
do_bash	fight2.c	/^void do_bash( CHAR_DATA *ch, char *argument )$/;"	f
do_bash	interp.h	/^DECLARE_DO_FUN( do_bash     );$/;"	v
do_berserk	fight.c	/^DECLARE_DO_FUN(do_berserk   );$/;"	v
do_berserk	fight2.c	/^void do_berserk( CHAR_DATA *ch, char *argument )$/;"	f
do_berserk	interp.h	/^DECLARE_DO_FUN( do_berserk  );$/;"	v
do_bitch	act_comm.c	/^void do_bitch( CHAR_DATA *ch, char *argument )$/;"	f
do_bitch	interp.h	/^DECLARE_DO_FUN( do_bitch    );$/;"	v
do_bite	fight.c	/^DECLARE_DO_FUN(do_bite      );$/;"	v
do_bite	fight2.c	/^void do_bite( CHAR_DATA *ch, char *argument )$/;"	f
do_bite	interp.h	/^DECLARE_DO_FUN( do_bite     );$/;"	v
do_blackjack	fight2.c	/^void do_blackjack( CHAR_DATA *ch, char *argument )$/;"	f
do_blackjack	interp.h	/^DECLARE_DO_FUN( do_blackjack );$/;"	v
do_blue	freeze.c	/^void do_blue( CHAR_DATA *ch, char *argument )$/;"	f
do_blue	interp.h	/^DECLARE_DO_FUN( do_blue     );$/;"	v
do_board	board.c	/^void do_board (CHAR_DATA *ch, char *argument)$/;"	f
do_board	interp.h	/^DECLARE_DO_FUN( do_board    );$/;"	v
do_bounty	act_comm.c	/^void do_bounty( CHAR_DATA *ch, char *argument )$/;"	f
do_bounty	interp.h	/^DECLARE_DO_FUN( do_bounty   );$/;"	v
do_brandish	act_obj.c	/^void do_brandish( CHAR_DATA *ch, char *argument )$/;"	f
do_brandish	interp.h	/^DECLARE_DO_FUN( do_brandish );$/;"	v
do_brawl	fight.c	/^DECLARE_DO_FUN(do_brawl     );$/;"	v
do_brawl	interp.h	/^DECLARE_DO_FUN( do_brawl    );$/;"	v
do_brew	alchemy.c	/^void do_brew( CHAR_DATA *ch, char *argument )$/;"	f
do_brew	interp.h	/^DECLARE_DO_FUN( do_brew     );$/;"	v
do_brief	act_info.c	/^void do_brief(CHAR_DATA *ch, char *argument)$/;"	f
do_brief	interp.h	/^DECLARE_DO_FUN( do_brief    );$/;"	v
do_browse	act_obj.c	/^void do_browse( CHAR_DATA *ch, char *argument )$/;"	f
do_browse	interp.h	/^DECLARE_DO_FUN( do_browse   );$/;"	v
do_bug	act_comm.c	/^void do_bug( CHAR_DATA *ch, char *argument )$/;"	f
do_bug	interp.h	/^DECLARE_DO_FUN( do_bug      );$/;"	v
do_build_raft	interp.h	/^DECLARE_DO_FUN( do_build_raft   );$/;"	v
do_build_raft	ranger.c	/^void do_build_raft(CHAR_DATA *ch)$/;"	f
do_burst	fight.c	/^DECLARE_DO_FUN(do_burst     );$/;"	v
do_burst	fight2.c	/^void do_burst( CHAR_DATA *ch, char *argument )$/;"	f
do_burst	interp.h	/^DECLARE_DO_FUN( do_burst );$/;"	v
do_busy	act_comm.c	/^void do_busy ( CHAR_DATA *ch, char * argument)$/;"	f
do_buy	act_obj.c	/^void do_buy( CHAR_DATA *ch, char *argument )$/;"	f
do_buy	interp.h	/^DECLARE_DO_FUN( do_buy      );$/;"	v
do_calm	act_info.c	/^void do_calm( CHAR_DATA *ch, char *argument )$/;"	f
do_calm	interp.h	/^DECLARE_DO_FUN( do_calm     );$/;"	v
do_camp_fire	interp.h	/^DECLARE_DO_FUN( do_camp_fire    );$/;"	v
do_camp_fire	ranger.c	/^void do_camp_fire(CHAR_DATA *ch)$/;"	f
do_cast	interp.h	/^DECLARE_DO_FUN( do_cast     );$/;"	v
do_cast	magic.c	/^void do_cast( CHAR_DATA *ch, char *argument )$/;"	f
do_ccast	interp.h	/^DECLARE_DO_FUN( do_ccast        );$/;"	v
do_ccast	magic.c	/^void do_ccast( CHAR_DATA *ch, char *argument )$/;"	f
do_channels	act_comm.c	/^void do_channels( CHAR_DATA *ch, char *argument)$/;"	f
do_channels	interp.h	/^DECLARE_DO_FUN( do_channels );$/;"	v
do_charge	fight2.c	/^void do_charge( CHAR_DATA *ch, char *argument )$/;"	f
do_charge	interp.h	/^DECLARE_DO_FUN( do_charge   );$/;"	v
do_charloadtest	interp.h	/^DECLARE_DO_FUN( do_charloadtest);$/;"	v
do_charloadtest	lua_main.c	/^void do_charloadtest( CHAR_DATA *ch, char *argument )$/;"	f
do_cheatlog	db.c	/^void do_cheatlog( CHAR_DATA *ch, char *argument )$/;"	f
do_cheatlog	interp.h	/^DECLARE_DO_FUN( do_cheatlog );$/;"	v
do_choke_hold	fight.c	/^DECLARE_DO_FUN(do_choke_hold);$/;"	v
do_choke_hold	fight2.c	/^void do_choke_hold( CHAR_DATA *ch, char *argument )$/;"	f
do_choke_hold	interp.h	/^DECLARE_DO_FUN( do_choke_hold   );$/;"	v
do_chop	fight.c	/^DECLARE_DO_FUN(do_chop      );$/;"	v
do_chop	fight2.c	/^void do_chop( CHAR_DATA *ch, char *argument )$/;"	f
do_chop	interp.h	/^DECLARE_DO_FUN( do_chop     );$/;"	v
do_circle	fight.c	/^DECLARE_DO_FUN(do_circle    );$/;"	v
do_circle	fight2.c	/^void do_circle( CHAR_DATA *ch, char *argument )$/;"	f
do_circle	interp.h	/^DECLARE_DO_FUN( do_circle   );$/;"	v
do_clan_dump	clan.c	/^void do_clan_dump(CHAR_DATA *ch, char *argument)$/;"	f
do_clan_dump	interp.h	/^DECLARE_DO_FUN( do_clan_dump);$/;"	v
do_clanreport	clan.c	/^void do_clanreport( CHAR_DATA *ch, char *argument )$/;"	f
do_clanreport	interp.h	/^DECLARE_DO_FUN( do_clanreport);$/;"	v
do_clantalk	act_comm.c	/^void do_clantalk( CHAR_DATA *ch, char *argument )$/;"	f
do_clantalk	interp.h	/^DECLARE_DO_FUN( do_clantalk );$/;"	v
do_clanwar	clanwar.c	/^void do_clanwar(CHAR_DATA *ch, char *argument)$/;"	f
do_clanwar	interp.h	/^DECLARE_DO_FUN( do_clanwar  );$/;"	v
do_classes	act_info.c	/^void do_classes( CHAR_DATA *ch, char *argument )$/;"	f
do_classes	interp.h	/^DECLARE_DO_FUN( do_classes  );$/;"	v
do_clone	act_wiz.c	/^void do_clone(CHAR_DATA *ch, char *argument )$/;"	f
do_clone	interp.h	/^DECLARE_DO_FUN( do_clone    );$/;"	v
do_close	act_move.c	/^void do_close( CHAR_DATA *ch, char *argument )$/;"	f
do_close	interp.h	/^DECLARE_DO_FUN( do_close    );$/;"	v
do_close	special.c	/^DECLARE_DO_FUN(do_close     );$/;"	v
do_cmotd	clan.c	/^void do_cmotd( CHAR_DATA *ch, char * argument )$/;"	f
do_cmotd	interp.h	/^DECLARE_DO_FUN( do_cmotd);$/;"	v
do_color	interp.h	/^DECLARE_DO_FUN( do_color    );$/;"	v
do_colour	act_comm.c	/^void do_colour( CHAR_DATA *ch, char *argument )$/;"	f
do_colour	interp.h	/^DECLARE_DO_FUN( do_colour   ); \/* Colour Command By Lope *\/$/;"	v
do_combat	interp.h	/^DECLARE_DO_FUN( do_combat       );$/;"	v
do_combat	warfare.c	/^void do_combat( CHAR_DATA *ch, char *argument )$/;"	f
do_combine	act_info.c	/^void do_combine(CHAR_DATA *ch, char *argument)$/;"	f
do_combine	interp.h	/^DECLARE_DO_FUN( do_combine  );$/;"	v
do_commands	interp.c	/^void do_commands( CHAR_DATA *ch, char *argument )$/;"	f
do_commands	interp.h	/^DECLARE_DO_FUN( do_commands );$/;"	v
do_compact	act_info.c	/^void do_compact(CHAR_DATA *ch, char *argument)$/;"	f
do_compact	interp.h	/^DECLARE_DO_FUN( do_compact  );$/;"	v
do_compare	act_info.c	/^void do_compare( CHAR_DATA *ch, char *argument )$/;"	f
do_compare	interp.h	/^DECLARE_DO_FUN( do_compare  );$/;"	v
do_consent	interp.h	/^DECLARE_DO_FUN( do_consent  );$/;"	v
do_consent	marry.c	/^void do_consent( CHAR_DATA *ch, char *argument )$/;"	f
do_consider	act_info.c	/^void do_consider( CHAR_DATA *ch, char *argument )$/;"	f
do_consider	interp.h	/^DECLARE_DO_FUN( do_consider );$/;"	v
do_copyove	act_wiz.c	/^void do_copyove( CHAR_DATA *ch, char *argument )$/;"	f
do_copyove	interp.h	/^DECLARE_DO_FUN( do_copyove  );$/;"	v
do_copyover	comm.c	/^void do_copyover (CHAR_DATA *ch, char * argument)$/;"	f
do_copyover	interp.h	/^DECLARE_DO_FUN( do_copyover );$/;"	v
do_count	act_info.c	/^void do_count ( CHAR_DATA *ch, char *argument )$/;"	f
do_count	interp.h	/^DECLARE_DO_FUN( do_count    );$/;"	v
do_craft	crafting.c	/^void do_craft( CHAR_DATA *ch, char *argument )$/;"	f
do_craft	interp.h	/^DECLARE_DO_FUN( do_craft    );$/;"	v
do_crash	act_wiz.c	/^void do_crash( CHAR_DATA *ch, char *argument )$/;"	f
do_crash	interp.h	/^DECLARE_DO_FUN( do_crash    );$/;"	v
do_credits	act_info.c	/^void do_credits( CHAR_DATA *ch, char *argument )$/;"	f
do_credits	interp.h	/^DECLARE_DO_FUN( do_credits  );$/;"	v
do_crimelist	interp.h	/^DECLARE_DO_FUN( do_crimelist);$/;"	v
do_crimelist	penalty.c	/^void do_crimelist(CHAR_DATA *ch, char *argument)$/;"	f
do_crush	fight2.c	/^void do_crush( CHAR_DATA *ch, char *argument )$/;"	f
do_cset	buildutil.c	/^DECLARE_DO_FUN(do_cset      );$/;"	v
do_cset	clan.c	/^void do_cset( CHAR_DATA *ch, char *argument )$/;"	f
do_deaf	act_comm.c	/^void do_deaf( CHAR_DATA *ch, char *argument)$/;"	f
do_deaf	interp.h	/^DECLARE_DO_FUN( do_deaf     );$/;"	v
do_delet	act_comm.c	/^void do_delet( CHAR_DATA *ch, char *argument)$/;"	f
do_delet	interp.h	/^DECLARE_DO_FUN( do_delet    );$/;"	v
do_delete	act_comm.c	/^void do_delete( CHAR_DATA *ch, char *argument)$/;"	f
do_delete	interp.h	/^DECLARE_DO_FUN( do_delete   );$/;"	v
do_deposit	act_obj.c	/^void do_deposit ( CHAR_DATA *ch, char *argument )$/;"	f
do_deposit	interp.h	/^DECLARE_DO_FUN( do_deposit );$/;"	v
do_description	act_info.c	/^void do_description( CHAR_DATA *ch, char *argument )$/;"	f
do_description	interp.h	/^DECLARE_DO_FUN( do_description  );$/;"	v
do_detoxify	interp.h	/^DECLARE_DO_FUN( do_detoxify );$/;"	v
do_detoxify	ranger.c	/^void do_detoxify( CHAR_DATA *ch, char *argument )$/;"	f
do_diagnostic	interp.h	/^DECLARE_DO_FUN( do_diagnostic);$/;"	v
do_diagnostic	lua_main.c	/^void do_diagnostic( CHAR_DATA *ch, char *argument)$/;"	f
do_die	fight.c	/^void do_die( CHAR_DATA *ch, char *argument )$/;"	f
do_die	interp.h	/^DECLARE_DO_FUN( do_die );$/;"	v
do_dirs	act_info.c	/^void do_dirs(CHAR_DATA *ch, char *argument)$/;"	f
do_dirs	interp.h	/^DECLARE_DO_FUN( do_dirs     );$/;"	v
do_dirt	fight.c	/^DECLARE_DO_FUN(do_dirt      );$/;"	v
do_dirt	fight2.c	/^void do_dirt( CHAR_DATA *ch, char *argument )$/;"	f
do_dirt	interp.h	/^DECLARE_DO_FUN( do_dirt     );$/;"	v
do_disable	interp.c	/^void do_disable (CHAR_DATA *ch, char *argument)$/;"	f
do_disable	interp.h	/^DECLARE_DO_FUN( do_disable  );$/;"	v
do_disarm	fight.c	/^DECLARE_DO_FUN(do_disarm    );$/;"	v
do_disarm	fight2.c	/^void do_disarm( CHAR_DATA *ch, char *argument )$/;"	f
do_disarm	interp.h	/^DECLARE_DO_FUN( do_disarm   );$/;"	v
do_disarm_trap	act_move.c	/^void do_disarm_trap( CHAR_DATA *ch, char *argument )$/;"	f
do_disarm_trap	interp.h	/^DECLARE_DO_FUN( do_disarm_trap  );$/;"	v
do_disguise	act_info.c	/^void do_disguise( CHAR_DATA *ch, char *argument )$/;"	f
do_disguise	interp.h	/^DECLARE_DO_FUN( do_disguise );$/;"	v
do_distract	fight.c	/^DECLARE_DO_FUN(do_distract  );$/;"	v
do_distract	fight2.c	/^void do_distract( CHAR_DATA *ch, char *argument )$/;"	f
do_distract	interp.h	/^DECLARE_DO_FUN( do_distract );$/;"	v
do_divorce	interp.h	/^DECLARE_DO_FUN( do_divorce  );$/;"	v
do_divorce	marry.c	/^void do_divorce( CHAR_DATA *ch, char *argument)$/;"	f
do_donate	act_obj.c	/^void do_donate( CHAR_DATA *ch, char *argument)$/;"	f
do_donate	interp.h	/^DECLARE_DO_FUN( do_donate   );$/;"	v
do_double_strike	fight2.c	/^void do_double_strike( CHAR_DATA *ch, char *argument )$/;"	f
do_double_strike	interp.h	/^DECLARE_DO_FUN( do_double_strike);$/;"	v
do_down	act_move.c	/^void do_down( CHAR_DATA *ch, char *argument )$/;"	f
do_down	interp.h	/^DECLARE_DO_FUN( do_down     );$/;"	v
do_dowsing	interp.h	/^DECLARE_DO_FUN( do_dowsing  );$/;"	v
do_dowsing	ranger.c	/^void do_dowsing( CHAR_DATA *ch, char *argument )$/;"	f
do_drink	act_obj.c	/^void do_drink( CHAR_DATA *ch, char *argument )$/;"	f
do_drink	interp.h	/^DECLARE_DO_FUN( do_drink    );$/;"	v
do_drop	act_obj.c	/^void do_drop( CHAR_DATA *ch, char *argument )$/;"	f
do_drop	interp.h	/^DECLARE_DO_FUN( do_drop     );$/;"	v
do_drunken_fury	fight.c	/^DECLARE_DO_FUN(do_drunken_fury); $/;"	v
do_drunken_fury	fight2.c	/^void do_drunken_fury( CHAR_DATA *ch, char *argument)$/;"	f
do_drunken_fury	interp.h	/^DECLARE_DO_FUN( do_drunken_fury);$/;"	v
do_dump	interp.h	/^DECLARE_DO_FUN( do_dump     );$/;"	v
do_east	act_move.c	/^void do_east( CHAR_DATA *ch, char *argument )$/;"	f
do_east	interp.h	/^DECLARE_DO_FUN( do_east     );$/;"	v
do_eat	act_obj.c	/^void do_eat( CHAR_DATA *ch, char *argument )$/;"	f
do_eat	interp.h	/^DECLARE_DO_FUN( do_eat      );$/;"	v
do_ecast	interp.h	/^DECLARE_DO_FUN( do_ecast        );$/;"	v
do_ecast	magic.c	/^void do_ecast( CHAR_DATA *ch, char *argument )$/;"	f
do_echo	act_wiz.c	/^void do_echo( CHAR_DATA *ch, char *argument )$/;"	f
do_echo	interp.h	/^DECLARE_DO_FUN( do_echo     );$/;"	v
do_emote	act_comm.c	/^void do_emote( CHAR_DATA *ch, char *argument )$/;"	f
do_emote	fight.c	/^DECLARE_DO_FUN(do_emote     );$/;"	v
do_emote	interp.h	/^DECLARE_DO_FUN( do_emote    );$/;"	v
do_enter	act_enter.c	/^void do_enter( CHAR_DATA *ch, char *argument)$/;"	f
do_enter	interp.h	/^DECLARE_DO_FUN( do_enter    );$/;"	v
do_envenom	act_obj.c	/^void do_envenom(CHAR_DATA *ch, char *argument)$/;"	f
do_envenom	interp.h	/^DECLARE_DO_FUN( do_envenom  );$/;"	v
do_eqhelp	act_info.c	/^void do_eqhelp( CHAR_DATA *ch, char *argument)$/;"	f
do_eqhelp	interp.h	/^DECLARE_DO_FUN( do_eqhelp   );$/;"	v
do_eqset	interp.h	/^DECLARE_DO_FUN( do_eqset     );$/;"	v
do_equipment	act_info.c	/^void do_equipment( CHAR_DATA *ch, char *argument )$/;"	f
do_equipment	interp.h	/^DECLARE_DO_FUN( do_equipment);$/;"	v
do_estimate	act_move.c	/^void do_estimate( CHAR_DATA *ch, char *argument )$/;"	f
do_estimate	interp.h	/^DECLARE_DO_FUN( do_estimate);$/;"	v
do_etls	interp.h	/^DECLARE_DO_FUN( do_etls     );$/;"	v
do_etls	stats.c	/^void do_etls( CHAR_DATA *ch, char *argument )$/;"	f
do_examine	act_info.c	/^void do_examine( CHAR_DATA *ch, char *argument )$/;"	f
do_examine	interp.h	/^DECLARE_DO_FUN( do_examine  );$/;"	v
do_exits	act_info.c	/^DECLARE_DO_FUN( do_exits    );$/;"	v
do_exits	act_info.c	/^void do_exits( CHAR_DATA *ch, char *argument )$/;"	f
do_exits	interp.h	/^DECLARE_DO_FUN( do_exits    );$/;"	v
do_explored	act_move.c	/^void do_explored(CHAR_DATA *ch, char *argument )$/;"	f
do_explored	interp.h	/^DECLARE_DO_FUN( do_explored );$/;"	v
do_extract	crafting.c	/^void do_extract( CHAR_DATA *ch, char *argument)$/;"	f
do_extract	interp.h	/^DECLARE_DO_FUN( do_extract  );$/;"	v
do_fatal_blow	fight.c	/^DECLARE_DO_FUN(do_fatal_blow);$/;"	v
do_fatal_blow	fight2.c	/^void do_fatal_blow( CHAR_DATA *ch, char *argument )$/;"	f
do_fatal_blow	interp.h	/^DECLARE_DO_FUN( do_fatal_blow);$/;"	v
do_feint	fight.c	/^DECLARE_DO_FUN(do_feint     );$/;"	v
do_feint	fight2.c	/^void do_feint( CHAR_DATA *ch, char *argument )$/;"	f
do_feint	interp.h	/^DECLARE_DO_FUN( do_feint    );$/;"	v
do_fervent_rage	fight.c	/^DECLARE_DO_FUN(do_fervent_rage    );$/;"	v
do_fervent_rage	fight2.c	/^void do_fervent_rage( CHAR_DATA *ch, char *argument )$/;"	f
do_fervent_rage	interp.h	/^DECLARE_DO_FUN( do_fervent_rage    );$/;"	v
do_fill	act_obj.c	/^void do_fill( CHAR_DATA *ch, char *argument )$/;"	f
do_fill	interp.h	/^DECLARE_DO_FUN( do_fill     );$/;"	v
do_findlock	interp.h	/^DECLARE_DO_FUN( do_findlock     );$/;"	v
do_findlock	redit-ilab.c	/^void do_findlock (CHAR_DATA *ch, char *argument)$/;"	f
do_findreset	interp.h	/^DECLARE_DO_FUN( do_findreset);$/;"	v
do_findreset	lua_main.c	/^void do_findreset( CHAR_DATA *ch, char *argument)$/;"	f
do_finger	bsave.c	/^void do_finger(CHAR_DATA *ch, char *argument)$/;"	f
do_finger	interp.h	/^DECLARE_DO_FUN( do_finger   );$/;"	v
do_firstaid	interp.h	/^DECLARE_DO_FUN( do_firstaid );$/;"	v
do_firstaid	ranger.c	/^void do_firstaid( CHAR_DATA *ch, char *argument )$/;"	f
do_fishing	interp.h	/^DECLARE_DO_FUN( do_fishing      );$/;"	v
do_fishing	ranger.c	/^void do_fishing(CHAR_DATA *ch)$/;"	f
do_flag	flags.c	/^void do_flag(CHAR_DATA *ch, char *argument)$/;"	f
do_flag	interp.h	/^DECLARE_DO_FUN( do_flag     );$/;"	v
do_fledge	interp.h	/^DECLARE_DO_FUN( do_fledge   );$/;"	v
do_fledge	ranger.c	/^void do_fledge( CHAR_DATA *ch, char *argument )$/;"	f
do_flee	fight.c	/^DECLARE_DO_FUN(do_flee      );$/;"	v
do_flee	fight.c	/^void do_flee( CHAR_DATA *ch, char *argument )$/;"	f
do_flee	interp.h	/^DECLARE_DO_FUN( do_flee     );$/;"	v
do_flee	special.c	/^DECLARE_DO_FUN(do_flee);$/;"	v
do_flush	act_wiz.c	/^void do_flush(CHAR_DATA *ch, char *argument)$/;"	f
do_flush	interp.h	/^DECLARE_DO_FUN( do_flush    );$/;"	v
do_follow	act_comm.c	/^void do_follow( CHAR_DATA *ch, char *argument )$/;"	f
do_follow	interp.h	/^DECLARE_DO_FUN( do_follow   );$/;"	v
do_forage	interp.h	/^DECLARE_DO_FUN( do_forage   );$/;"	v
do_forage	ranger.c	/^void do_forage(CHAR_DATA *ch)$/;"	f
do_force	act_wiz.c	/^void do_force( CHAR_DATA *ch, char *argument )$/;"	f
do_force	interp.h	/^DECLARE_DO_FUN( do_force    );$/;"	v
do_forget	forget.c	/^void do_forget(CHAR_DATA *ch, char *argument)$/;"	f
do_forget	interp.h	/^DECLARE_DO_FUN( do_forget   );$/;"	v
do_forgive	interp.h	/^DECLARE_DO_FUN( do_forgive  );$/;"	v
do_forgive	penalty.c	/^void do_forgive( CHAR_DATA *ch, char *argument )$/;"	f
do_freeze	interp.h	/^DECLARE_DO_FUN( do_freeze   );$/;"	v
do_freeze	penalty.c	/^void do_freeze( CHAR_DATA *ch, char *argument )$/;"	f
do_frfind	buildutil.c	/^void do_frfind( CHAR_DATA *ch, char *argument )$/;"	f
do_frfind	interp.h	/^DECLARE_DO_FUN( do_frfind   );$/;"	v
do_fstat	fight.c	/^DECLARE_DO_FUN(do_fstat	    );$/;"	v
do_fstat	fight.c	/^void do_fstat( CHAR_DATA *ch, char *argument)$/;"	f
do_fstat	interp.h	/^DECLARE_DO_FUN( do_fstat);$/;"	v
do_ftag	freeze.c	/^void do_ftag( CHAR_DATA *ch, char *argument )$/;"	f
do_ftag	interp.h	/^DECLARE_DO_FUN( do_ftag     );$/;"	v
do_fullauto	fight.c	/^DECLARE_DO_FUN(do_fullauto  );$/;"	v
do_fullauto	fight2.c	/^void do_fullauto( CHAR_DATA *ch, char *argument)$/;"	f
do_fullauto	interp.h	/^DECLARE_DO_FUN( do_fullauto);$/;"	v
do_fun	interp.h	/^	DO_FUN *        do_fun;$/;"	m	struct:cmd_type
do_fun	merc.h	/^    DO_FUN *            do_fun;$/;"	m	struct:grant_data
do_fun	merc.h	/^   DO_FUN *do_fun;                 \/* NULL if command is a spell *\/$/;"	m	struct:disabled_data
do_fun	mob_cmds.h	/^    DO_FUN *		do_fun;$/;"	m	struct:mob_cmd_type
do_fun	olc.h	/^    DO_FUN *		do_fun;$/;"	m	struct:editor_cmd_type
do_fury	interp.h	/^DECLARE_DO_FUN( do_fury   );$/;"	v
do_fvlist	buildutil.c	/^void do_fvlist (CHAR_DATA *ch, char *argument)$/;"	f
do_fvlist	interp.h	/^DECLARE_DO_FUN( do_fvlist   );$/;"	v
do_gag	act_comm.c	/^void do_gag( CHAR_DATA *ch, char *argument )$/;"	f
do_gag	interp.h	/^DECLARE_DO_FUN( do_gag      );$/;"	v
do_gain	interp.h	/^DECLARE_DO_FUN( do_gain     );$/;"	v
do_gain	skills.c	/^void do_gain(CHAR_DATA *ch, char *argument)$/;"	f
do_gametalk	act_comm.c	/^void do_gametalk( CHAR_DATA *ch, char *argument )$/;"	f
do_gametalk	interp.h	/^DECLARE_DO_FUN( do_gametalk );$/;"	v
do_gaze	fight2.c	/^void do_gaze( CHAR_DATA *ch, char *argument )$/;"	f
do_gaze	interp.h	/^DECLARE_DO_FUN( do_gaze     );$/;"	v
do_get	act_obj.c	/^void do_get( CHAR_DATA *ch, char *argument )$/;"	f
do_get	fight.c	/^DECLARE_DO_FUN(do_get       );$/;"	v
do_get	interp.h	/^DECLARE_DO_FUN( do_get      );$/;"	v
do_give	act_obj.c	/^void do_give( CHAR_DATA *ch, char *argument )$/;"	f
do_give	interp.h	/^DECLARE_DO_FUN( do_give     );$/;"	v
do_glance	act_info.c	/^void do_glance( CHAR_DATA *ch, char *argument )$/;"	f
do_glance	interp.h	/^DECLARE_DO_FUN( do_glance   );$/;"	v
do_god	interp.h	/^DECLARE_DO_FUN( do_god      );$/;"	v
do_god	religion.c	/^void do_god( CHAR_DATA *ch, char *argument )$/;"	f
do_gossip	act_comm.c	/^void do_gossip( CHAR_DATA *ch, char *argument )$/;"	f
do_gossip	interp.h	/^DECLARE_DO_FUN( do_gossip   );$/;"	v
do_goto	act_wiz.c	/^void do_goto( CHAR_DATA *ch, char *argument )$/;"	f
do_goto	interp.h	/^DECLARE_DO_FUN( do_goto     );$/;"	v
do_gouge	fight.c	/^DECLARE_DO_FUN(do_gouge     );$/;"	v
do_gouge	fight2.c	/^void do_gouge( CHAR_DATA *ch, char *argument )$/;"	f
do_gouge	interp.h	/^DECLARE_DO_FUN( do_gouge    );$/;"	v
do_grant	act_wiz.c	/^DECLARE_DO_FUN(do_grant     );$/;"	v
do_grant	grant.c	/^void do_grant( CHAR_DATA *ch, char *argument )$/;"	f
do_grant	interp.h	/^DECLARE_DO_FUN( do_grant    );$/;"	v
do_gratz	act_comm.c	/^void do_gratz( CHAR_DATA *ch, char *argument )$/;"	f
do_gratz	interp.h	/^DECLARE_DO_FUN( do_gratz    );$/;"	v
do_grep	grep.c	/^void do_grep( CHAR_DATA *ch, char *argument )$/;"	f
do_grep	interp.h	/^DECLARE_DO_FUN( do_grep     );$/;"	v
do_group	act_comm.c	/^void do_group( CHAR_DATA *ch, char *argument )$/;"	f
do_group	interp.h	/^DECLARE_DO_FUN( do_group    );$/;"	v
do_groups	act_comm.c	/^DECLARE_DO_FUN(do_groups    );$/;"	v
do_groups	interp.h	/^DECLARE_DO_FUN( do_groups   );$/;"	v
do_groups	skills.c	/^DECLARE_DO_FUN(do_groups    );$/;"	v
do_groups	skills.c	/^void do_groups(CHAR_DATA *ch, char *argument)$/;"	f
do_gstat	grant.c	/^void do_gstat( CHAR_DATA *ch, char *argument )$/;"	f
do_gstat	interp.h	/^DECLARE_DO_FUN( do_gstat    );$/;"	v
do_gtell	act_comm.c	/^void do_gtell( CHAR_DATA *ch, char *argument )$/;"	f
do_gtell	interp.h	/^DECLARE_DO_FUN( do_gtell    );$/;"	v
do_guard	fight.c	/^DECLARE_DO_FUN(do_guard     );$/;"	v
do_guard	fight2.c	/^void do_guard( CHAR_DATA *ch, char *argument )$/;"	f
do_guard	interp.h	/^DECLARE_DO_FUN( do_guard    );$/;"	v
do_guild	interp.h	/^DECLARE_DO_FUN( do_guild    );$/;"	v
do_headbutt	fight.c	/^DECLARE_DO_FUN(do_headbutt  );$/;"	v
do_headbutt	fight2.c	/^void do_headbutt( CHAR_DATA *ch, char *argument )$/;"	f
do_headbutt	interp.h	/^DECLARE_DO_FUN( do_headbutt );$/;"	v
do_heal	healer.c	/^void do_heal(CHAR_DATA *ch, char *argument)$/;"	f
do_heal	interp.h	/^DECLARE_DO_FUN( do_heal     );$/;"	v
do_hedit	interp.h	/^DECLARE_DO_FUN( do_hedit    );$/;"	v
do_hedit	olc.c	/^void do_hedit( CHAR_DATA *ch, char *argument )$/;"	f
do_hedit	olc.h	/^DECLARE_DO_FUN( do_hedit       );$/;"	v
do_help	act_info.c	/^DECLARE_DO_FUN( do_help     );$/;"	v
do_help	act_info.c	/^void do_help( CHAR_DATA *ch, char *argument )$/;"	f
do_help	act_wiz.c	/^DECLARE_DO_FUN(do_help      );$/;"	v
do_help	board.c	/^DECLARE_DO_FUN( do_help );$/;"	v
do_help	comm.c	/^DECLARE_DO_FUN(do_help      );$/;"	v
do_help	interp.h	/^DECLARE_DO_FUN( do_help     );$/;"	v
do_help	nanny.c	/^DECLARE_DO_FUN(do_help      );$/;"	v
do_help	olc.h	/^DECLARE_DO_FUN(    do_help    );$/;"	v
do_help	skills.c	/^DECLARE_DO_FUN(do_help      );$/;"	v
do_helper	act_info.c	/^void do_helper( CHAR_DATA *ch, char *argument )$/;"	f
do_helper	interp.h	/^DECLARE_DO_FUN( do_helper   );$/;"	v
do_herbs	alchemy.c	/^void do_herbs( CHAR_DATA *ch, char *argument )$/;"	f
do_herbs	interp.h	/^DECLARE_DO_FUN( do_herbs    );$/;"	v
do_hide	act_move.c	/^void do_hide( CHAR_DATA *ch, char *argument )$/;"	f
do_hide	interp.h	/^DECLARE_DO_FUN( do_hide     );$/;"	v
do_hogtie	fight.c	/^DECLARE_DO_FUN(do_hogtie    );$/;"	v
do_hogtie	fight2.c	/^void do_hogtie(CHAR_DATA *ch, char *argument )$/;"	f
do_hogtie	interp.h	/^DECLARE_DO_FUN( do_hogtie);$/;"	v
do_holylight	act_wiz.c	/^void do_holylight( CHAR_DATA *ch, char *argument )$/;"	f
do_holylight	interp.h	/^DECLARE_DO_FUN( do_holylight);$/;"	v
do_hpractice	interp.h	/^DECLARE_DO_FUN( do_hpractice);$/;"	v
do_hpractice	skills.c	/^void do_hpractice( CHAR_DATA *ch, char *argument )$/;"	f
do_hunt	act_info.c	/^DECLARE_DO_FUN(do_hunt);$/;"	v
do_hunt	hunt.c	/^void do_hunt( CHAR_DATA *ch, char *argument )$/;"	f
do_hunt	interp.h	/^DECLARE_DO_FUN( do_hunt     );$/;"	v
do_hunt_relic	hunt.c	/^void do_hunt_relic( CHAR_DATA *ch )$/;"	f
do_hurl	fight.c	/^DECLARE_DO_FUN(do_hurl      );$/;"	v
do_hurl	fight2.c	/^void do_hurl( CHAR_DATA *ch, char *argument )$/;"	f
do_hurl	interp.h	/^DECLARE_DO_FUN( do_hurl         );$/;"	v
do_ignite	act_obj.c	/^void do_ignite( CHAR_DATA *ch, char *argument )$/;"	f
do_ignite	interp.h	/^DECLARE_DO_FUN( do_ignite   );$/;"	v
do_immflag	interp.h	/^DECLARE_DO_FUN( do_immflag  );$/;"	v
do_immtalk	act_comm.c	/^void do_immtalk( CHAR_DATA *ch, char *argument )$/;"	f
do_immtalk	interp.h	/^DECLARE_DO_FUN( do_immtalk  );$/;"	v
do_imotd	act_info.c	/^void do_imotd(CHAR_DATA *ch, char *argument)$/;"	f
do_imotd	interp.h	/^DECLARE_DO_FUN( do_imotd    );$/;"	v
do_incognito	act_wiz.c	/^void do_incognito( CHAR_DATA *ch, char *argument )$/;"	f
do_incognito	interp.h	/^DECLARE_DO_FUN( do_incognito);$/;"	v
do_infectious_arrow	fight2.c	/^void do_infectious_arrow( CHAR_DATA *ch, char *argument )$/;"	f
do_infectious_arrow	interp.h	/^DECLARE_DO_FUN( do_infectious_arrow);$/;"	v
do_info	act_comm.c	/^void do_info( CHAR_DATA *ch, char *argument )$/;"	f
do_info	interp.h	/^DECLARE_DO_FUN( do_info     );$/;"	v
do_inspire	fight2.c	/^void do_inspire( CHAR_DATA *ch, char *argument )$/;"	f
do_inspire	interp.h	/^DECLARE_DO_FUN( do_inspire  );$/;"	v
do_intimidate	fight2.c	/^void do_intimidate( CHAR_DATA *ch, char *argument )$/;"	f
do_intimidate	interp.h	/^DECLARE_DO_FUN( do_intimidate );$/;"	v
do_inventory	act_info.c	/^void do_inventory( CHAR_DATA *ch, char *argument )$/;"	f
do_inventory	interp.h	/^DECLARE_DO_FUN( do_inventory);$/;"	v
do_invis	act_wiz.c	/^void do_invis( CHAR_DATA *ch, char *argument )$/;"	f
do_invis	interp.h	/^DECLARE_DO_FUN( do_invis    );$/;"	v
do_invite	clan.c	/^void do_invite(CHAR_DATA *ch, char *argument)$/;"	f
do_invite	interp.h	/^DECLARE_DO_FUN( do_invite   );$/;"	v
do_jail	interp.h	/^DECLARE_DO_FUN( do_jail     );$/;"	v
do_jail	penalty.c	/^void do_jail( CHAR_DATA *ch, char *argument )$/;"	f
do_kick	fight.c	/^DECLARE_DO_FUN(do_kick      );$/;"	v
do_kick	fight2.c	/^void do_kick( CHAR_DATA *ch, char *argument )$/;"	f
do_kick	interp.h	/^DECLARE_DO_FUN( do_kick     );$/;"	v
do_kill	fight.c	/^void do_kill( CHAR_DATA *ch, char *argument )$/;"	f
do_kill	interp.h	/^DECLARE_DO_FUN( do_kill     );$/;"	v
do_lagfree	act_info.c	/^void do_lagfree( CHAR_DATA *ch, char *argument)$/;"	f
do_lagfree	interp.h	/^DECLARE_DO_FUN( do_lagfree);$/;"	v
do_lboard	interp.h	/^DECLARE_DO_FUN( do_lboard);$/;"	v
do_lboard	lua_main.c	/^void do_lboard( CHAR_DATA *ch, char *argument)$/;"	f
do_leadership	act_info.c	/^DECLARE_DO_FUN(do_leadership);$/;"	v
do_leadership	act_info.c	/^void do_leadership( CHAR_DATA *ch, char *argument )$/;"	f
do_leadership	interp.h	/^DECLARE_DO_FUN( do_leadership );$/;"	v
do_leg_sweep	fight.c	/^DECLARE_DO_FUN(do_leg_sweep );$/;"	v
do_leg_sweep	fight2.c	/^void do_leg_sweep( CHAR_DATA *ch, char *argument )$/;"	f
do_leg_sweep	interp.h	/^DECLARE_DO_FUN( do_leg_sweep);$/;"	v
do_lfind	buildutil.c	/^void do_lfind( CHAR_DATA *ch, char *argument )$/;"	f
do_lfind	interp.h	/^DECLARE_DO_FUN( do_lfind    );$/;"	v
do_lhistory	interp.h	/^DECLARE_DO_FUN( do_lhistory);$/;"	v
do_lhistory	lua_main.c	/^void do_lhistory( CHAR_DATA *ch, char *argument)$/;"	f
do_list	act_obj.c	/^void do_list( CHAR_DATA *ch, char *argument )$/;"	f
do_list	interp.h	/^DECLARE_DO_FUN( do_list     );$/;"	v
do_load	act_wiz.c	/^void do_load(CHAR_DATA *ch, char *argument )$/;"	f
do_load	interp.h	/^DECLARE_DO_FUN( do_load     );$/;"	v
do_lock	act_move.c	/^void do_lock( CHAR_DATA *ch, char *argument )$/;"	f
do_lock	interp.h	/^DECLARE_DO_FUN( do_lock     );$/;"	v
do_log	act_wiz.c	/^void do_log( CHAR_DATA *ch, char *argument )$/;"	f
do_log	interp.h	/^DECLARE_DO_FUN( do_log      );$/;"	v
do_login_grant	grant.c	/^void do_login_grant(CHAR_DATA *ch)$/;"	f
do_loginquote	nanny.c	/^void do_loginquote( CHAR_DATA *ch )$/;"	f
do_look	act_enter.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	act_info.c	/^DECLARE_DO_FUN( do_look     );$/;"	v
do_look	act_info.c	/^void do_look( CHAR_DATA *ch, char *argument )$/;"	f
do_look	act_move.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	act_wiz.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	comm.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	fight.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	interp.h	/^DECLARE_DO_FUN( do_look     );$/;"	v
do_look	magic.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	magic2.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	mob_cmds.c	/^DECLARE_DO_FUN( do_look );$/;"	v
do_look	nanny.c	/^DECLARE_DO_FUN(do_look      );$/;"	v
do_look	penalty.c	/^DECLARE_DO_FUN(do_look);$/;"	v
do_look	remort.c	/^DECLARE_DO_FUN( do_look );$/;"	v
do_look	warfare.c	/^DECLARE_DO_FUN(do_look);$/;"	v
do_lore	act_info.c	/^DECLARE_DO_FUN(do_lore);$/;"	v
do_lore	act_info.c	/^void do_lore ( CHAR_DATA *ch, char *argument )$/;"	f
do_lore	interp.h	/^DECLARE_DO_FUN( do_lore     );$/;"	v
do_luaconfig	interp.h	/^DECLARE_DO_FUN( do_luaconfig);$/;"	v
do_luaconfig	lua_main.c	/^void do_luaconfig( CHAR_DATA *ch, char *argument)$/;"	f
do_luahelp	interp.h	/^DECLARE_DO_FUN( do_luahelp);$/;"	v
do_luahelp	lua_main.c	/^void do_luahelp( CHAR_DATA *ch, char *argument)$/;"	f
do_luai	interp.h	/^DECLARE_DO_FUN( do_luai);$/;"	v
do_luai	lua_main.c	/^void do_luai( CHAR_DATA *ch, char *argument)$/;"	f
do_luaquery	interp.h	/^DECLARE_DO_FUN( do_luaquery);$/;"	v
do_luaquery	lua_main.c	/^void do_luaquery( CHAR_DATA *ch, char *argument)$/;"	f
do_luareset	interp.h	/^DECLARE_DO_FUN( do_luareset);$/;"	v
do_luareset	lua_main.c	/^void do_luareset( CHAR_DATA *ch, char *argument)$/;"	f
do_marry	interp.h	/^DECLARE_DO_FUN( do_marry    );$/;"	v
do_marry	marry.c	/^void do_marry( CHAR_DATA *ch, char *argument)$/;"	f
do_master	interp.h	/^DECLARE_DO_FUN( do_master   );$/;"	v
do_master	skills.c	/^void do_master( CHAR_DATA *ch, char *argument )$/;"	f
do_medit	interp.h	/^DECLARE_DO_FUN( do_medit    );$/;"	v
do_medit	olc.c	/^void do_medit( CHAR_DATA *ch, char *argument )$/;"	f
do_medit	olc.h	/^DECLARE_DO_FUN( do_medit        );$/;"	v
do_melee	fight.c	/^DECLARE_DO_FUN(do_melee     );$/;"	v
do_melee	interp.h	/^DECLARE_DO_FUN( do_melee    );$/;"	v
do_memory	db.c	/^void do_memory( CHAR_DATA *ch, char *argument )$/;"	f
do_memory	interp.h	/^DECLARE_DO_FUN( do_memory   );$/;"	v
do_merge	act_obj.c	/^void do_merge( CHAR_DATA *ch, char *argument )$/;"	f
do_merge	interp.h	/^DECLARE_DO_FUN( do_merge    );$/;"	v
do_mfind	buildutil.c	/^DECLARE_DO_FUN(do_mfind     );$/;"	v
do_mfind	buildutil.c	/^void do_mfind( CHAR_DATA *ch, char *argument )$/;"	f
do_mfind	interp.h	/^DECLARE_DO_FUN( do_mfind    );$/;"	v
do_mindflay	fight2.c	/^void do_mindflay( CHAR_DATA *ch, char *argument )$/;"	f
do_mindflay	interp.h	/^DECLARE_DO_FUN( do_mindflay );$/;"	v
do_mload	act_wiz.c	/^DECLARE_DO_FUN(do_mload     );$/;"	v
do_mload	act_wiz.c	/^void do_mload( CHAR_DATA *ch, char *argument )$/;"	f
do_mload	interp.h	/^DECLARE_DO_FUN( do_mload    );$/;"	v
do_mmcast	interp.h	/^DECLARE_DO_FUN( do_mmcast       );$/;"	v
do_mmcast	magic.c	/^void do_mmcast( CHAR_DATA *ch, char *argument )$/;"	f
do_mob	interp.h	/^DECLARE_DO_FUN( do_mob      );$/;"	v
do_mob	mob_cmds.c	/^void do_mob( CHAR_DATA *ch, char *argument )$/;"	f
do_morph	act_move.c	/^void do_morph(CHAR_DATA *ch, char *argument)$/;"	f
do_morph	interp.h	/^DECLARE_DO_FUN( do_morph    );$/;"	v
do_morph	update.c	/^DECLARE_DO_FUN(do_morph     );$/;"	v
do_mortlag	act_wiz.c	/^void do_mortlag(CHAR_DATA *ch, char *argument)$/;"	f
do_mortlag	interp.h	/^DECLARE_DO_FUN( do_mortlag  );$/;"	v
do_motd	act_info.c	/^void do_motd(CHAR_DATA *ch, char *argument)$/;"	f
do_motd	interp.h	/^DECLARE_DO_FUN( do_motd     );$/;"	v
do_mpact	mob_cmds.c	/^void do_mpact( CHAR_DATA *ch, char *argument )$/;"	f
do_mpact	mob_cmds.h	/^DECLARE_DO_FUN( do_mpact        );$/;"	v
do_mpapply	mob_cmds.c	/^void do_mpapply( CHAR_DATA *ch, char *argument )$/;"	f
do_mpapplyb	mob_cmds.c	/^void do_mpapplyb( CHAR_DATA *ch, char *argument )$/;"	f
do_mpasound	mob_cmds.c	/^void do_mpasound( CHAR_DATA *ch, char *argument )$/;"	f
do_mpasound	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpasound	);$/;"	v
do_mpassist	mob_cmds.c	/^void do_mpassist( CHAR_DATA *ch, char *argument )$/;"	f
do_mpassist	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpassist	);$/;"	v
do_mpat	mob_cmds.c	/^void do_mpat( CHAR_DATA *ch, char *argument )$/;"	f
do_mpat	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpat		);$/;"	v
do_mpcall	mob_cmds.c	/^void do_mpcall( CHAR_DATA *ch, char *argument )$/;"	f
do_mpcall	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpcall	);$/;"	v
do_mpcancel	mob_cmds.c	/^void do_mpcancel( CHAR_DATA *ch, char *argument )$/;"	f
do_mpcancel	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpcancel	);$/;"	v
do_mpcast	mob_cmds.c	/^void do_mpcast( CHAR_DATA *ch, char *argument )$/;"	f
do_mpcast	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpcast	);$/;"	v
do_mpdamage	mob_cmds.c	/^void do_mpdamage( CHAR_DATA *ch, char *argument )$/;"	f
do_mpdamage	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpdamage	);$/;"	v
do_mpdelay	mob_cmds.c	/^void do_mpdelay( CHAR_DATA *ch, char *argument )$/;"	f
do_mpdelay	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpdelay	);$/;"	v
do_mpdump	interp.h	/^DECLARE_DO_FUN( do_mpdump   );$/;"	v
do_mpdump	mob_cmds.c	/^void do_mpdump( CHAR_DATA *ch, char *argument )$/;"	f
do_mpecho	mob_cmds.c	/^void do_mpecho( CHAR_DATA *ch, char *argument )$/;"	f
do_mpecho	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpecho	);$/;"	v
do_mpechoaround	mob_cmds.c	/^void do_mpechoaround( CHAR_DATA *ch, char *argument )$/;"	f
do_mpechoaround	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpechoaround	);$/;"	v
do_mpechoat	mob_cmds.c	/^void do_mpechoat( CHAR_DATA *ch, char *argument )$/;"	f
do_mpechoat	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpechoat	);$/;"	v
do_mpedit	interp.h	/^DECLARE_DO_FUN( do_mpedit   );$/;"	v
do_mpedit	olc.h	/^DECLARE_DO_FUN( do_mpedit	);$/;"	v
do_mpedit	olc_mpcode.c	/^void do_mpedit(CHAR_DATA *ch, char *argument)$/;"	f
do_mpfind	buildutil.c	/^void do_mpfind( CHAR_DATA *ch, char *argument )$/;"	f
do_mpfind	interp.h	/^DECLARE_DO_FUN( do_mpfind   );$/;"	v
do_mpforce	mob_cmds.c	/^void do_mpforce( CHAR_DATA *ch, char *argument )$/;"	f
do_mpforce	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpforce	);$/;"	v
do_mpforget	mob_cmds.c	/^void do_mpforget( CHAR_DATA *ch, char *argument )$/;"	f
do_mpforget	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpforget	);$/;"	v
do_mpgecho	mob_cmds.c	/^void do_mpgecho( CHAR_DATA *ch, char *argument )$/;"	f
do_mpgecho	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpgecho	);$/;"	v
do_mpgforce	mob_cmds.c	/^void do_mpgforce( CHAR_DATA *ch, char *argument )$/;"	f
do_mpgforce	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpgforce	);$/;"	v
do_mpgoto	mob_cmds.c	/^void do_mpgoto( CHAR_DATA *ch, char *argument )$/;"	f
do_mpgoto	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpgoto	);$/;"	v
do_mpgtransfer	mob_cmds.c	/^void do_mpgtransfer( CHAR_DATA *ch, char *argument )$/;"	f
do_mpgtransfer	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpgtransfer	);$/;"	v
do_mphit	mob_cmds.c	/^void do_mphit( CHAR_DATA *ch, char *argument )$/;"	f
do_mphit	mob_cmds.h	/^DECLARE_DO_FUN( do_mphit        );$/;"	v
do_mpjunk	mob_cmds.c	/^void do_mpjunk( CHAR_DATA *ch, char *argument )$/;"	f
do_mpjunk	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpjunk	);$/;"	v
do_mpkill	mob_cmds.c	/^void do_mpkill( CHAR_DATA *ch, char *argument )$/;"	f
do_mpkill	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpkill	);$/;"	v
do_mpmload	mob_cmds.c	/^void do_mpmload( CHAR_DATA *ch, char *argument )$/;"	f
do_mpmload	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpmload	);$/;"	v
do_mpoload	mob_cmds.c	/^void do_mpoload( CHAR_DATA *ch, char *argument )$/;"	f
do_mpoload	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpoload	);$/;"	v
do_mpotransfer	mob_cmds.c	/^void do_mpotransfer( CHAR_DATA *ch, char *argument )$/;"	f
do_mpotransfer	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpotransfer	);$/;"	v
do_mppeace	mob_cmds.c	/^void do_mppeace( CHAR_DATA *ch, char *argument )$/;"	f
do_mppeace	mob_cmds.h	/^DECLARE_DO_FUN( do_mppeace      );$/;"	v
do_mppurge	mob_cmds.c	/^void do_mppurge( CHAR_DATA *ch, char *argument )$/;"	f
do_mppurge	mob_cmds.h	/^DECLARE_DO_FUN(	do_mppurge	);$/;"	v
do_mpqadvance	mob_cmds.c	/^void do_mpqadvance( CHAR_DATA *ch, char *argument )$/;"	f
do_mpqadvance	mob_cmds.h	/^DECLARE_DO_FUN( do_mpqadvance   );$/;"	v
do_mpqset	mob_cmds.c	/^void do_mpqset( CHAR_DATA *ch, char *argument )$/;"	f
do_mpqset	mob_cmds.h	/^DECLARE_DO_FUN( do_mpqset       );$/;"	v
do_mpremember	mob_cmds.c	/^void do_mpremember( CHAR_DATA *ch, char *argument )$/;"	f
do_mpremember	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpremember	);$/;"	v
do_mpremort	mob_cmds.c	/^void do_mpremort( CHAR_DATA *ch, char *argument )$/;"	f
do_mpremort	mob_cmds.h	/^DECLARE_DO_FUN( do_mpremort     );$/;"	v
do_mpremove	mob_cmds.c	/^void do_mpremove( CHAR_DATA *ch, char *argument )$/;"	f
do_mpremove	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpremove	);$/;"	v
do_mprestore	mob_cmds.c	/^void do_mprestore( CHAR_DATA *ch, char *argument )$/;"	f
do_mprestore	mob_cmds.h	/^DECLARE_DO_FUN( do_mprestore    );$/;"	v
do_mpreward	mob_cmds.c	/^void do_mpreward( CHAR_DATA *ch, char *argument )$/;"	f
do_mpreward	mob_cmds.h	/^DECLARE_DO_FUN( do_mpreward     );$/;"	v
do_mprun	interp.h	/^DECLARE_DO_FUN( do_mprun);$/;"	v
do_mprun	olc_mpcode.c	/^void do_mprun(CHAR_DATA *ch, char *argument)$/;"	f
do_mpstat	interp.h	/^DECLARE_DO_FUN( do_mpstat   );$/;"	v
do_mpstat	mob_cmds.c	/^void do_mpstat( CHAR_DATA *ch, char *argument )$/;"	f
do_mptransfer	mob_cmds.c	/^void do_mptransfer( CHAR_DATA *ch, char *argument )$/;"	f
do_mptransfer	mob_cmds.h	/^DECLARE_DO_FUN(	do_mptransfer	);$/;"	v
do_mpvforce	mob_cmds.c	/^void do_mpvforce( CHAR_DATA *ch, char *argument )$/;"	f
do_mpvforce	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpvforce	);$/;"	v
do_mpzecho	mob_cmds.c	/^void do_mpzecho( CHAR_DATA *ch, char *argument )$/;"	f
do_mpzecho	mob_cmds.h	/^DECLARE_DO_FUN(	do_mpzecho	);$/;"	v
do_mset	buildutil.c	/^DECLARE_DO_FUN(do_mset      );$/;"	v
do_mset	buildutil.c	/^void do_mset( CHAR_DATA *ch, char *argument )$/;"	f
do_mset	interp.h	/^DECLARE_DO_FUN( do_mset     );$/;"	v
do_mstat	buildutil.c	/^DECLARE_DO_FUN(do_mstat     );$/;"	v
do_mstat	buildutil.c	/^void do_mstat( CHAR_DATA *ch, char *argument )$/;"	f
do_mstat	interp.h	/^DECLARE_DO_FUN( do_mstat    );$/;"	v
do_mudconfig	interp.h	/^DECLARE_DO_FUN( do_mudconfig);$/;"	v
do_mudconfig	lua_main.c	/^void do_mudconfig( CHAR_DATA *ch, char *argument)$/;"	f
do_mug	fight2.c	/^void do_mug( CHAR_DATA *ch, char *argument )$/;"	f
do_mug	interp.h	/^DECLARE_DO_FUN( do_mug      );$/;"	v
do_murde	fight.c	/^void do_murde( CHAR_DATA *ch, char *argument )$/;"	f
do_murde	interp.h	/^DECLARE_DO_FUN( do_murde    );$/;"	v
do_murder	fight.c	/^void do_murder( CHAR_DATA *ch, char *argument )$/;"	f
do_murder	interp.h	/^DECLARE_DO_FUN( do_murder   );$/;"	v
do_murder	special.c	/^DECLARE_DO_FUN(do_murder);$/;"	v
do_music	act_comm.c	/^void do_music( CHAR_DATA *ch, char *argument )$/;"	f
do_music	interp.h	/^DECLARE_DO_FUN( do_music    );$/;"	v
do_mwhere	buildutil.c	/^void do_mwhere( CHAR_DATA *ch, char *argument )$/;"	f
do_mwhere	interp.h	/^DECLARE_DO_FUN( do_mwhere   );$/;"	v
do_name	auth.c	/^void do_name( CHAR_DATA *ch, char *argument )$/;"	f
do_name	interp.h	/^DECLARE_DO_FUN( do_name     );$/;"	v
do_namecolor	act_wiz.c	/^void do_namecolor( CHAR_DATA *ch, char *argument)$/;"	f
do_ncatchup	board.c	/^static void do_ncatchup (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_ncatchup_all	board.c	/^static void do_ncatchup_all ( CHAR_DATA *ch)$/;"	f	file:
do_net	fight.c	/^DECLARE_DO_FUN(do_net       );$/;"	v
do_net	fight2.c	/^void do_net( CHAR_DATA *ch, char *argument )$/;"	f
do_net	interp.h	/^DECLARE_DO_FUN( do_net      );$/;"	v
do_new_dump	db2.c	/^void do_new_dump( CHAR_DATA *ch, char *argument )$/;"	f
do_new_dump	interp.h	/^DECLARE_DO_FUN( do_new_dump );$/;"	v
do_newbie	act_comm.c	/^void do_newbie( CHAR_DATA *ch, char *argument )$/;"	f
do_newbie	interp.h	/^DECLARE_DO_FUN( do_newbie   );$/;"	v
do_newlock	act_wiz.c	/^void do_newlock( CHAR_DATA *ch, char *argument )$/;"	f
do_newlock	interp.h	/^DECLARE_DO_FUN( do_newlock  );$/;"	v
do_nlist	board.c	/^static void do_nlist (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_noaccept	act_info.c	/^void do_noaccept( CHAR_DATA *ch, char *argument )$/;"	f
do_noaccept	interp.h	/^DECLARE_DO_FUN( do_noaccept );$/;"	v
do_nocancel	act_info.c	/^void do_nocancel(CHAR_DATA *ch, char *argument)$/;"	f
do_nocancel	interp.h	/^DECLARE_DO_FUN( do_nocancel );$/;"	v
do_nochannel	interp.h	/^DECLARE_DO_FUN( do_nochannel);$/;"	v
do_nochannel	penalty.c	/^void do_nochannel( CHAR_DATA *ch, char *argument )$/;"	f
do_noemote	interp.h	/^DECLARE_DO_FUN( do_noemote  );$/;"	v
do_noemote	penalty.c	/^void do_noemote( CHAR_DATA *ch, char *argument )$/;"	f
do_noexp	act_info.c	/^void do_noexp( CHAR_DATA *ch, char *argument )$/;"	f
do_noexp	interp.h	/^DECLARE_DO_FUN( do_noexp    );$/;"	v
do_nofollow	act_info.c	/^void do_nofollow(CHAR_DATA *ch, char *argument)$/;"	f
do_nofollow	interp.h	/^DECLARE_DO_FUN( do_nofollow );$/;"	v
do_nohelp	act_info.c	/^void do_nohelp( CHAR_DATA *ch, char *argument )$/;"	f
do_nohelp	interp.h	/^DECLARE_DO_FUN( do_nohelp   );$/;"	v
do_nolocate	act_info.c	/^void do_nolocate(CHAR_DATA *ch, char *argument)$/;"	f
do_nolocate	interp.h	/^DECLARE_DO_FUN( do_nolocate );$/;"	v
do_noloot	act_info.c	/^void do_noloot(CHAR_DATA *ch, char *argument)$/;"	f
do_noloot	interp.h	/^DECLARE_DO_FUN( do_noloot   );$/;"	v
do_nonote	interp.h	/^DECLARE_DO_FUN( do_nonote   );$/;"	v
do_nonote	penalty.c	/^void do_nonote( CHAR_DATA *ch, char *argument )$/;"	f
do_noreply	act_comm.c	/^void do_noreply( CHAR_DATA *ch, char *argument )$/;"	f
do_noreply	interp.h	/^DECLARE_DO_FUN( do_noreply  );  \/* purposely placed below do_north and the like, so 'nor' can be used *\/$/;"	v
do_north	act_move.c	/^void do_north( CHAR_DATA *ch, char *argument )$/;"	f
do_north	interp.h	/^DECLARE_DO_FUN( do_north    );$/;"	v
do_northeast	act_move.c	/^void do_northeast( CHAR_DATA *ch, char *argument )$/;"	f
do_northeast	interp.h	/^DECLARE_DO_FUN( do_northeast);$/;"	v
do_northwest	act_move.c	/^void do_northwest( CHAR_DATA *ch, char *argument )$/;"	f
do_northwest	interp.h	/^DECLARE_DO_FUN( do_northwest);$/;"	v
do_noshout	interp.h	/^DECLARE_DO_FUN( do_noshout  );$/;"	v
do_noshout	penalty.c	/^void do_noshout( CHAR_DATA *ch, char *argument )$/;"	f
do_nosummon	act_info.c	/^void do_nosummon(CHAR_DATA *ch, char *argument)$/;"	f
do_nosummon	interp.h	/^DECLARE_DO_FUN( do_nosummon );$/;"	v
do_nosurrender	act_info.c	/^void do_nosurrender( CHAR_DATA *ch, char *argument )$/;"	f
do_nosurrender	interp.h	/^DECLARE_DO_FUN( do_nosurrender );$/;"	v
do_note	board.c	/^void do_note (CHAR_DATA *ch, char *argument)$/;"	f
do_note	interp.h	/^DECLARE_DO_FUN( do_note     );$/;"	v
do_notell	interp.h	/^DECLARE_DO_FUN( do_notell   );$/;"	v
do_notell	penalty.c	/^void do_notell( CHAR_DATA *ch, char *argument )$/;"	f
do_nowar	interp.h	/^DECLARE_DO_FUN( do_nowar        );$/;"	v
do_nowar	warfare.c	/^void do_nowar( CHAR_DATA *ch, char *argument )$/;"	f
do_nread	board.c	/^static void do_nread (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_nremove	board.c	/^static void do_nremove (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_nwrite	board.c	/^static void do_nwrite (CHAR_DATA *ch, char *argument)$/;"	f	file:
do_oedit	interp.h	/^DECLARE_DO_FUN( do_oedit    );$/;"	v
do_oedit	olc.c	/^void do_oedit( CHAR_DATA *ch, char *argument )$/;"	f
do_oedit	olc.h	/^DECLARE_DO_FUN( do_oedit        );$/;"	v
do_ofind	buildutil.c	/^DECLARE_DO_FUN(do_ofind     );$/;"	v
do_ofind	buildutil.c	/^void do_ofind( CHAR_DATA *ch, char *argument )$/;"	f
do_ofind	interp.h	/^DECLARE_DO_FUN( do_ofind    );$/;"	v
do_olc	interp.h	/^DECLARE_DO_FUN( do_olc      );$/;"	v
do_olc	olc.c	/^void do_olc( CHAR_DATA *ch, char *argument )$/;"	f
do_old_score	interp.h	/^DECLARE_DO_FUN( do_old_score );$/;"	v
do_oldattributes	act_info.c	/^void do_oldattributes(CHAR_DATA *ch, char *argument)$/;"	f
do_oldfinger	bsave.c	/^void do_oldfinger(CHAR_DATA *ch, char *argument)$/;"	f
do_oldscore	act_info.c	/^void do_oldscore( CHAR_DATA *ch, char *argument )$/;"	f
do_oldworth	act_info.c	/^void do_oldworth( CHAR_DATA *ch, char *argument )$/;"	f
do_oload	act_wiz.c	/^DECLARE_DO_FUN(do_oload     );$/;"	v
do_oload	act_wiz.c	/^void do_oload( CHAR_DATA *ch, char *argument )$/;"	f
do_oload	interp.h	/^DECLARE_DO_FUN( do_oload    );$/;"	v
do_omni	act_wiz.c	/^void do_omni( CHAR_DATA *ch, char *argument )$/;"	f
do_omni	interp.h	/^DECLARE_DO_FUN( do_omni     );$/;"	v
do_opdump	interp.h	/^DECLARE_DO_FUN( do_opdump   );$/;"	v
do_opdump	mob_cmds.c	/^void do_opdump( CHAR_DATA *ch, char *argument )$/;"	f
do_opedit	interp.h	/^DECLARE_DO_FUN( do_opedit   );$/;"	v
do_opedit	olc.h	/^DECLARE_DO_FUN( do_opedit   );$/;"	v
do_opedit	olc_opcode.c	/^void do_opedit(CHAR_DATA *ch, char *argument)$/;"	f
do_open	act_move.c	/^void do_open( CHAR_DATA *ch, char *argument )$/;"	f
do_open	hunt.c	/^DECLARE_DO_FUN(do_open  );$/;"	v
do_open	interp.h	/^DECLARE_DO_FUN( do_open     );$/;"	v
do_open	special.c	/^DECLARE_DO_FUN(do_open      );$/;"	v
do_openvlist	buildutil.c	/^void do_openvlist( CHAR_DATA *ch, char *argument )$/;"	f
do_openvlist	interp.h	/^DECLARE_DO_FUN( do_openvlist);$/;"	v
do_oprun	interp.h	/^DECLARE_DO_FUN( do_oprun);$/;"	v
do_oprun	olc_opcode.c	/^void do_oprun(CHAR_DATA *ch, char *argument)$/;"	f
do_order	act_comm.c	/^void do_order( CHAR_DATA *ch, char *argument )$/;"	f
do_order	interp.h	/^DECLARE_DO_FUN( do_order    );$/;"	v
do_oset	buildutil.c	/^DECLARE_DO_FUN(do_oset      );$/;"	v
do_oset	buildutil.c	/^void do_oset( CHAR_DATA *ch, char *argument )$/;"	f
do_oset	interp.h	/^DECLARE_DO_FUN( do_oset     );$/;"	v
do_ostat	buildutil.c	/^DECLARE_DO_FUN(do_ostat     );$/;"	v
do_ostat	buildutil.c	/^void do_ostat( CHAR_DATA *ch, char *argument )$/;"	f
do_ostat	interp.h	/^DECLARE_DO_FUN( do_ostat    );$/;"	v
do_outfit	act_wiz.c	/^void do_outfit ( CHAR_DATA *ch, char *argument )$/;"	f
do_outfit	comm.c	/^DECLARE_DO_FUN(do_outfit    );$/;"	v
do_outfit	interp.h	/^DECLARE_DO_FUN( do_outfit   );$/;"	v
do_outfit	nanny.c	/^DECLARE_DO_FUN(do_outfit    );$/;"	v
do_outfit	remort.c	/^DECLARE_DO_FUN( do_outfit );$/;"	v
do_owhere	buildutil.c	/^void do_owhere(CHAR_DATA *ch, char *argument )$/;"	f
do_owhere	interp.h	/^DECLARE_DO_FUN( do_owhere   );$/;"	v
do_paralysis_poison	act_obj.c	/^void do_paralysis_poison(CHAR_DATA *ch, char *argument)$/;"	f
do_paralysis_poison	interp.h	/^DECLARE_DO_FUN( do_paralysis_poison  );$/;"	v
do_pardon	interp.h	/^DECLARE_DO_FUN( do_pardon   );$/;"	v
do_pardon	penalty.c	/^void do_pardon( CHAR_DATA *ch, char *argument )$/;"	f
do_parole	interp.h	/^DECLARE_DO_FUN( do_parole   );$/;"	v
do_parole	penalty.c	/^void do_parole( CHAR_DATA *ch, char *argument )$/;"	f
do_paroxysm	fight.c	/^DECLARE_DO_FUN(do_paroxysm    );$/;"	v
do_paroxysm	fight2.c	/^void do_paroxysm( CHAR_DATA *ch, char *argument )$/;"	f
do_paroxysm	interp.h	/^DECLARE_DO_FUN( do_paroxysm );$/;"	v
do_password	act_info.c	/^void do_password( CHAR_DATA *ch, char *argument )$/;"	f
do_password	interp.h	/^DECLARE_DO_FUN( do_password );$/;"	v
do_path	interp.h	/^DECLARE_DO_FUN( do_path);$/;"	v
do_path	lua_main.c	/^void do_path( CHAR_DATA *ch, char *argument)$/;"	f
do_pcast	interp.h	/^DECLARE_DO_FUN( do_pcast        );$/;"	v
do_pcast	magic.c	/^void do_pcast( CHAR_DATA *ch, char *argument )$/;"	f
do_peace	act_wiz.c	/^void do_peace( CHAR_DATA *ch, char *argument )$/;"	f
do_peace	interp.h	/^DECLARE_DO_FUN( do_peace    );$/;"	v
do_pecho	act_wiz.c	/^void do_pecho( CHAR_DATA *ch, char *argument )$/;"	f
do_pecho	interp.h	/^DECLARE_DO_FUN( do_pecho    );$/;"	v
do_peek	act_info.c	/^void do_peek( CHAR_DATA *ch, char *argument )$/;"	f
do_peek	interp.h	/^DECLARE_DO_FUN( do_peek     );$/;"	v
do_peel	act_move.c	/^void do_peel ( CHAR_DATA *ch, char *argument)$/;"	f
do_peel	interp.h	/^DECLARE_DO_FUN( do_peel         );$/;"	v
do_penlist	interp.h	/^DECLARE_DO_FUN( do_penlist  );$/;"	v
do_penlist	penalty.c	/^void do_penlist( CHAR_DATA *ch, char *argument )$/;"	f
do_percentages	act_info.c	/^void do_percentages( CHAR_DATA *ch, char *argument )$/;"	f
do_percentages	interp.h	/^DECLARE_DO_FUN( do_percentages );$/;"	v
do_perfmon	interp.h	/^DECLARE_DO_FUN( do_perfmon);$/;"	v
do_perfmon	lua_main.c	/^void do_perfmon( CHAR_DATA *ch, char *argument)$/;"	f
do_permban	ban.c	/^void do_permban(CHAR_DATA *ch, char *argument)$/;"	f
do_permban	interp.h	/^DECLARE_DO_FUN( do_permban  );$/;"	v
do_pflag	act_wiz.c	/^void do_pflag( CHAR_DATA *ch, char *argument)$/;"	f
do_pflag	interp.h	/^DECLARE_DO_FUN( do_pflag    );$/;"	v
do_pgrep	act_wiz.c	/^void do_pgrep( CHAR_DATA *ch, char *argument)$/;"	f
do_pgrep	interp.h	/^DECLARE_DO_FUN( do_pgrep);$/;"	v
do_pick	act_move.c	/^void do_pick( CHAR_DATA *ch, char *argument )$/;"	f
do_pick	interp.h	/^DECLARE_DO_FUN( do_pick     );$/;"	v
do_pipe	interp.h	/^DECLARE_DO_FUN( do_pipe     );$/;"	v
do_pipe	pipe.c	/^void do_pipe( CHAR_DATA *ch, char *argument )$/;"	f
do_pkil	interp.h	/^DECLARE_DO_FUN( do_pkil     );$/;"	v
do_pkill	flags.c	/^void do_pkill( CHAR_DATA *ch, char *argument)$/;"	f
do_pkill	interp.h	/^DECLARE_DO_FUN( do_pkill    );$/;"	v
do_playback	interp.h	/^DECLARE_DO_FUN( do_playback );$/;"	v
do_playback	playback.c	/^void do_playback(CHAR_DATA *ch, char * argument)$/;"	f
do_pload	act_wiz.c	/^void do_pload( CHAR_DATA *ch, char *argument )$/;"	f
do_pload	interp.h	/^DECLARE_DO_FUN( do_pload    );$/;"	v
do_pmote	act_comm.c	/^void do_pmote( CHAR_DATA *ch, char *argument )$/;"	f
do_pmote	interp.h	/^DECLARE_DO_FUN( do_pmote    );$/;"	v
do_portal	act_enter.c	/^void do_portal( CHAR_DATA *ch, char *argument )$/;"	f
do_portal	interp.h	/^DECLARE_DO_FUN( do_portal   );$/;"	v
do_pose	act_comm.c	/^void do_pose( CHAR_DATA *ch, char *argument )$/;"	f
do_pose	interp.h	/^DECLARE_DO_FUN( do_pose     );$/;"	v
do_pour	act_obj.c	/^void do_pour (CHAR_DATA *ch, char *argument)$/;"	f
do_pour	interp.h	/^DECLARE_DO_FUN( do_pour     );$/;"	v
do_power_thrust	interp.h	/^DECLARE_DO_FUN( do_power_thrust );$/;"	v
do_practice	interp.h	/^DECLARE_DO_FUN( do_practice );$/;"	v
do_practice	skills.c	/^void do_practice( CHAR_DATA *ch, char *argument )$/;"	f
do_prayer	interp.h	/^DECLARE_DO_FUN( do_prayer   );$/;"	v
do_prayer	religion.c	/^void do_prayer( CHAR_DATA *ch, char *argument )$/;"	f
do_prefi	act_wiz.c	/^void do_prefi (CHAR_DATA *ch, char *argument)$/;"	f
do_prefi	interp.h	/^DECLARE_DO_FUN( do_prefi    );$/;"	v
do_prefix	act_wiz.c	/^void do_prefix (CHAR_DATA *ch, char *argument)$/;"	f
do_prefix	interp.h	/^DECLARE_DO_FUN( do_prefix   );$/;"	v
do_printlist	act_wiz.c	/^void do_printlist(CHAR_DATA *ch, char *argument)$/;"	f
do_printlist	interp.h	/^DECLARE_DO_FUN( do_printlist);$/;"	v
do_prompt	act_info.c	/^void do_prompt(CHAR_DATA *ch, char *argument)$/;"	f
do_prompt	interp.h	/^DECLARE_DO_FUN( do_prompt   );$/;"	v
do_ptitle	act_wiz.c	/^void do_ptitle( CHAR_DATA *ch, char *argument)$/;"	f
do_puncture	fight2.c	/^void do_puncture( CHAR_DATA *ch, char *argument )$/;"	f
do_puncture	interp.h	/^DECLARE_DO_FUN( do_puncture );$/;"	v
do_punish	interp.h	/^DECLARE_DO_FUN( do_punish   );$/;"	v
do_punish	penalty.c	/^void do_punish( CHAR_DATA *ch, char *argument )$/;"	f
do_punload	act_wiz.c	/^void do_punload( CHAR_DATA *ch, char *argument )$/;"	f
do_punload	interp.h	/^DECLARE_DO_FUN( do_punload  );$/;"	v
do_purge	act_wiz.c	/^void do_purge( CHAR_DATA *ch, char *argument )$/;"	f
do_purge	interp.h	/^DECLARE_DO_FUN( do_purge    );$/;"	v
do_put	act_obj.c	/^void do_put( CHAR_DATA *ch, char *argument )$/;"	f
do_put	interp.h	/^DECLARE_DO_FUN( do_put      );$/;"	v
do_qcast	interp.h	/^DECLARE_DO_FUN( do_qcast        );$/;"	v
do_qcast	magic.c	/^void do_qcast( CHAR_DATA *ch, char *argument )$/;"	f
do_qlist	act_wiz.c	/^void do_qlist( CHAR_DATA *ch, char *argument )$/;"	f
do_qlist	interp.h	/^DECLARE_DO_FUN( do_qlist    );$/;"	v
do_qset	act_wiz.c	/^void do_qset( CHAR_DATA *ch, char *argument )$/;"	f
do_qset	interp.h	/^DECLARE_DO_FUN( do_qset     );$/;"	v
do_quaff	act_obj.c	/^void do_quaff( CHAR_DATA *ch, char *argument )$/;"	f
do_quaff	interp.h	/^DECLARE_DO_FUN( do_quaff    );$/;"	v
do_quest	interp.h	/^DECLARE_DO_FUN( do_quest    );$/;"	v
do_quest	quest.c	/^void do_quest(CHAR_DATA *ch, char *argument)$/;"	f
do_question	act_comm.c	/^void do_question( CHAR_DATA *ch, char *argument )$/;"	f
do_question	interp.h	/^DECLARE_DO_FUN( do_question );$/;"	v
do_qui	act_comm.c	/^void do_qui( CHAR_DATA *ch, char *argument )$/;"	f
do_qui	interp.h	/^DECLARE_DO_FUN( do_qui      );$/;"	v
do_quiet	act_comm.c	/^void do_quiet ( CHAR_DATA *ch, char * argument)$/;"	f
do_quiet	interp.h	/^DECLARE_DO_FUN( do_quiet    );$/;"	v
do_quit	act_comm.c	/^DECLARE_DO_FUN(do_quit  );$/;"	v
do_quit	act_comm.c	/^void do_quit( CHAR_DATA *ch, char *argument )$/;"	f
do_quit	act_wiz.c	/^DECLARE_DO_FUN(do_quit      );$/;"	v
do_quit	auth.c	/^DECLARE_DO_FUN(do_quit);$/;"	v
do_quit	interp.h	/^DECLARE_DO_FUN( do_quit     );$/;"	v
do_quit	remort.c	/^DECLARE_DO_FUN( do_quit );$/;"	v
do_quit	update.c	/^DECLARE_DO_FUN(do_quit      );$/;"	v
do_quivering_palm	fight2.c	/^void do_quivering_palm( CHAR_DATA *ch, char *argument, void *vo)$/;"	f
do_quivering_palm	interp.h	/^DECLARE_DO_FUN( do_quivering_palm   );$/;"	v
do_quote	act_comm.c	/^void do_quote( CHAR_DATA *ch, char *argument )$/;"	f
do_quote	interp.h	/^DECLARE_DO_FUN( do_quote    );$/;"	v
do_racelist	interp.h	/^DECLARE_DO_FUN( do_racelist );$/;"	v
do_racelist	stats.c	/^void do_racelist(CHAR_DATA *ch, char *argument)$/;"	f
do_raceskills	interp.h	/^DECLARE_DO_FUN( do_raceskills);$/;"	v
do_raceskills	skills.c	/^void do_raceskills( CHAR_DATA *ch, char *argument )$/;"	f
do_raceskills	stats.c	/^DECLARE_DO_FUN( do_raceskills);$/;"	v
do_rake	fight2.c	/^void do_rake( CHAR_DATA *ch, char *argument )$/;"	f
do_rake	interp.h	/^DECLARE_DO_FUN( do_rake     );$/;"	v
do_rank	clan.c	/^void do_rank( CHAR_DATA *ch, char *argument )$/;"	f
do_rank	interp.h	/^DECLARE_DO_FUN( do_rank     );$/;"	v
do_rdoor	interp.h	/^DECLARE_DO_FUN( do_rdoor        );$/;"	v
do_rdoor	redit-ilab.c	/^void do_rdoor (CHAR_DATA *ch, char *argument)$/;"	f
do_rdrop	interp.h	/^DECLARE_DO_FUN( do_rdrop        );$/;"	v
do_rdrop	redit-ilab.c	/^void do_rdrop (CHAR_DATA *ch, char *argument)$/;"	f
do_read	act_info.c	/^void do_read (CHAR_DATA *ch, char *argument )$/;"	f
do_read	interp.h	/^DECLARE_DO_FUN( do_read     );$/;"	v
do_reboo	act_wiz.c	/^void do_reboo( CHAR_DATA *ch, char *argument )$/;"	f
do_reboo	interp.h	/^DECLARE_DO_FUN( do_reboo    );$/;"	v
do_reboot	act_wiz.c	/^void do_reboot( CHAR_DATA *ch, char *argument )$/;"	f
do_reboot	interp.h	/^DECLARE_DO_FUN( do_reboot   );$/;"	v
do_recall	act_move.c	/^DECLARE_DO_FUN(do_recall    );$/;"	v
do_recall	act_move.c	/^void do_recall( CHAR_DATA *ch, char *argument )$/;"	f
do_recall	fight.c	/^DECLARE_DO_FUN(do_recall    );$/;"	v
do_recall	interp.h	/^DECLARE_DO_FUN( do_recall   );$/;"	v
do_recall	magic.c	/^DECLARE_DO_FUN(do_recall    );$/;"	v
do_recho	act_wiz.c	/^void do_recho( CHAR_DATA *ch, char *argument )$/;"	f
do_recho	interp.h	/^DECLARE_DO_FUN( do_recho    );$/;"	v
do_recite	act_obj.c	/^void do_recite( CHAR_DATA *ch, char *argument )$/;"	f
do_recite	interp.h	/^DECLARE_DO_FUN( do_recite   );$/;"	v
do_recruit	clan.c	/^void do_recruit( CHAR_DATA *ch, char *argument )$/;"	f
do_recruit	interp.h	/^DECLARE_DO_FUN( do_recruit  );$/;"	v
do_red	freeze.c	/^void do_red( CHAR_DATA *ch, char *argument )$/;"	f
do_red	interp.h	/^DECLARE_DO_FUN( do_red      );$/;"	v
do_redit	interp.h	/^DECLARE_DO_FUN( do_redit    );$/;"	v
do_redit	olc.c	/^void do_redit( CHAR_DATA *ch, char *argument )$/;"	f
do_redit	olc.h	/^DECLARE_DO_FUN( do_redit        );$/;"	v
do_reject	clan.c	/^void do_reject( CHAR_DATA *ch, char *argument )$/;"	f
do_reject	interp.h	/^DECLARE_DO_FUN( do_reject   );$/;"	v
do_release	interp.h	/^DECLARE_DO_FUN( do_release  );$/;"	v
do_religion	interp.h	/^DECLARE_DO_FUN( do_religion );$/;"	v
do_religion	religion.c	/^void do_religion( CHAR_DATA *ch, char *argument )$/;"	f
do_religion_set	religion.c	/^void do_religion_set( CHAR_DATA *ch, char *argument )$/;"	f
do_religion_talk	act_comm.c	/^void do_religion_talk( CHAR_DATA *ch, char *argument )$/;"	f
do_religion_talk	interp.h	/^DECLARE_DO_FUN( do_religion_talk );$/;"	v
do_remember	forget.c	/^void do_remember(CHAR_DATA *ch, char *argument)$/;"	f
do_remember	interp.h	/^DECLARE_DO_FUN( do_remember );$/;"	v
do_remort	interp.h	/^DECLARE_DO_FUN( do_remort   );$/;"	v
do_remort	remort.c	/^void do_remort(CHAR_DATA *ch, char *argument)$/;"	f
do_remove	act_obj.c	/^void do_remove( CHAR_DATA *ch, char *argument )$/;"	f
do_remove	interp.h	/^DECLARE_DO_FUN( do_remove   );$/;"	v
do_rent	act_comm.c	/^void do_rent( CHAR_DATA *ch, char *argument )$/;"	f
do_rent	interp.h	/^DECLARE_DO_FUN( do_rent     );$/;"	v
do_replay	act_comm.c	/^void do_replay (CHAR_DATA *ch, char *argument)$/;"	f
do_replay	interp.h	/^DECLARE_DO_FUN( do_replay   );$/;"	v
do_reply	act_comm.c	/^void do_reply( CHAR_DATA *ch, char *argument )$/;"	f
do_reply	interp.h	/^DECLARE_DO_FUN( do_reply    );$/;"	v
do_report	act_info.c	/^void do_report( CHAR_DATA *ch, char *argument )$/;"	f
do_report	interp.h	/^DECLARE_DO_FUN( do_report   );$/;"	v
do_rescue	fight2.c	/^void do_rescue( CHAR_DATA *ch, char *argument )$/;"	f
do_rescue	interp.h	/^DECLARE_DO_FUN( do_rescue   );$/;"	v
do_reserve	act_wiz.c	/^void do_reserve(CHAR_DATA *ch, char *argument)$/;"	f
do_reserve	auth.c	/^DECLARE_DO_FUN(do_reserve);$/;"	v
do_reserve	interp.h	/^DECLARE_DO_FUN( do_reserve  );$/;"	v
do_resets	interp.h	/^DECLARE_DO_FUN( do_resets   );$/;"	v
do_resets	olc.c	/^void do_resets( CHAR_DATA *ch, char *argument )$/;"	f
do_rest	act_move.c	/^void do_rest( CHAR_DATA *ch, char *argument )$/;"	f
do_rest	interp.h	/^DECLARE_DO_FUN( do_rest     );$/;"	v
do_restore	act_wiz.c	/^void do_restore( CHAR_DATA *ch, char *argument )$/;"	f
do_restore	fight.c	/^DECLARE_DO_FUN(do_restore   );$/;"	v
do_restore	interp.h	/^DECLARE_DO_FUN( do_restore  );$/;"	v
do_restore	warfare.c	/^DECLARE_DO_FUN(do_restore);$/;"	v
do_return	act_wiz.c	/^void do_return( CHAR_DATA *ch, char *argument )$/;"	f
do_return	handler.c	/^DECLARE_DO_FUN(do_return    );$/;"	v
do_return	interp.h	/^DECLARE_DO_FUN( do_return   );$/;"	v
do_review	interp.h	/^DECLARE_DO_FUN( do_review   );$/;"	v
do_review	penalty.c	/^void do_review( CHAR_DATA *ch, char *argument )$/;"	f
do_revoke	act_wiz.c	/^DECLARE_DO_FUN(do_revoke    );$/;"	v
do_revoke	grant.c	/^void do_revoke( CHAR_DATA *ch, char *argument )$/;"	f
do_revoke	interp.h	/^DECLARE_DO_FUN( do_revoke   );$/;"	v
do_rewards	interp.h	/^DECLARE_DO_FUN( do_rewards   );$/;"	v
do_rforce	interp.h	/^DECLARE_DO_FUN( do_rforce       );$/;"	v
do_rforce	redit-ilab.c	/^void do_rforce (CHAR_DATA *ch, char* argument)$/;"	f
do_rgive	interp.h	/^DECLARE_DO_FUN( do_rgive        );$/;"	v
do_rgive	redit-ilab.c	/^void do_rgive (CHAR_DATA *ch, char *argument)$/;"	f
do_rkill	interp.h	/^DECLARE_DO_FUN( do_rkill        );$/;"	v
do_rkill	redit-ilab.c	/^void do_rkill (CHAR_DATA *ch, char *argument)$/;"	f
do_rlook	interp.h	/^DECLARE_DO_FUN( do_rlook        );$/;"	v
do_rlook	redit-ilab.c	/^void do_rlook (CHAR_DATA *ch, char *argument)$/;"	f
do_rmob	interp.h	/^DECLARE_DO_FUN( do_rmob         );$/;"	v
do_rmob	redit-ilab.c	/^void do_rmob (CHAR_DATA *ch, char *argument)$/;"	f
do_roleplay	flags.c	/^void do_roleplay( CHAR_DATA *ch, char *argument)$/;"	f
do_roleplay	interp.h	/^DECLARE_DO_FUN( do_roleplay );$/;"	v
do_rolldice	fight2.c	/^void do_rolldice (CHAR_DATA * ch, char * argument)$/;"	f
do_rolldice	interp.h	/^DECLARE_DO_FUN( do_rolldice );$/;"	v
do_root	act_move.c	/^void do_root( CHAR_DATA *ch, char *argument )$/;"	f
do_root	interp.h	/^DECLARE_DO_FUN( do_root     );$/;"	v
do_round_swing	fight2.c	/^void do_round_swing( CHAR_DATA *ch, char *argument )$/;"	f
do_round_swing	interp.h	/^DECLARE_DO_FUN( do_round_swing  );$/;"	v
do_roundhouse	fight.c	/^DECLARE_DO_FUN(do_roundhouse);$/;"	v
do_roundhouse	fight2.c	/^void do_roundhouse( CHAR_DATA *ch, char *argument )$/;"	f
do_roundhouse	interp.h	/^DECLARE_DO_FUN( do_roundhouse   );$/;"	v
do_rpdump	interp.h	/^DECLARE_DO_FUN( do_rpdump   );$/;"	v
do_rpdump	mob_cmds.c	/^void do_rpdump( CHAR_DATA *ch, char *argument )$/;"	f
do_rpedit	interp.h	/^DECLARE_DO_FUN( do_rpedit   );$/;"	v
do_rpedit	olc_rpcode.c	/^void do_rpedit(CHAR_DATA *ch, char *argument)$/;"	f
do_rprun	interp.h	/^DECLARE_DO_FUN( do_rprun);$/;"	v
do_rprun	olc_rpcode.c	/^void do_rprun( CHAR_DATA *ch, char *argument)$/;"	f
do_rput	interp.h	/^DECLARE_DO_FUN( do_rput         );$/;"	v
do_rput	redit-ilab.c	/^void do_rput (CHAR_DATA *ch, char *argument)$/;"	f
do_rrandom	interp.h	/^DECLARE_DO_FUN( do_rrandom      );$/;"	v
do_rrandom	redit-ilab.c	/^void do_rrandom (CHAR_DATA *ch, char *argument)$/;"	f
do_rset	buildutil.c	/^DECLARE_DO_FUN(do_rset      );$/;"	v
do_rset	buildutil.c	/^void do_rset( CHAR_DATA *ch, char *argument )$/;"	f
do_rset	interp.h	/^DECLARE_DO_FUN( do_rset     );$/;"	v
do_rstat	buildutil.c	/^DECLARE_DO_FUN(do_rstat     );$/;"	v
do_rstat	buildutil.c	/^void do_rstat( CHAR_DATA *ch, char *argument )$/;"	f
do_rstat	interp.h	/^DECLARE_DO_FUN( do_rstat    );$/;"	v
do_rules	act_info.c	/^void do_rules(CHAR_DATA *ch, char *argument)$/;"	f
do_rules	interp.h	/^DECLARE_DO_FUN( do_rules    );$/;"	v
do_run	act_move.c	/^void do_run(CHAR_DATA * ch, char *argument)$/;"	f
do_rupture	fight2.c	/^void do_rupture( CHAR_DATA *ch, char *argument )$/;"	f
do_rupture	interp.h	/^DECLARE_DO_FUN( do_rupture  );$/;"	v
do_rustle_grub	interp.h	/^DECLARE_DO_FUN( do_rustle_grub );$/;"	v
do_rustle_grub	ranger.c	/^void do_rustle_grub( CHAR_DATA *ch, char *argument )$/;"	f
do_rvnum	interp.h	/^DECLARE_DO_FUN( do_rvnum    );$/;"	v
do_rvnum	vshift.c	/^void do_rvnum( CHAR_DATA *ch, char *argument )$/;"	f
do_rwear	interp.h	/^DECLARE_DO_FUN( do_rwear        );$/;"	v
do_rwear	redit-ilab.c	/^void do_rwear (CHAR_DATA *ch, char *argument)$/;"	f
do_rwhere	interp.h	/^DECLARE_DO_FUN( do_rwhere       );$/;"	v
do_rwhere	redit-ilab.c	/^void do_rwhere (CHAR_DATA *ch, char *argument)$/;"	f
do_sacrifice	act_obj.c	/^void do_sacrifice( CHAR_DATA *ch, char *argument )$/;"	f
do_sacrifice	fight.c	/^DECLARE_DO_FUN(do_sacrifice );$/;"	v
do_sacrifice	interp.h	/^DECLARE_DO_FUN( do_sacrifice);$/;"	v
do_savantalk	act_comm.c	/^void do_savantalk( CHAR_DATA *ch, char *argument )$/;"	f
do_savantalk	interp.h	/^DECLARE_DO_FUN( do_savantalk);$/;"	v
do_save	act_comm.c	/^void do_save( CHAR_DATA *ch, char *argument )$/;"	f
do_save	interp.h	/^DECLARE_DO_FUN( do_save     );$/;"	v
do_say	act_comm.c	/^void do_say( CHAR_DATA *ch, char *argument )$/;"	f
do_say	act_info.c	/^DECLARE_DO_FUN(do_say);$/;"	v
do_say	act_obj.c	/^DECLARE_DO_FUN(do_say       );$/;"	v
do_say	hunt.c	/^DECLARE_DO_FUN(do_say   );$/;"	v
do_say	interp.h	/^DECLARE_DO_FUN( do_say      );$/;"	v
do_say	quest.c	/^DECLARE_DO_FUN( do_say );$/;"	v
do_say	remort.c	/^DECLARE_DO_FUN( do_say );$/;"	v
do_say	skills.c	/^DECLARE_DO_FUN(do_say       );$/;"	v
do_say	special.c	/^DECLARE_DO_FUN(do_say   );$/;"	v
do_scan	interp.h	/^DECLARE_DO_FUN( do_scan     );$/;"	v
do_scan	magic2.c	/^DECLARE_DO_FUN(do_scan      );$/;"	v
do_scan	scan.c	/^void do_scan(CHAR_DATA *ch, char *argument)$/;"	f
do_score	act_info.c	/^void do_score( CHAR_DATA *ch, char *argument )$/;"	f
do_score	interp.h	/^DECLARE_DO_FUN( do_score    );$/;"	v
do_scout	hunt.c	/^void do_scout( CHAR_DATA *ch, char *argument )$/;"	f
do_scout	interp.h	/^DECLARE_DO_FUN( do_scout    );$/;"	v
do_scribe	interp.h	/^DECLARE_DO_FUN( do_scribe   );$/;"	v
do_scribe	magic.c	/^void do_scribe( CHAR_DATA *ch, char *argument )$/;"	f
do_scriptdump	interp.h	/^DECLARE_DO_FUN( do_scriptdump);$/;"	v
do_scriptdump	lua_main.c	/^void do_scriptdump( CHAR_DATA *ch, char *argument )$/;"	f
do_scroll	act_info.c	/^void do_scroll(CHAR_DATA *ch, char *argument)$/;"	f
do_scroll	interp.h	/^DECLARE_DO_FUN( do_scroll   );$/;"	v
do_second	act_obj.c	/^void do_second (CHAR_DATA *ch, char *argument)$/;"	f
do_second	fight.c	/^DECLARE_DO_FUN(do_second    );$/;"	v
do_second	interp.h	/^DECLARE_DO_FUN( do_second   );$/;"	v
do_sedit	interp.h	/^DECLARE_DO_FUN( do_sedit    );$/;"	v
do_sedit	social-edit.c	/^void do_sedit (CHAR_DATA *ch, char *argument)$/;"	f
do_sell	act_obj.c	/^void do_sell( CHAR_DATA *ch, char *argument )$/;"	f
do_sell	interp.h	/^DECLARE_DO_FUN( do_sell     );$/;"	v
do_semiauto	fight.c	/^DECLARE_DO_FUN(do_semiauto  );$/;"	v
do_semiauto	fight2.c	/^void do_semiauto( CHAR_DATA *ch, char *argument)$/;"	f
do_semiauto	interp.h	/^DECLARE_DO_FUN( do_semiauto);$/;"	v
do_set	buildutil.c	/^void do_set( CHAR_DATA *ch, char *argument )$/;"	f
do_set	interp.h	/^DECLARE_DO_FUN( do_set      );$/;"	v
do_set_snare	act_move.c	/^void do_set_snare ( CHAR_DATA *ch, char *argument)$/;"	f
do_set_snare	interp.h	/^DECLARE_DO_FUN( do_set_snare);$/;"	v
do_setskill	interp.h	/^DECLARE_DO_FUN( do_setskill );$/;"	v
do_setskill	skills.c	/^void do_setskill(CHAR_DATA *ch, char *argument)$/;"	f
do_shelter	interp.h	/^DECLARE_DO_FUN( do_shelter  );$/;"	v
do_shelter	ranger.c	/^void do_shelter( CHAR_DATA *ch ) $/;"	f
do_shield_bash	fight.c	/^DECLARE_DO_FUN(do_shield_bash);$/;"	v
do_shield_bash	fight2.c	/^void do_shield_bash( CHAR_DATA *ch, char *argument )$/;"	f
do_shield_bash	interp.h	/^DECLARE_DO_FUN( do_shield_bash  );$/;"	v
do_shoot_lock	act_move.c	/^void do_shoot_lock( CHAR_DATA *ch, char *argument )$/;"	f
do_shoot_lock	interp.h	/^DECLARE_DO_FUN( do_shoot_lock);$/;"	v
do_shout	act_comm.c	/^void do_shout( CHAR_DATA *ch, char *argument )$/;"	f
do_shout	interp.h	/^DECLARE_DO_FUN( do_shout    );$/;"	v
do_show	act_info.c	/^void do_show(CHAR_DATA *ch, char *argument)$/;"	f
do_show	interp.h	/^DECLARE_DO_FUN( do_show     );$/;"	v
do_showrace	interp.h	/^DECLARE_DO_FUN( do_showrace );$/;"	v
do_showrace	stats.c	/^void do_showrace(CHAR_DATA *ch, char *argument)$/;"	f
do_showskill	interp.h	/^DECLARE_DO_FUN( do_showskill);$/;"	v
do_showskill	skills.c	/^void do_showskill(CHAR_DATA *ch,char *argument)$/;"	f
do_shutdow	act_wiz.c	/^void do_shutdow( CHAR_DATA *ch, char *argument )$/;"	f
do_shutdow	interp.h	/^DECLARE_DO_FUN( do_shutdow  );$/;"	v
do_shutdown	act_wiz.c	/^void do_shutdown( CHAR_DATA *ch, char *argument )$/;"	f
do_shutdown	interp.h	/^DECLARE_DO_FUN( do_shutdown );$/;"	v
do_sing	interp.h	/^DECLARE_DO_FUN( do_sing     );$/;"	v
do_sire	act_obj.c	/^void do_sire( CHAR_DATA *ch, char *argument )$/;"	f
do_sire	interp.h	/^DECLARE_DO_FUN( do_sire     );$/;"	v
do_sit	act_move.c	/^void do_sit (CHAR_DATA *ch, char *argument )$/;"	f
do_sit	interp.h	/^DECLARE_DO_FUN( do_sit      );$/;"	v
do_skill	interp.h	/^DECLARE_DO_FUN( do_skill    );$/;"	v
do_skill	skills.c	/^void do_skill( CHAR_DATA *ch, char *argument )$/;"	f
do_skills	comm.c	/^DECLARE_DO_FUN(do_skills    );$/;"	v
do_skills	interp.h	/^DECLARE_DO_FUN( do_skills   );$/;"	v
do_skills	nanny.c	/^DECLARE_DO_FUN(do_skills    );$/;"	v
do_skills	skills.c	/^void do_skills(CHAR_DATA *ch, char *argument)$/;"	f
do_sla	act_wiz.c	/^void do_sla( CHAR_DATA *ch, char *argument )$/;"	f
do_sla	interp.h	/^DECLARE_DO_FUN( do_sla      );$/;"	v
do_slash_throat	fight2.c	/^void do_slash_throat( CHAR_DATA *ch, char *argument )$/;"	f
do_slash_throat	interp.h	/^DECLARE_DO_FUN( do_slash_throat );$/;"	v
do_slay	act_wiz.c	/^void do_slay( CHAR_DATA *ch, char *argument )$/;"	f
do_slay	interp.h	/^DECLARE_DO_FUN( do_slay     );$/;"	v
do_sleep	act_move.c	/^void do_sleep( CHAR_DATA *ch, char *argument )$/;"	f
do_sleep	interp.h	/^DECLARE_DO_FUN( do_sleep    );$/;"	v
do_slookup	buildutil.c	/^DECLARE_DO_FUN(do_slookup   );$/;"	v
do_slookup	skills.c	/^void do_slookup( CHAR_DATA *ch, char *argument )$/;"	f
do_smite	fight2.c	/^void do_smite( CHAR_DATA *ch, char *argument )$/;"	f
do_smite	interp.h	/^DECLARE_DO_FUN( do_smite    );$/;"	v
do_smith	interp.h	/^DECLARE_DO_FUN( do_smith);$/;"	v
do_smith	smith.c	/^DECLARE_DO_FUN(do_smith);$/;"	v
do_smith	smith.c	/^void do_smith( CHAR_DATA *ch, char *argument )$/;"	f
do_smoke	act_obj.c	/^void do_smoke( CHAR_DATA *ch, char *argument )$/;"	f
do_smoke	interp.h	/^DECLARE_DO_FUN( do_smoke	);$/;"	v
do_smote	act_wiz.c	/^void do_smote(CHAR_DATA *ch, char *argument )$/;"	f
do_smote	interp.h	/^DECLARE_DO_FUN( do_smote    );$/;"	v
do_sneak	act_move.c	/^void do_sneak( CHAR_DATA *ch, char *argument )$/;"	f
do_sneak	interp.h	/^DECLARE_DO_FUN( do_sneak    );$/;"	v
do_snipe	fight.c	/^DECLARE_DO_FUN(do_snipe     );$/;"	v
do_snipe	fight2.c	/^void do_snipe( CHAR_DATA *ch, char *argument )$/;"	f
do_snipe	interp.h	/^DECLARE_DO_FUN( do_snipe  );$/;"	v
do_snoop	act_wiz.c	/^void do_snoop( CHAR_DATA *ch, char *argument )$/;"	f
do_snoop	interp.h	/^DECLARE_DO_FUN( do_snoop    );$/;"	v
do_social	act_info.c	/^void do_social(CHAR_DATA *ch, char *argument)$/;"	f
do_social	interp.h	/^DECLARE_DO_FUN( do_social   );$/;"	v
do_socials	act_info.c	/^void do_socials(CHAR_DATA *ch, char *argument)$/;"	f
do_socials	interp.h	/^DECLARE_DO_FUN( do_socials  );$/;"	v
do_south	act_move.c	/^void do_south( CHAR_DATA *ch, char *argument )$/;"	f
do_south	interp.h	/^DECLARE_DO_FUN( do_south    );$/;"	v
do_southeast	act_move.c	/^void do_southeast( CHAR_DATA *ch, char *argument )$/;"	f
do_southeast	interp.h	/^DECLARE_DO_FUN( do_southeast);$/;"	v
do_southwest	act_move.c	/^void do_southwest( CHAR_DATA *ch, char *argument )$/;"	f
do_southwest	interp.h	/^DECLARE_DO_FUN( do_southwest);$/;"	v
do_spells	interp.h	/^DECLARE_DO_FUN( do_spells   );$/;"	v
do_spells	skills.c	/^void do_spells(CHAR_DATA *ch, char *argument)$/;"	f
do_spellup	healer.c	/^void do_spellup(CHAR_DATA *ch, char *argument)$/;"	f
do_spellup	interp.h	/^DECLARE_DO_FUN( do_spellup  );$/;"	v
do_spit	fight.c	/^DECLARE_DO_FUN(do_spit      );$/;"	v
do_spit	fight2.c	/^void do_spit( CHAR_DATA *ch, char *argument )$/;"	f
do_spit	interp.h	/^DECLARE_DO_FUN( do_spit         );$/;"	v
do_split	act_comm.c	/^void do_split( CHAR_DATA *ch, char *argument )$/;"	f
do_split	act_obj.c	/^DECLARE_DO_FUN(do_split     );$/;"	v
do_split	interp.h	/^DECLARE_DO_FUN( do_split    );$/;"	v
do_sset	buildutil.c	/^DECLARE_DO_FUN(do_sset      );$/;"	v
do_sset	buildutil.c	/^void do_sset( CHAR_DATA *ch, char *argument )$/;"	f
do_sset	interp.h	/^DECLARE_DO_FUN( do_sset     );$/;"	v
do_stalk	hunt.c	/^void do_stalk( CHAR_DATA *ch, char *argument )$/;"	f
do_stalk	interp.h	/^DECLARE_DO_FUN( do_stalk    );$/;"	v
do_stance	fight.c	/^DECLARE_DO_FUN(do_stance    );$/;"	v
do_stance	fight.c	/^void do_stance (CHAR_DATA *ch, char *argument)$/;"	f
do_stance	interp.h	/^DECLARE_DO_FUN( do_stance   );$/;"	v
do_stance_list	act_info.c	/^void do_stance_list( CHAR_DATA *ch, char *argument )$/;"	f
do_stance_list	interp.h	/^DECLARE_DO_FUN( do_stance_list );$/;"	v
do_stand	act_enter.c	/^DECLARE_DO_FUN(do_stand     );$/;"	v
do_stand	act_move.c	/^DECLARE_DO_FUN(do_stand     );$/;"	v
do_stand	act_move.c	/^void do_stand( CHAR_DATA *ch, char *argument )$/;"	f
do_stand	act_wiz.c	/^DECLARE_DO_FUN(do_stand     );$/;"	v
do_stand	interp.h	/^DECLARE_DO_FUN( do_stand    );$/;"	v
do_stare	interp.h	/^DECLARE_DO_FUN( do_stare);$/;"	v
do_stare	scan.c	/^void do_stare(CHAR_DATA *ch)$/;"	f
do_startwar	interp.h	/^DECLARE_DO_FUN( do_startwar     );$/;"	v
do_startwar	quest.c	/^DECLARE_DO_FUN( do_startwar );$/;"	v
do_startwar	warfare.c	/^void do_startwar( CHAR_DATA *ch, char *argument )$/;"	f
do_stat	buildutil.c	/^void do_stat ( CHAR_DATA *ch, char *argument )$/;"	f
do_stat	interp.h	/^DECLARE_DO_FUN( do_stat     );$/;"	v
do_stats	interp.h	/^DECLARE_DO_FUN( do_stats    );$/;"	v
do_stats	stats.c	/^void do_stats( CHAR_DATA *ch, char *argument )$/;"	f
do_steal	act_obj.c	/^void do_steal( CHAR_DATA *ch, char *argument )$/;"	f
do_steal	interp.h	/^DECLARE_DO_FUN( do_steal    );$/;"	v
do_stopwar	interp.h	/^DECLARE_DO_FUN( do_stopwar      );$/;"	v
do_stopwar	warfare.c	/^void do_stopwar( CHAR_DATA *ch, char *argument )$/;"	f
do_story	act_info.c	/^void do_story(CHAR_DATA *ch, char *argument)$/;"	f
do_story	interp.h	/^DECLARE_DO_FUN( do_story    );$/;"	v
do_strafe	fight2.c	/^void do_strafe( CHAR_DATA *ch, char *argument )$/;"	f
do_strafe	interp.h	/^DECLARE_DO_FUN( do_strafe   );$/;"	v
do_string	act_wiz.c	/^void do_string( CHAR_DATA *ch, char *argument )$/;"	f
do_string	interp.h	/^DECLARE_DO_FUN( do_string   );$/;"	v
do_supplies	crafting.c	/^void do_supplies( CHAR_DATA *ch, char *argument )$/;"	f
do_supplies	interp.h	/^DECLARE_DO_FUN( do_supplies );$/;"	v
do_surrender	fight2.c	/^void do_surrender( CHAR_DATA *ch, char *argument )$/;"	f
do_surrender	interp.h	/^DECLARE_DO_FUN( do_surrender);$/;"	v
do_survey	act_info.c	/^void do_survey( CHAR_DATA *ch, char *argument )$/;"	f
do_survey	interp.h	/^DECLARE_DO_FUN( do_survey   );$/;"	v
do_switch	act_wiz.c	/^void do_switch( CHAR_DATA *ch, char *argument )$/;"	f
do_switch	interp.h	/^DECLARE_DO_FUN( do_switch   );$/;"	v
do_tables	act_wiz.c	/^void do_tables( CHAR_DATA *ch, const char *argument)$/;"	f
do_tables	interp.h	/^DECLARE_DO_FUN( do_tables);$/;"	v
do_tag	freeze.c	/^void do_tag( CHAR_DATA *ch, char *argument )$/;"	f
do_tag	interp.h	/^DECLARE_DO_FUN( do_tag      );$/;"	v
do_tame	interp.h	/^DECLARE_DO_FUN( do_tame     );$/;"	v
do_tame	ranger.c	/^void do_tame( CHAR_DATA *ch, char *argument )$/;"	f
do_tattoo	interp.h	/^DECLARE_DO_FUN( do_tattoo   );$/;"	v
do_tattoo	tattoo.c	/^void do_tattoo( CHAR_DATA *ch, char *argument )$/;"	f
do_taxidermy	interp.h	/^DECLARE_DO_FUN( do_taxidermy    );$/;"	v
do_taxidermy	ranger.c	/^void do_taxidermy(CHAR_DATA *ch, char *argument)$/;"	f
do_tell	act_comm.c	/^void do_tell( CHAR_DATA *ch, char *argument )$/;"	f
do_tell	interp.h	/^DECLARE_DO_FUN( do_tell     );$/;"	v
do_time	act_info.c	/^void do_time( CHAR_DATA *ch, char *argument )$/;"	f
do_time	interp.h	/^DECLARE_DO_FUN( do_time     );$/;"	v
do_title	act_info.c	/^void do_title( CHAR_DATA *ch, char *argument )$/;"	f
do_title	interp.h	/^DECLARE_DO_FUN( do_title    );$/;"	v
do_toggle	act_info.c	/^void do_toggle( CHAR_DATA *ch, char *argument )$/;"	f
do_toggle	interp.h	/^DECLARE_DO_FUN( do_toggle   );$/;"	v
do_torch	interp.h	/^DECLARE_DO_FUN( do_torch    );$/;"	v
do_torch	ranger.c	/^void do_torch(CHAR_DATA *ch)$/;"	f
do_train	interp.h	/^DECLARE_DO_FUN( do_train    );$/;"	v
do_train	stats.c	/^void do_train( CHAR_DATA *ch, char *argument )$/;"	f
do_transfer	act_wiz.c	/^void do_transfer( CHAR_DATA *ch, char *argument )$/;"	f
do_transfer	freeze.c	/^DECLARE_DO_FUN( do_transfer );$/;"	v
do_transfer	interp.h	/^DECLARE_DO_FUN( do_transfer );$/;"	v
do_treat_weapon	interp.h	/^DECLARE_DO_FUN( do_treat_weapon );$/;"	v
do_treat_weapon	ranger.c	/^void do_treat_weapon(CHAR_DATA *ch, char *argument)$/;"	f
do_trip	fight.c	/^DECLARE_DO_FUN(do_trip      );$/;"	v
do_trip	fight2.c	/^void do_trip( CHAR_DATA *ch, char *argument )$/;"	f
do_trip	interp.h	/^DECLARE_DO_FUN( do_trip     );$/;"	v
do_trust	act_wiz.c	/^void do_trust( CHAR_DATA *ch, char *argument )$/;"	f
do_trust	interp.h	/^DECLARE_DO_FUN( do_trust    );$/;"	v
do_try	act_comm.c	/^void do_try ( CHAR_DATA *ch, char *argument )$/;"	f
do_try	interp.h	/^DECLARE_DO_FUN( do_try      );$/;"	v
do_tumble	fight.c	/^DECLARE_DO_FUN(do_tumble    );$/;"	v
do_tumble	fight2.c	/^void do_tumble( CHAR_DATA *ch, char *argument)$/;"	f
do_tumble	interp.h	/^DECLARE_DO_FUN( do_tumble   );$/;"	v
do_turn_in	act_comm.c	/^void do_turn_in ( CHAR_DATA *ch, char *argument )$/;"	f
do_turn_in	interp.h	/^DECLARE_DO_FUN( do_turn_in  );$/;"	v
do_typo	act_comm.c	/^void do_typo( CHAR_DATA *ch, char *argument )$/;"	f
do_typo	interp.h	/^DECLARE_DO_FUN( do_typo     );$/;"	v
do_unalias	alias.c	/^void do_unalias(CHAR_DATA *ch, char *argument)$/;"	f
do_unalias	interp.h	/^DECLARE_DO_FUN( do_unalias  );$/;"	v
do_unjam	act_move.c	/^void do_unjam(CHAR_DATA *ch, char *argument)$/;"	f
do_unjam	interp.h	/^DECLARE_DO_FUN( do_unjam);$/;"	v
do_unlock	act_move.c	/^void do_unlock( CHAR_DATA *ch, char *argument )$/;"	f
do_unlock	interp.h	/^DECLARE_DO_FUN( do_unlock   );$/;"	v
do_unread	comm.c	/^DECLARE_DO_FUN(do_unread    );$/;"	v
do_unread	nanny.c	/^DECLARE_DO_FUN(do_unread    );$/;"	v
do_up	act_move.c	/^void do_up( CHAR_DATA *ch, char *argument )$/;"	f
do_up	interp.h	/^DECLARE_DO_FUN( do_up       );$/;"	v
do_uppercut	fight.c	/^DECLARE_DO_FUN(do_uppercut  );$/;"	v
do_uppercut	fight2.c	/^void do_uppercut(CHAR_DATA *ch, char *argument )$/;"	f
do_uppercut	interp.h	/^DECLARE_DO_FUN( do_uppercut );$/;"	v
do_value	act_obj.c	/^void do_value( CHAR_DATA *ch, char *argument )$/;"	f
do_value	interp.h	/^DECLARE_DO_FUN( do_value    );$/;"	v
do_visible	act_move.c	/^void do_visible( CHAR_DATA *ch, char *argument )$/;"	f
do_visible	interp.h	/^DECLARE_DO_FUN( do_visible  );$/;"	v
do_visible	remort.c	/^DECLARE_DO_FUN( do_visible );$/;"	v
do_vlist	buildutil.c	/^void do_vlist (CHAR_DATA *ch, char *argument)$/;"	f
do_vlist	interp.h	/^DECLARE_DO_FUN( do_vlist    );$/;"	v
do_vnum	buildutil.c	/^void do_vnum(CHAR_DATA *ch, char *argument)$/;"	f
do_vnum	interp.h	/^DECLARE_DO_FUN( do_vnum     );$/;"	v
do_wake	act_move.c	/^void do_wake( CHAR_DATA *ch, char *argument )$/;"	f
do_wake	act_obj.c	/^DECLARE_DO_FUN(do_wake      );$/;"	v
do_wake	interp.h	/^DECLARE_DO_FUN( do_wake     );$/;"	v
do_war_cry	fight.c	/^DECLARE_DO_FUN(do_war_cry   ); $/;"	v
do_war_cry	fight2.c	/^void do_war_cry( CHAR_DATA *ch, char *argument)$/;"	f
do_war_cry	interp.h	/^DECLARE_DO_FUN( do_war_cry  );$/;"	v
do_warsit	interp.h	/^DECLARE_DO_FUN( do_warsit       );$/;"	v
do_warsit	warfare.c	/^void do_warsit( CHAR_DATA *ch, char *argument )$/;"	f
do_warstatus	interp.h	/^DECLARE_DO_FUN( do_warstatus    );$/;"	v
do_warstatus	warfare.c	/^void do_warstatus( CHAR_DATA *ch, char *argument )$/;"	f
do_wear	act_obj.c	/^void do_wear( CHAR_DATA *ch, char *argument )$/;"	f
do_wear	interp.h	/^DECLARE_DO_FUN( do_wear     );$/;"	v
do_weather	act_info.c	/^void do_weather( CHAR_DATA *ch, char *argument )$/;"	f
do_weather	interp.h	/^DECLARE_DO_FUN( do_weather  );$/;"	v
do_west	act_move.c	/^void do_west( CHAR_DATA *ch, char *argument )$/;"	f
do_west	interp.h	/^DECLARE_DO_FUN( do_west     );$/;"	v
do_where	act_info.c	/^void do_where( CHAR_DATA *ch, char *argument )$/;"	f
do_where	interp.h	/^DECLARE_DO_FUN( do_where    );$/;"	v
do_where	magic2.c	/^DECLARE_DO_FUN(do_where );$/;"	v
do_who	act_info.c	/^void do_who( CHAR_DATA *ch, char *argument )$/;"	f
do_who	interp.h	/^DECLARE_DO_FUN( do_who      );$/;"	v
do_whois	act_info.c	/^void do_whois (CHAR_DATA *ch, char *argument)$/;"	f
do_whois	interp.h	/^DECLARE_DO_FUN( do_whois    );$/;"	v
do_wimpy	act_info.c	/^void do_wimpy( CHAR_DATA *ch, char *argument )$/;"	f
do_wimpy	interp.h	/^DECLARE_DO_FUN( do_wimpy    );$/;"	v
do_wish	interp.h	/^DECLARE_DO_FUN( do_wish     );$/;"	v
do_wish	magic.c	/^void do_wish( CHAR_DATA *ch, char *argument )$/;"	f
do_withdraw	act_obj.c	/^void do_withdraw ( CHAR_DATA *ch, char *argument )$/;"	f
do_withdraw	interp.h	/^DECLARE_DO_FUN( do_withdraw );$/;"	v
do_wizhelp	interp.h	/^DECLARE_DO_FUN( do_wizhelp  );$/;"	v
do_wizhelp	lua_main.c	/^void do_wizhelp( CHAR_DATA *ch, char *argument )$/;"	f
do_wizlist	interp.h	/^DECLARE_DO_FUN( do_wizlist  );$/;"	v
do_wizlist	wizlist.c	/^void do_wizlist(CHAR_DATA *ch, char *argument)$/;"	f
do_wizlock	act_wiz.c	/^void do_wizlock( CHAR_DATA *ch, char *argument )$/;"	f
do_wizlock	interp.h	/^DECLARE_DO_FUN( do_wizlock  );$/;"	v
do_wiznet	act_wiz.c	/^void do_wiznet( CHAR_DATA *ch, char *argument )$/;"	f
do_wiznet	interp.h	/^DECLARE_DO_FUN( do_wiznet   );$/;"	v
do_worth	act_info.c	/^DECLARE_DO_FUN(do_worth);$/;"	v
do_worth	act_info.c	/^void do_worth( CHAR_DATA *ch, char *argument )$/;"	f
do_worth	interp.h	/^DECLARE_DO_FUN( do_worth    );$/;"	v
do_yell	act_comm.c	/^void do_yell( CHAR_DATA *ch, char *argument )$/;"	f
do_yell	act_obj.c	/^DECLARE_DO_FUN(do_yell      );$/;"	v
do_yell	fight.c	/^DECLARE_DO_FUN(do_yell      );$/;"	v
do_yell	interp.h	/^DECLARE_DO_FUN( do_yell     );$/;"	v
do_yell	special.c	/^DECLARE_DO_FUN(do_yell      );$/;"	v
do_zap	act_obj.c	/^void do_zap( CHAR_DATA *ch, char *argument )$/;"	f
do_zap	interp.h	/^DECLARE_DO_FUN( do_zap      );$/;"	v
do_zecho	act_wiz.c	/^void do_zecho(CHAR_DATA *ch, char *argument)$/;"	f
do_zecho	interp.h	/^DECLARE_DO_FUN( do_zecho    );$/;"	v
dodge_chance	fight.c	/^int dodge_chance( CHAR_DATA *ch, CHAR_DATA *opp, bool improve )$/;"	f
donation	merc.h	/^    sh_int   donation;          \/* Clan donation room *\/$/;"	m	struct:clan_data
donothing	hunt.c	/^void donothing()$/;"	f
door_reset_desc	redit-ilab.c	/^static char* door_reset_desc (int state)$/;"	f	file:
door_resets	tables.c	/^const struct flag_type door_resets[] =$/;"	v	typeref:struct:flag_type
dotable_table	act_wiz.c	/^} dotable_table[]=$/;"	v	typeref:struct:__anon1
dragon	special.c	/^bool dragon( CHAR_DATA *ch, char *spell_name )$/;"	f
drop_align	update.c	/^void drop_align( CHAR_DATA *ch )$/;"	f
drop_eq	handler.c	/^void drop_eq( CHAR_DATA *ch )$/;"	f
dual_weapon_sn	fight.c	/^int dual_weapon_sn( CHAR_DATA *ch )$/;"	f
dual_wield_skill	fight.c	/^int dual_wield_skill( CHAR_DATA *ch, bool improve )$/;"	f
dumb_effect	effects.c	/^void dumb_effect(void *vo, int level, int dam, int target)$/;"	f
dump_prog	lua_main.c	/^void dump_prog( CHAR_DATA *ch, const char *prog, bool numberlines)$/;"	f
dump_str_dup	db.c	/^void dump_str_dup()$/;"	f
durability	merc.h	/^	sh_int      durability;$/;"	m	struct:obj_index_data
durability	merc.h	/^	sh_int  durability;$/;"	m	struct:obj_data
duration	merc.h	/^	sh_int  duration;       \/* Duration of affects *\/$/;"	m	struct:skill_type
duration	merc.h	/^    int                 duration;$/;"	m	struct:grant_data
duration	merc.h	/^    long duration;                \/* End time for penalty (ch->played) *\/$/;"	m	struct:penalty_data
duration	merc.h	/^    sh_int      duration;$/;"	m	struct:affect_data
eMSDP_AC	protocol.h	/^   eMSDP_AC, $/;"	e	enum:__anon9
eMSDP_AFFECTS	protocol.h	/^   eMSDP_AFFECTS, $/;"	e	enum:__anon9
eMSDP_ALIGNMENT	protocol.h	/^   eMSDP_ALIGNMENT, $/;"	e	enum:__anon9
eMSDP_ANSI_COLORS	protocol.h	/^   eMSDP_ANSI_COLORS, $/;"	e	enum:__anon9
eMSDP_AREA_NAME	protocol.h	/^   eMSDP_AREA_NAME, $/;"	e	enum:__anon9
eMSDP_BUTTON_1	protocol.h	/^   eMSDP_BUTTON_1, $/;"	e	enum:__anon9
eMSDP_BUTTON_2	protocol.h	/^   eMSDP_BUTTON_2, $/;"	e	enum:__anon9
eMSDP_BUTTON_3	protocol.h	/^   eMSDP_BUTTON_3, $/;"	e	enum:__anon9
eMSDP_BUTTON_4	protocol.h	/^   eMSDP_BUTTON_4, $/;"	e	enum:__anon9
eMSDP_BUTTON_5	protocol.h	/^   eMSDP_BUTTON_5, $/;"	e	enum:__anon9
eMSDP_CHARACTER_NAME	protocol.h	/^   eMSDP_CHARACTER_NAME, $/;"	e	enum:__anon9
eMSDP_CLASS	protocol.h	/^   eMSDP_CLASS, $/;"	e	enum:__anon9
eMSDP_CLIENT_ID	protocol.h	/^   eMSDP_CLIENT_ID, $/;"	e	enum:__anon9
eMSDP_CLIENT_VERSION	protocol.h	/^   eMSDP_CLIENT_VERSION, $/;"	e	enum:__anon9
eMSDP_CON	protocol.h	/^   eMSDP_CON, $/;"	e	enum:__anon9
eMSDP_CON_PERM	protocol.h	/^   eMSDP_CON_PERM, $/;"	e	enum:__anon9
eMSDP_DAMROLL	protocol.h	/^   eMSDP_DAMROLL, $/;"	e	enum:__anon9
eMSDP_DEX	protocol.h	/^   eMSDP_DEX, $/;"	e	enum:__anon9
eMSDP_DEX_PERM	protocol.h	/^   eMSDP_DEX_PERM, $/;"	e	enum:__anon9
eMSDP_EXPERIENCE	protocol.h	/^   eMSDP_EXPERIENCE, $/;"	e	enum:__anon9
eMSDP_EXPERIENCE_MAX	protocol.h	/^   eMSDP_EXPERIENCE_MAX, $/;"	e	enum:__anon9
eMSDP_EXPERIENCE_TNL	protocol.h	/^   eMSDP_EXPERIENCE_TNL, $/;"	e	enum:__anon9
eMSDP_GAUGE_1	protocol.h	/^   eMSDP_GAUGE_1, $/;"	e	enum:__anon9
eMSDP_GAUGE_2	protocol.h	/^   eMSDP_GAUGE_2, $/;"	e	enum:__anon9
eMSDP_GAUGE_3	protocol.h	/^   eMSDP_GAUGE_3, $/;"	e	enum:__anon9
eMSDP_GAUGE_4	protocol.h	/^   eMSDP_GAUGE_4, $/;"	e	enum:__anon9
eMSDP_GAUGE_5	protocol.h	/^   eMSDP_GAUGE_5, $/;"	e	enum:__anon9
eMSDP_HEALTH	protocol.h	/^   eMSDP_HEALTH, $/;"	e	enum:__anon9
eMSDP_HEALTH_MAX	protocol.h	/^   eMSDP_HEALTH_MAX, $/;"	e	enum:__anon9
eMSDP_HITROLL	protocol.h	/^   eMSDP_HITROLL, $/;"	e	enum:__anon9
eMSDP_INT	protocol.h	/^   eMSDP_INT, $/;"	e	enum:__anon9
eMSDP_INT_PERM	protocol.h	/^   eMSDP_INT_PERM, $/;"	e	enum:__anon9
eMSDP_LEVEL	protocol.h	/^   eMSDP_LEVEL, $/;"	e	enum:__anon9
eMSDP_MANA	protocol.h	/^   eMSDP_MANA, $/;"	e	enum:__anon9
eMSDP_MANA_MAX	protocol.h	/^   eMSDP_MANA_MAX, $/;"	e	enum:__anon9
eMSDP_MAX	protocol.h	/^   eMSDP_MAX                   \/* This must always be last *\/$/;"	e	enum:__anon9
eMSDP_MONEY	protocol.h	/^   eMSDP_MONEY, $/;"	e	enum:__anon9
eMSDP_MOVEMENT	protocol.h	/^   eMSDP_MOVEMENT, $/;"	e	enum:__anon9
eMSDP_MOVEMENT_MAX	protocol.h	/^   eMSDP_MOVEMENT_MAX, $/;"	e	enum:__anon9
eMSDP_MXP	protocol.h	/^   eMSDP_MXP, $/;"	e	enum:__anon9
eMSDP_NONE	protocol.h	/^   eMSDP_NONE = -1,            \/* This must always be first. *\/$/;"	e	enum:__anon9
eMSDP_OPPONENT_HEALTH	protocol.h	/^   eMSDP_OPPONENT_HEALTH, $/;"	e	enum:__anon9
eMSDP_OPPONENT_HEALTH_MAX	protocol.h	/^   eMSDP_OPPONENT_HEALTH_MAX, $/;"	e	enum:__anon9
eMSDP_OPPONENT_LEVEL	protocol.h	/^   eMSDP_OPPONENT_LEVEL, $/;"	e	enum:__anon9
eMSDP_OPPONENT_NAME	protocol.h	/^   eMSDP_OPPONENT_NAME, $/;"	e	enum:__anon9
eMSDP_PLUGIN_ID	protocol.h	/^   eMSDP_PLUGIN_ID, $/;"	e	enum:__anon9
eMSDP_PRACTICE	protocol.h	/^   eMSDP_PRACTICE, $/;"	e	enum:__anon9
eMSDP_RACE	protocol.h	/^   eMSDP_RACE, $/;"	e	enum:__anon9
eMSDP_ROOM_EXITS	protocol.h	/^   eMSDP_ROOM_EXITS, $/;"	e	enum:__anon9
eMSDP_ROOM_NAME	protocol.h	/^   eMSDP_ROOM_NAME, $/;"	e	enum:__anon9
eMSDP_ROOM_VNUM	protocol.h	/^   eMSDP_ROOM_VNUM, $/;"	e	enum:__anon9
eMSDP_SERVER_ID	protocol.h	/^   eMSDP_SERVER_ID, $/;"	e	enum:__anon9
eMSDP_SERVER_TIME	protocol.h	/^   eMSDP_SERVER_TIME, $/;"	e	enum:__anon9
eMSDP_SNIPPET_VERSION	protocol.h	/^   eMSDP_SNIPPET_VERSION, $/;"	e	enum:__anon9
eMSDP_SOUND	protocol.h	/^   eMSDP_SOUND, $/;"	e	enum:__anon9
eMSDP_STR	protocol.h	/^   eMSDP_STR, $/;"	e	enum:__anon9
eMSDP_STR_PERM	protocol.h	/^   eMSDP_STR_PERM, $/;"	e	enum:__anon9
eMSDP_UTF_8	protocol.h	/^   eMSDP_UTF_8, $/;"	e	enum:__anon9
eMSDP_WIMPY	protocol.h	/^   eMSDP_WIMPY, $/;"	e	enum:__anon9
eMSDP_WIS	protocol.h	/^   eMSDP_WIS, $/;"	e	enum:__anon9
eMSDP_WIS_PERM	protocol.h	/^   eMSDP_WIS_PERM, $/;"	e	enum:__anon9
eMSDP_WORLD_TIME	protocol.h	/^   eMSDP_WORLD_TIME, $/;"	e	enum:__anon9
eMSDP_XTERM_256_COLORS	protocol.h	/^   eMSDP_XTERM_256_COLORS, $/;"	e	enum:__anon9
eNEGOTIATED_ATCP	protocol.h	/^   eNEGOTIATED_ATCP, $/;"	e	enum:__anon7
eNEGOTIATED_CHARSET	protocol.h	/^   eNEGOTIATED_CHARSET, $/;"	e	enum:__anon7
eNEGOTIATED_ECHO	protocol.h	/^   eNEGOTIATED_ECHO, $/;"	e	enum:__anon7
eNEGOTIATED_MAX	protocol.h	/^   eNEGOTIATED_MAX             \/* This must always be last *\/$/;"	e	enum:__anon7
eNEGOTIATED_MCCP	protocol.h	/^   eNEGOTIATED_MCCP, $/;"	e	enum:__anon7
eNEGOTIATED_MSDP	protocol.h	/^   eNEGOTIATED_MSDP, $/;"	e	enum:__anon7
eNEGOTIATED_MSP	protocol.h	/^   eNEGOTIATED_MSP, $/;"	e	enum:__anon7
eNEGOTIATED_MSSP	protocol.h	/^   eNEGOTIATED_MSSP, $/;"	e	enum:__anon7
eNEGOTIATED_MXP	protocol.h	/^   eNEGOTIATED_MXP, $/;"	e	enum:__anon7
eNEGOTIATED_MXP2	protocol.h	/^   eNEGOTIATED_MXP2, $/;"	e	enum:__anon7
eNEGOTIATED_NAWS	protocol.h	/^   eNEGOTIATED_NAWS, $/;"	e	enum:__anon7
eNEGOTIATED_TTYPE	protocol.h	/^   eNEGOTIATED_TTYPE, $/;"	e	enum:__anon7
eNO	protocol.h	/^   eNO, $/;"	e	enum:__anon8
eSOMETIMES	protocol.h	/^   eSOMETIMES, $/;"	e	enum:__anon8
eUNKNOWN	protocol.h	/^   eUNKNOWN, $/;"	e	enum:__anon8
eYES	protocol.h	/^   eYES$/;"	e	enum:__anon8
earned	tables.h	/^    int earned;$/;"	m	struct:pkgrade_type
echo_off_str	comm.c	/^const   char    echo_off_str    [] = { IAC, WILL, TELOPT_ECHO, '\\0' };$/;"	v
echo_on_str	comm.c	/^const   char    echo_on_str     [] = { IAC, WONT, TELOPT_ECHO, '\\0' };$/;"	v
edit_done	olc.c	/^bool edit_done( CHAR_DATA *ch )$/;"	f
editor	merc.h	/^	int         editor;     \/* OLC *\/$/;"	m	struct:descriptor_data
editor_cmd_type	olc.h	/^struct	editor_cmd_type$/;"	s
editor_table	olc.c	/^const struct editor_cmd_type editor_table[] =$/;"	v	typeref:struct:editor_cmd_type
ee	merc.h	1167;"	d
empty	merc.h	/^	bool        empty;$/;"	m	struct:area_data
enchant_obj	enchant.c	/^void enchant_obj( OBJ_DATA *obj, int ops )$/;"	f
enchant_obj_max	enchant.c	/^void enchant_obj_max( OBJ_DATA *obj, int ops )$/;"	f
enchant_obj_roll	enchant.c	/^void enchant_obj_roll( OBJ_DATA *obj, int ops )$/;"	f
enchant_obj_stat	enchant.c	/^void enchant_obj_stat( OBJ_DATA *obj, int ops )$/;"	f
enlighten	lua_arclib.c	/^GODLIBHELP_DURATION( enlighten );$/;"	v
enter_game	nanny.c	/^void enter_game ( DESCRIPTOR_DATA *d )$/;"	f
eq_data	act_info.c	/^const struct newbie_data eq_data[] =$/;"	v	typeref:struct:newbie_data
equip_char	handler.c	/^void equip_char( CHAR_DATA *ch, OBJ_DATA *obj, int iWear )$/;"	f
equip_new_arrows	fight.c	/^void equip_new_arrows( CHAR_DATA *ch )$/;"	f
escape_ws	buffer.c	/^char* escape_ws(const char *s) {$/;"	f
exists_player	auth.c	/^bool exists_player( char *name )$/;"	f
exit	merc.h	/^    EXIT_DATA *     exit    [10];$/;"	m	struct:room_index_data
exit_data	merc.h	/^struct  exit_data$/;"	s
exit_flags	tables.c	/^const struct flag_type exit_flags[] =$/;"	v	typeref:struct:flag_type
exit_info	merc.h	/^	tflag       exit_info;$/;"	m	struct:exit_data
exit_ok	hunt.c	/^int exit_ok( EXIT_DATA *pexit )$/;"	f
exit_trigger	room_prog.c	/^static bool exit_trigger( CHAR_DATA *ch, ROOM_INDEX_DATA *room, int door, int type )$/;"	f	file:
exits_fixed	db.c	/^bool            exits_fixed = FALSE;$/;"	v
exp	merc.h	/^	int         exp;$/;"	m	struct:char_data
exp_per_level	skills.c	/^int exp_per_level(CHAR_DATA *ch)$/;"	f
exp_reward	merc.h	/^   int exp_reward;   $/;"	m	struct:achievement_entry
expand_arg	mob_prog.c	/^void expand_arg( char *buf, $/;"	f
expire	merc.h	/^	  time_t  expire;$/;"	m	struct:note_data
expl_in_container	act_obj.c	/^bool expl_in_container( OBJ_DATA *obj)$/;"	f
explode	update.c	/^void explode(OBJ_DATA *obj)$/;"	f
exploration_data	merc.h	/^typedef struct exploration_data$/;"	s
explore_holder	merc.h	/^typedef struct explore_holder$/;"	s
explore_vnum	act_move.c	/^void explore_vnum(CHAR_DATA *ch, int vnum )$/;"	f
explored	merc.h	/^    EXPLORE_DATA *explored;$/;"	m	struct:pc_data
explored_vnum	act_move.c	/^bool explored_vnum(CHAR_DATA *ch, int vnum)$/;"	f
extra_bit_name	handler.c	/^char* extra_bit_name( int flag )$/;"	f
extra_bits_name	handler.c	/^char* extra_bits_name( tflag flag )$/;"	f
extra_descr	merc.h	/^	EXTRA_DESCR_DATA *  extra_descr;$/;"	m	struct:obj_data
extra_descr	merc.h	/^	EXTRA_DESCR_DATA *  extra_descr;$/;"	m	struct:obj_index_data
extra_descr	merc.h	/^    EXTRA_DESCR_DATA *  extra_descr;$/;"	m	struct:room_index_data
extra_descr_data	merc.h	/^struct  extra_descr_data$/;"	s
extra_descr_free	mem.c	/^EXTRA_DESCR_DATA	*	extra_descr_free;$/;"	v
extra_descr_free	recycle.c	/^EXTRA_DESCR_DATA *extra_descr_free;$/;"	v
extra_flags	merc.h	/^	tflag         extra_flags;$/;"	m	struct:obj_data
extra_flags	merc.h	/^	tflag       extra_flags;$/;"	m	struct:obj_index_data
extra_flags	tables.c	/^const struct flag_type extra_flags[] =$/;"	v	typeref:struct:flag_type
extract_char	handler.c	/^bool extract_char( CHAR_DATA *ch, bool fPull )$/;"	f
extract_char_eq	handler.c	/^void extract_char_eq( CHAR_DATA *ch, OBJ_CHECK_FUN *extract_it, int to_loc )$/;"	f
extract_char_new	handler.c	/^bool extract_char_new( CHAR_DATA *ch, bool fPull, bool extract_objects)$/;"	f
extract_char_obj	handler.c	/^void extract_char_obj( CHAR_DATA *ch, OBJ_CHECK_FUN *extract_it, int to_loc,$/;"	f
extract_obj	handler.c	/^void extract_obj( OBJ_DATA *obj )$/;"	f
extract_update	update.c	/^void extract_update( void )$/;"	f
fBootDb	db.c	/^bool            fBootDb;$/;"	v
fLogAll	interp.c	/^bool                fLogAll     = FALSE;$/;"	v
faith	religion.h	/^    int faith;$/;"	m	struct:follower_data
false	protocol.h	/^   false, $/;"	e	enum:__anon6
favour	religion.h	/^    int favour;$/;"	m	struct:follower_data
fcommand	merc.h	/^	bool        fcommand;$/;"	m	struct:descriptor_data
ff	merc.h	1168;"	d
fgetf	pipe.c	/^char *fgetf( char *s, int n, register FILE *iop )$/;"	f
field	buildutil.c	/^    const char *field;$/;"	m	struct:__anon2	file:
field	lua_arclib.c	/^    char *field;$/;"	m	struct:lua_prop_type	file:
field	merc.h	/^    long        field;$/;"	m	struct:pc_data
fight_rounds	merc.h	/^	int	fight_rounds;$/;"	m	struct:char_data
fighting	merc.h	/^	CHAR_DATA *     fighting;$/;"	m	struct:char_data
file_name	merc.h	/^	char *      file_name;$/;"	m	struct:area_data
filename	buffer_util.h	/^  char filename[MAX_INPUT_LENGTH];$/;"	m	struct:mem_file_type
filename	merc.h	/^    char *   filename;$/;"	m	struct:clan_data
filename	merc.h	/^   char * filename;$/;"	m	struct:help_area_data
filter_basic_skills	skills.c	/^static void filter_basic_skills( int class, int *skill_costs )$/;"	f	file:
filter_known_skills	skills.c	/^static void filter_known_skills( CHAR_DATA *ch, int *skill_costs )$/;"	f	file:
final_player_save	simsave.c	/^void final_player_save()$/;"	f
find_command	interp.c	/^int find_command( CHAR_DATA *ch, char *command, bool exact )$/;"	f
find_door	act_move.c	/^int find_door( CHAR_DATA *ch, char *arg )$/;"	f
find_help_data	act_info.c	/^HELP_DATA* find_help_data( CHAR_DATA *ch, char *argument, BUFFER *output )$/;"	f
find_jail_room	penalty.c	/^ROOM_INDEX_DATA *find_jail_room(void)$/;"	f
find_keeper	act_obj.c	/^CHAR_DATA *find_keeper( CHAR_DATA *ch )$/;"	f
find_key	act_move.c	/^OBJ_DATA *find_key( CHAR_DATA *ch, int key )$/;"	f
find_location	handler.c	/^ROOM_INDEX_DATA *find_location( CHAR_DATA *ch, char *arg )$/;"	f
find_location_new	handler.c	/^ROOM_INDEX_DATA *find_location_new( CHAR_DATA *ch, char *arg, bool area )$/;"	f
find_mem_size	buffer.c	/^int find_mem_size (int min_size)$/;"	f
find_mob_area	redit-ilab.c	/^static MOB_INDEX_DATA* find_mob_area (AREA_DATA *area, char* keyword)$/;"	f	file:
find_mob_here	redit-ilab.c	/^static RESET_DATA *find_mob_here (ROOM_INDEX_DATA *room, char* argument)$/;"	f	file:
find_mp_location	mob_cmds.c	/^ROOM_INDEX_DATA* find_mp_location( CHAR_DATA *ch, char *arg )$/;"	f
find_note	board.c	/^static NOTE_DATA* find_note (CHAR_DATA *ch, BOARD_DATA *board, int num)$/;"	f	file:
find_obj_area	redit-ilab.c	/^static OBJ_INDEX_DATA* find_obj_area (AREA_DATA *area, char* keyword)$/;"	f	file:
find_obj_here	redit-ilab.c	/^static RESET_DATA *find_obj_here (ROOM_INDEX_DATA *room, char* argument)$/;"	f	file:
find_path	hunt.c	/^int find_path( int in_room_vnum, int out_room_vnum, bool in_zone, int max_depth, int *distance )$/;"	f
find_spell	magic.c	/^int find_spell( CHAR_DATA *ch, const char *name )$/;"	f
find_trainer	skills.c	/^CHAR_DATA* find_trainer( CHAR_DATA *ch, int act_flag, bool *introspect )$/;"	f
fingertime	bsave.c	/^int fingertime;$/;"	v
finish_note	board.c	/^void finish_note (BOARD_DATA *board, NOTE_DATA *note)$/;"	f
fire_effect	effects.c	/^void fire_effect(void *vo, int level, int dam, int target)$/;"	f
first	interp.h	/^    char * const        first;$/;"	m	struct:pair_type
first	merc.h	/^   HELP_DATA *  first;$/;"	m	struct:help_area_data
first_arg	string.c	/^char *first_arg( char *argument, char *arg_first, bool fCase )$/;"	f
first_auth_name	auth.c	/^AUTH_LIST *first_auth_name;$/;"	v
first_combatant	warfare.h	/^   CHAR_DATA *first_combatant;$/;"	m	struct:war_data
first_line	buildutil.c	/^char* first_line( char* str )$/;"	f
first_pers	merc.h	/^	char *first_pers;$/;"	m	struct:channel_type
first_reserved	act_wiz.c	/^RESERVED_DATA *first_reserved;$/;"	v
first_timer	timer.c	/^TIMER_NODE *first_timer=NULL;$/;"	v
fix_aprog_areas	olc_apcode.c	/^void fix_aprog_areas( CHAR_DATA *ch, PROG_CODE *pAcode )$/;"	f
fix_areaprogs	db.c	/^void fix_areaprogs( void )$/;"	f
fix_exits	db.c	/^void fix_exits( void )$/;"	f
fix_mobprogs	db.c	/^void fix_mobprogs( void )$/;"	f
fix_mprog_mobs	olc_mpcode.c	/^void fix_mprog_mobs( CHAR_DATA *ch, PROG_CODE *pMcode )$/;"	f
fix_objprogs	db.c	/^void fix_objprogs( void )$/;"	f
fix_oprog_objs	olc_opcode.c	/^void fix_oprog_objs( CHAR_DATA *ch, PROG_CODE *pOcode )$/;"	f
fix_roomprogs	db.c	/^void fix_roomprogs( void )$/;"	f
fix_rprog_rooms	olc_rpcode.c	/^void fix_rprog_rooms( CHAR_DATA *ch, PROG_CODE *pRcode )$/;"	f
fix_string	olc_save.c	/^char *fix_string( const char *str )$/;"	f
flag	merc.h	/^	long    flag;$/;"	m	struct:wiznet_type
flag_add_malus	act_obj.c	/^int flag_add_malus( OBJ_DATA *weapon )$/;"	f
flag_bit_name	handler.c	/^char* flag_bit_name( struct flag_type flag_table[], int flag )$/;"	f
flag_bits_name	handler.c	/^char* flag_bits_name( struct flag_type flag_table[], tflag flag )$/;"	f
flag_clear	tflag.c	/^void flag_clear( tflag f )$/;"	f
flag_convert	db.c	/^long flag_convert(char letter )$/;"	f
flag_convert_old	tflag.c	/^int flag_convert_old( long vector )$/;"	f
flag_copy	tflag.c	/^void flag_copy( tflag target, tflag source )$/;"	f
flag_copy_vector	tflag.c	/^void flag_copy_vector( tflag f, long vector )$/;"	f
flag_equal	tflag.c	/^bool flag_equal( tflag f1, tflag f2 )$/;"	f
flag_is_empty	tflag.c	/^bool flag_is_empty( tflag f )$/;"	f
flag_is_set	tflag.c	/^bool flag_is_set( tflag f, int bit )$/;"	f
flag_lookup	lookup.c	/^int flag_lookup (const char *name, const struct flag_type *flag_table)$/;"	f
flag_remove	tflag.c	/^void flag_remove( tflag f, int bit )$/;"	f
flag_remove_field	tflag.c	/^void flag_remove_field( tflag f, tflag f_rem )$/;"	f
flag_remove_vector	tflag.c	/^void flag_remove_vector( tflag f, long vector )$/;"	f
flag_set	tflag.c	/^void flag_set( tflag f, int bit )$/;"	f
flag_set_field	tflag.c	/^void flag_set_field( tflag f, tflag f_set )$/;"	f
flag_set_vector	tflag.c	/^void flag_set_vector( tflag f, long vector )$/;"	f
flag_stat_string	bit.c	/^char *flag_stat_string( const struct flag_type *flag_table, int bit )$/;"	f
flag_stat_table	bit.c	/^const struct flag_stat_type flag_stat_table[] =$/;"	v	typeref:struct:flag_stat_type
flag_stat_type	bit.c	/^struct flag_stat_type$/;"	s	file:
flag_string	bit.c	/^char *flag_string( const struct flag_type *flag_table, tflag bits )$/;"	f
flag_toggle	tflag.c	/^void flag_toggle( tflag f, int bit )$/;"	f
flag_type	tables.h	/^struct flag_type$/;"	s
flag_value	bit.c	/^int flag_value( const struct flag_type *flag_table, char *argument)$/;"	f
flush_descriptor	comm.c	/^bool flush_descriptor( DESCRIPTOR_DATA *d )$/;"	f
fn_evals	mob_prog.c	/^const keyword_list fn_evals =$/;"	v
fn_keyword	mob_prog.c	/^const keyword_list fn_keyword =$/;"	v
follower	religion.h	/^    FOLLOWER_DATA *follower;$/;"	m	struct:religion_data
follower_data	religion.h	/^struct follower_data$/;"	s
follower_get_rank	religion.c	/^int follower_get_rank( FOLLOWER_DATA *fol )$/;"	f
follower_is_priest	religion.c	/^bool follower_is_priest( FOLLOWER_DATA *fol )$/;"	f
follower_load_from_file	religion.c	/^FOLLOWER_DATA* follower_load_from_file( RELIGION_DATA *religion, FILE *fp )$/;"	f
follower_save_to_buffer	religion.c	/^void follower_save_to_buffer( FOLLOWER_DATA *list, DBUFFER *fp )$/;"	f
force_full_save	simsave.c	/^void force_full_save()$/;"	f
force_type	merc.h	/^	int force_type;        \/* Default action (DEF_XXX) *\/$/;"	m	struct:board_data
force_wrap	string.c	/^char *force_wrap( char *old_string )$/;"	f
forget	merc.h	/^    char *	forget[MAX_FORGET];$/;"	m	struct:pc_data
forget_attacker	hunt.c	/^void forget_attacker(CHAR_DATA *ch, CHAR_DATA *attacker)$/;"	f
forget_attacks	hunt.c	/^void forget_attacks(CHAR_DATA *ch)$/;"	f
forget_str_dup	db.c	/^void forget_str_dup(const char *str)$/;"	f
forgive	merc.h	/^   bool   forgive;   \/* 0 = conviction, 1 = forgiven.  Tracked for audit purposes. *\/$/;"	m	struct:crime_data
form	merc.h	/^	tflag        form;$/;"	m	struct:char_data
form	merc.h	/^	tflag        form;$/;"	m	struct:mob_index_data_old
form	merc.h	/^	tflag    form;           \/* default form flag for the race *\/$/;"	m	struct:race_type
form	merc.h	/^    tflag       form;$/;"	m	struct:mob_index_data
form_bit_name	handler.c	/^char* form_bit_name( int flag )$/;"	f
form_bits_name	handler.c	/^char* form_bits_name( tflag flag )$/;"	f
form_flags	tables.c	/^const struct flag_type form_flags[] =$/;"	v	typeref:struct:flag_type
format_color_string	string.c	/^char *format_color_string( const char *argument, int width )$/;"	f
format_init_flags	db.c	/^void format_init_flags( void )$/;"	f
format_obj_to_char	act_info.c	/^char *format_obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch, bool fShort )$/;"	f
format_race_flags	db.c	/^void format_race_flags( void )$/;"	f
format_string	string.c	/^char *format_string( char *oldstring \/*, bool fSpace *\/)$/;"	f
fortune	lua_arclib.c	/^GODLIBHELP_DURATION( fortune );$/;"	v
fpArea	db.c	/^FILE *          fpArea;$/;"	v
fread_auth	auth.c	/^void fread_auth( FILE *fp )$/;"	f
fread_clan	clan.c	/^void fread_clan( FILE *fp, int clannum )$/;"	f
fread_clan_rank	clan.c	/^void fread_clan_rank( FILE *fp, int clannum, int ranknum )$/;"	f
fread_flag	db.c	/^long fread_flag( FILE *fp)$/;"	f
fread_letter	db.c	/^char fread_letter( FILE *fp )$/;"	f
fread_number	db.c	/^int fread_number( FILE *fp )$/;"	f
fread_string	db.c	/^char *fread_string( FILE *fp )$/;"	f
fread_string_eol	db.c	/^char *fread_string_eol( FILE *fp )$/;"	f
fread_string_eol_old	db.c	/^char *fread_string_eol_old( FILE *fp )$/;"	f
fread_tflag	tflag.c	/^void fread_tflag( FILE *fp, tflag f )$/;"	f
fread_to_eol	db.c	/^void fread_to_eol( FILE *fp )$/;"	f
fread_word	db.c	/^char *fread_word( FILE *fp )$/;"	f
free	lua_arclib.h	/^    void (*free)();$/;"	m	struct:lua_obj_type
free_affect	recycle.c	/^void free_affect(AFFECT_DATA *af)$/;"	f
free_apcode	mem.c	/^void free_apcode(PROG_CODE *pAcode)$/;"	f
free_aprog	recycle.c	/^void free_aprog(PROG_LIST *ap)$/;"	f
free_area	mem.c	/^void free_area( AREA_DATA *pArea )$/;"	f
free_ban	recycle.c	/^void free_ban(BAN_DATA *ban)$/;"	f
free_buf	recycle.c	/^void free_buf(BUFFER *buffer)$/;"	f
free_char	recycle.c	/^void free_char (CHAR_DATA *ch)$/;"	f
free_crime	recycle.c	/^void free_crime(CRIME_DATA *crime)$/;"	f
free_descriptor	recycle.c	/^void free_descriptor(DESCRIPTOR_DATA *d)$/;"	f
free_exit	mem.c	/^void free_exit( EXIT_DATA *pExit )$/;"	f
free_extra_descr	recycle.c	/^void free_extra_descr(EXTRA_DESCR_DATA *ed)$/;"	f
free_follower	religion.c	/^void free_follower( FOLLOWER_DATA *fol )$/;"	f
free_follower_list	religion.c	/^void free_follower_list( FOLLOWER_DATA *list )$/;"	f
free_gen_data	recycle.c	/^void free_gen_data(GEN_DATA *gen)$/;"	f
free_grep_data	grep.c	/^void free_grep_data( GREP_DATA *gd )$/;"	f
free_grep_list	grep.c	/^void free_grep_list( GREP_DATA *gd )$/;"	f
free_luaval	lua_arclib.c	/^void free_luaval( LUA_EXTRA_VAL *luaval)$/;"	f
free_mem	db.c	/^void free_mem( void *pMem, int sMem )$/;"	f
free_mem_data	recycle.c	/^void free_mem_data(MEM_DATA *memory)$/;"	f
free_mob_index	mem.c	/^void free_mob_index( MOB_INDEX_DATA *pMob )$/;"	f
free_mpcode	mem.c	/^void free_mpcode(PROG_CODE *pMcode)$/;"	f
free_mprog	recycle.c	/^void free_mprog(PROG_LIST *mp)$/;"	f
free_note	recycle.c	/^void free_note(NOTE_DATA *note)$/;"	f
free_obj	recycle.c	/^void free_obj(OBJ_DATA *obj)$/;"	f
free_obj_index	mem.c	/^void free_obj_index( OBJ_INDEX_DATA *pObj )$/;"	f
free_opcode	mem.c	/^void free_opcode(PROG_CODE *pOcode)$/;"	f
free_oprog	recycle.c	/^void free_oprog(PROG_LIST *op)$/;"	f
free_pcdata	recycle.c	/^void free_pcdata(PC_DATA *pcdata)$/;"	f
free_portal	recycle.c	/^void free_portal( PORTAL_DATA *portal )$/;"	f
free_prayer	religion.c	/^void free_prayer( CHAR_DATA *ch )$/;"	f
free_quest	recycle.c	/^void free_quest(QUEST_DATA *quest)$/;"	f
free_relic	religion.c	/^void free_relic( OBJ_DATA *obj )$/;"	f
free_religion	religion.c	/^void free_religion( RELIGION_DATA* religion )$/;"	f
free_reset_data	mem.c	/^void free_reset_data( RESET_DATA *pReset )$/;"	f
free_room_index	mem.c	/^void free_room_index( ROOM_INDEX_DATA *pRoom )$/;"	f
free_rpcode	mem.c	/^void free_rpcode(PROG_CODE *pRcode)$/;"	f
free_rprog	recycle.c	/^void free_rprog(PROG_LIST *rp)$/;"	f
free_shop	mem.c	/^void free_shop( SHOP_DATA *pShop )$/;"	f
free_sort	recycle.c	/^void free_sort(SORT_TABLE *sort)$/;"	f
free_string	db.c	/^void free_string( char *pstr )$/;"	f
free_timer_node	timer.c	/^static void free_timer_node( TIMER_NODE *tmr)$/;"	f	file:
free_wiz	recycle.c	/^void free_wiz(WIZ_DATA *wiz)$/;"	f
ftag_chamber	freeze.c	/^int ftag_chamber=0;$/;"	v
ftag_next	freeze.c	/^int ftag_next=0;$/;"	v
ftag_reset_player	freeze.c	/^void ftag_reset_player(CHAR_DATA *ch, char *argument)$/;"	f
ftag_reward	freeze.c	/^int ftag_reward = 0;$/;"	v
ftag_table	freeze.c	/^int ftag_table[4][2]=$/;"	v
full_dam	fight.c	/^bool full_dam( CHAR_DATA *ch, CHAR_DATA *victim, int dam, int dt, int dam_type, bool show )$/;"	f
fun	religion.c	/^    GOD_FUN *fun;$/;"	m	struct:god_action	file:
fun	smith.c	/^    SMITH_FUN *     fun;$/;"	m	struct:smith_arg	file:
fun	smith.c	/^    SMITH_SET_FUN *         fun;$/;"	m	struct:smith_set_arg	file:
func	buildutil.c	/^    bool (*func)(CHAR_DATA *, CHAR_DATA *, const char *, int);$/;"	m	struct:__anon2	file:
func	lua_arclib.c	/^    int  (*func)();$/;"	m	struct:lua_prop_type	file:
func	lua_arclib.c	/^    int (*func)();$/;"	m	struct:glob_type	file:
function	merc.h	/^	SPEC_FUN *  function;       \/* the function *\/$/;"	m	struct:spec_type
furniture_flags	tables.c	/^const struct flag_type furniture_flags[]=$/;"	v	typeref:struct:flag_type
fwrite_flag	olc_save.c	/^char *fwrite_flag( long flags, char buf[] )$/;"	f
g_LoopCheckCounter	lua_main.c	/^int        g_LoopCheckCounter;$/;"	v
g_LoopCheckCounter	lua_main.h	/^int               g_LoopCheckCounter;$/;"	v
g_LuaScriptInProgress	lua_main.c	/^bool       g_LuaScriptInProgress=FALSE;$/;"	v
g_ScriptSecurity	lua_main.c	/^int        g_ScriptSecurity=0;$/;"	v
g_ScriptSecurity	lua_main.h	/^int               g_ScriptSecurity;$/;"	v
g_mud_LS	lua_main.c	/^lua_State *g_mud_LS = NULL;  \/* Lua state for entire MUD *\/$/;"	v
gag	merc.h	/^        tflag       gag;  $/;"	m	struct:char_data
gain_condition	update.c	/^void gain_condition( CHAR_DATA *ch, int iCond, int value )$/;"	f
gain_exp	update.c	/^void gain_exp( CHAR_DATA *ch, int gain_base)$/;"	f
gain_faith	religion.c	/^void gain_faith( CHAR_DATA *ch, int gain )$/;"	f
gain_mod	update.c	/^int gain_mod(int x)$/;"	f
gain_skill	skills.c	/^void gain_skill(CHAR_DATA *ch, int sn, CHAR_DATA *trainer)$/;"	f
game_loop_unix	comm.c	/^void game_loop_unix( int control )$/;"	f
game_obj	timer.c	/^    void *game_obj;$/;"	m	struct:timer_node	file:
gametalk	merc.h	/^	int gametalk[3];        \/* {k *\/$/;"	m	struct:pc_data
gametalk_text	merc.h	/^	int gametalk_text[3];   \/* {K *\/$/;"	m	struct:pc_data
gen_data	merc.h	/^	GEN_DATA *      gen_data;$/;"	m	struct:char_data
gen_data	merc.h	/^struct gen_data$/;"	s
gen_data_free	recycle.c	/^GEN_DATA *gen_data_free;$/;"	v
gen_groups	nanny.c	/^bool	gen_groups ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
gender	merc.h	/^	sh_int  gender;$/;"	m	struct:pc_race_type
gender_kills	merc.h	/^	int                 gender_kills;$/;"	m	struct:pc_data
gender_lost	merc.h	/^	int                 gender_lost;$/;"	m	struct:pc_data
gender_won	merc.h	/^	int                 gender_won;$/;"	m	struct:pc_data
generate_quest	quest.c	/^void generate_quest(CHAR_DATA *ch, CHAR_DATA *questman)$/;"	f
generate_quest_hard	quest.c	/^void generate_quest_hard(CHAR_DATA *ch, CHAR_DATA *questman)$/;"	f
genrand	mt19937ar.c	/^double genrand(void) $/;"	f
genrand_int31	mt19937ar.c	/^long genrand_int31(void)$/;"	f
genrand_int32	mt19937ar.c	/^unsigned long genrand_int32(void)$/;"	f
genrand_real1	mt19937ar.c	/^double genrand_real1(void)$/;"	f
genrand_real2	mt19937ar.c	/^double genrand_real2(void)$/;"	f
genrand_real3	mt19937ar.c	/^double genrand_real3(void)$/;"	f
genrand_res53	mt19937ar.c	/^double genrand_res53(void) $/;"	f
get_ac	stats.c	/^int get_ac( CHAR_DATA *ch, int type )$/;"	f
get_affect_cap	grep.c	/^int get_affect_cap( int location, int level )$/;"	f
get_affect_ops	grep.c	/^float get_affect_ops( AFFECT_DATA *aff, int level )$/;"	f
get_age	handler.c	/^int get_age( CHAR_DATA *ch )$/;"	f
get_alignment	nanny.c	/^bool	get_alignment ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_aprog_index	db.c	/^PROG_CODE *get_aprog_index( int vnum )$/;"	f
get_area_data	olc.c	/^AREA_DATA *get_area_data( int vnum )$/;"	f
get_auth_name	auth.c	/^AUTH_LIST *get_auth_name( char *name )$/;"	f
get_auth_state	auth.c	/^int get_auth_state( CHAR_DATA *ch )$/;"	f
get_base_sex	handler.c	/^int get_base_sex(CHAR_DATA *ch)$/;"	f
get_carry_weight	merc.h	3852;"	d
get_ch_rank_name	religion.c	/^char* get_ch_rank_name( CHAR_DATA *ch )$/;"	f
get_char_area	handler.c	/^CHAR_DATA *get_char_area( CHAR_DATA *ch, char *argument )$/;"	f
get_char_group	handler.c	/^CHAR_DATA *get_char_group( CHAR_DATA *ch, char *argument )$/;"	f
get_char_group_new	handler.c	/^CHAR_DATA *get_char_group_new( CHAR_DATA *ch, char *argument, bool exact )$/;"	f
get_char_new	handler.c	/^CHAR_DATA *get_char_new( CHAR_DATA *ch, char *argument, bool area, bool exact )$/;"	f
get_char_obj_vnum	handler.c	/^OBJ_DATA* get_char_obj_vnum( CHAR_DATA *ch, int vnum )$/;"	f
get_char_room	handler.c	/^CHAR_DATA *get_char_room( CHAR_DATA *ch, char *argument )$/;"	f
get_char_room_new	handler.c	/^CHAR_DATA *get_char_room_new( CHAR_DATA *ch, char *argument, bool exact )$/;"	f
get_char_world	handler.c	/^CHAR_DATA *get_char_world( CHAR_DATA *ch, char *argument )$/;"	f
get_colour	nanny.c	/^bool get_colour( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_combat_victim	fight.c	/^CHAR_DATA* get_combat_victim( CHAR_DATA *ch, char *argument )$/;"	f
get_cost	act_obj.c	/^int get_cost( CHAR_DATA *keeper, OBJ_DATA *obj, bool fBuy )$/;"	f
get_craft_ops	crafting.c	/^int get_craft_ops( OBJ_DATA *obj, int level )$/;"	f
get_creation_mode	nanny.c	/^bool get_creation_mode(DESCRIPTOR_DATA *d, char *argument)$/;"	f
get_crime_count	penalty.c	/^int get_crime_count( CHAR_DATA *ch, char *crime_name, char *imm_name )$/;"	f
get_curr_stat	stats.c	/^int get_curr_stat( CHAR_DATA *ch, int stat )$/;"	f
get_damage_messages	fight.c	/^int get_damage_messages( int dam, int dt, char **vs, char **vp, char *punct )$/;"	f
get_damroll	stats.c	/^int get_damroll( CHAR_DATA *ch )$/;"	f
get_disguise_vnum	act_info.c	/^MOB_INDEX_DATA* get_disguise_vnum( char *name )$/;"	f
get_duration	magic.c	/^int get_duration( int sn, int level )$/;"	f
get_duration_by_type	magic.c	/^int get_duration_by_type( int type, int level )$/;"	f
get_enchant_ops	enchant.c	/^int get_enchant_ops( OBJ_DATA *obj, int level )$/;"	f
get_encumberance	stats.c	/^int get_encumberance( CHAR_DATA *ch )$/;"	f
get_eq_char	handler.c	/^OBJ_DATA *get_eq_char( CHAR_DATA *ch, int iWear )$/;"	f
get_eq_corpse	handler.c	/^void get_eq_corpse( CHAR_DATA *ch, OBJ_DATA *corpse )$/;"	f
get_exit_count	fight.c	/^int get_exit_count( CHAR_DATA *ch )$/;"	f
get_extra_descr	db.c	/^char *get_extra_descr( const char *name, EXTRA_DESCR_DATA *ed )$/;"	f
get_faith	religion.c	/^int get_faith( CHAR_DATA *ch )$/;"	f
get_favour	religion.c	/^int get_favour( CHAR_DATA *ch )$/;"	f
get_final_master	fight.c	/^CHAR_DATA* get_final_master( CHAR_DATA *ch )$/;"	f
get_focus_bonus	magic.c	/^int get_focus_bonus( CHAR_DATA *ch )$/;"	f
get_god_name	religion.c	/^char* get_god_name( CHAR_DATA *ch )$/;"	f
get_group_base_cost	skills.c	/^int get_group_base_cost( int gn, int class )$/;"	f
get_group_cost	skills.c	/^int get_group_cost( CHAR_DATA *ch, int gn )$/;"	f
get_group_mastery	skills.c	/^static int get_group_mastery( CHAR_DATA *ch, int gn )$/;"	f	file:
get_group_skill_costs	skills.c	/^static int* get_group_skill_costs( int gn, int class )$/;"	f	file:
get_hitroll	stats.c	/^int get_hitroll( CHAR_DATA *ch )$/;"	f
get_hmm_softcap	stats.c	/^void get_hmm_softcap( CHAR_DATA *ch, int *hp_cap, int *mana_cap, int *move_cap )$/;"	f
get_injury_penalty	skills.c	/^int get_injury_penalty( CHAR_DATA *ch )$/;"	f
get_last_reset	db.c	/^RESET_DATA* get_last_reset( RESET_DATA *reset_list )$/;"	f
get_leadership_bonus	fight.c	/^int get_leadership_bonus( CHAR_DATA *ch, bool improve )$/;"	f
get_level_stats	olc_act.c	/^int* get_level_stats( int level )$/;"	f
get_line	string.c	/^char *get_line( char *str, char *buf )$/;"	f
get_local_leader	fight.c	/^CHAR_DATA *get_local_leader( CHAR_DATA *ch )$/;"	f
get_luaval	lua_arclib.c	/^static int get_luaval( lua_State *LS, LUA_EXTRA_VAL **luavals )$/;"	f	file:
get_mastery	skills.c	/^int get_mastery( CHAR_DATA *ch, int sn )$/;"	f
get_mastery_group_cost	skills.c	/^static int get_mastery_group_cost( CHAR_DATA *ch, int sn )$/;"	f	file:
get_mastery_groups	skills.c	/^static int* get_mastery_groups( int sn )$/;"	f	file:
get_max_train	stats.c	/^int get_max_train( CHAR_DATA *ch, int stat )$/;"	f
get_mimic	handler.c	/^MOB_INDEX_DATA* get_mimic( CHAR_DATA *ch )$/;"	f
get_mimic_PERS	handler.c	/^char* get_mimic_PERS( CHAR_DATA *ch, CHAR_DATA *looker )$/;"	f
get_mimic_PERS_new	handler.c	/^char* get_mimic_PERS_new( CHAR_DATA *ch, CHAR_DATA *looker, long gagtype)$/;"	f
get_mob_id	recycle.c	/^long get_mob_id(void)$/;"	f
get_mob_index	db.c	/^MOB_INDEX_DATA *get_mob_index( int vnum )$/;"	f
get_mob_index_safe	db.c	/^MOB_INDEX_DATA *get_mob_index_safe( int vnum )$/;"	f
get_mob_vnum_room	mob_prog.c	/^bool get_mob_vnum_room( CHAR_DATA *ch, int vnum )$/;"	f
get_mob_vnum_world	handler.c	/^CHAR_DATA* get_mob_vnum_world( int vnum )$/;"	f
get_morph_pc_race_type	stats.c	/^struct pc_race_type* get_morph_pc_race_type( CHAR_DATA *ch )$/;"	f
get_morph_race_type	stats.c	/^struct race_type* get_morph_race_type( CHAR_DATA *ch )$/;"	f
get_mp_char	mob_cmds.c	/^CHAR_DATA* get_mp_char( CHAR_DATA *ch, char *argument )$/;"	f
get_mp_obj	mob_cmds.c	/^OBJ_DATA* get_mp_obj( CHAR_DATA *ch, char *argument )$/;"	f
get_mprog_index	db.c	/^PROG_CODE *get_mprog_index( int vnum )$/;"	f
get_multi_skill_cost	skills.c	/^static int get_multi_skill_cost( int *skill_costs )$/;"	f	file:
get_name	nanny.c	/^bool get_name ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_new_class	nanny.c	/^bool	get_new_class ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_new_password	nanny.c	/^bool	get_new_password ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_new_race	nanny.c	/^bool get_new_race ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_new_sex	nanny.c	/^bool	get_new_sex ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_next_victim	magic.c	/^CHAR_DATA* get_next_victim( CHAR_DATA *ch, CHAR_DATA *start_victim )$/;"	f
get_obj	act_obj.c	/^void get_obj( CHAR_DATA *ch, OBJ_DATA *obj, OBJ_DATA *container )$/;"	f
get_obj_area	handler.c	/^OBJ_DATA *get_obj_area( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_by_type	handler.c	/^OBJ_DATA* get_obj_by_type( OBJ_DATA *contents, int item_type )$/;"	f
get_obj_carry	handler.c	/^OBJ_DATA *get_obj_carry( CHAR_DATA *ch, char *argument, CHAR_DATA *viewer )$/;"	f
get_obj_carry_new	handler.c	/^OBJ_DATA *get_obj_carry_new( CHAR_DATA *ch, char *arg, CHAR_DATA *viewer,$/;"	f
get_obj_char	handler.c	/^CHAR_DATA* get_obj_char( OBJ_DATA *obj )$/;"	f
get_obj_faith_worth	act_obj.c	/^int get_obj_faith_worth( OBJ_DATA *obj )$/;"	f
get_obj_here	handler.c	/^OBJ_DATA *get_obj_here( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_here_new	handler.c	/^OBJ_DATA *get_obj_here_new( CHAR_DATA *ch, char *argument, bool exact )$/;"	f
get_obj_index	db.c	/^OBJ_INDEX_DATA *get_obj_index( int vnum )$/;"	f
get_obj_index_ops	grep.c	/^int get_obj_index_ops( OBJ_INDEX_DATA *obj )$/;"	f
get_obj_index_safe	db.c	/^OBJ_INDEX_DATA *get_obj_index_safe( int vnum )$/;"	f
get_obj_index_spec	grep.c	/^int get_obj_index_spec( OBJ_INDEX_DATA *obj, int level )$/;"	f
get_obj_keeper	act_obj.c	/^OBJ_DATA *get_obj_keeper( CHAR_DATA *ch, CHAR_DATA *keeper, char *argument )$/;"	f
get_obj_list	handler.c	/^OBJ_DATA *get_obj_list( CHAR_DATA *ch, char *argument, OBJ_DATA *list )$/;"	f
get_obj_list_new	handler.c	/^OBJ_DATA *get_obj_list_new( CHAR_DATA *ch, char *arg, OBJ_DATA *list, $/;"	f
get_obj_new	handler.c	/^OBJ_DATA *get_obj_new( CHAR_DATA *ch, char *argument, bool area, bool exact )$/;"	f
get_obj_number	handler.c	/^int get_obj_number( OBJ_DATA *obj )$/;"	f
get_obj_ops	grep.c	/^int get_obj_ops( OBJ_DATA *obj )$/;"	f
get_obj_ovalue	olc_act.c	/^int* get_obj_ovalue( int level )$/;"	f
get_obj_room	handler.c	/^ROOM_INDEX_DATA *get_obj_room(OBJ_DATA *obj)$/;"	f
get_obj_spec	grep.c	/^int get_obj_spec( OBJ_DATA *obj )$/;"	f
get_obj_type	handler.c	/^OBJ_DATA *get_obj_type( OBJ_INDEX_DATA *pObjIndex )$/;"	f
get_obj_vnum_room	mob_prog.c	/^bool get_obj_vnum_room( CHAR_DATA *ch, int vnum )$/;"	f
get_obj_wear	handler.c	/^OBJ_DATA *get_obj_wear( CHAR_DATA *ch, char *argument )$/;"	f
get_obj_wear_new	handler.c	/^OBJ_DATA *get_obj_wear_new( CHAR_DATA *ch, char *arg,$/;"	f
get_obj_weight	handler.c	/^int get_obj_weight( OBJ_DATA *obj )$/;"	f
get_obj_world	handler.c	/^OBJ_DATA *get_obj_world( CHAR_DATA *ch, char *argument )$/;"	f
get_old_password	nanny.c	/^bool	get_old_password ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
get_oprog_index	db.c	/^PROG_CODE *get_oprog_index( int vnum )$/;"	f
get_order	mob_prog.c	/^int get_order( CHAR_DATA *ch )$/;"	f
get_pc_id	recycle.c	/^long get_pc_id(void)$/;"	f
get_pkflag	act_info.c	/^char get_pkflag( CHAR_DATA *ch, CHAR_DATA *wch )$/;"	f
get_pkgrade_level	fight.c	/^int get_pkgrade_level( int pts )$/;"	f
get_player	handler.c	/^CHAR_DATA* get_player( char *name )$/;"	f
get_portal_room	act_enter.c	/^ROOM_INDEX_DATA* get_portal_room( char *name )$/;"	f
get_race_skill	skills.c	/^int get_race_skill( CHAR_DATA *ch, int sn )$/;"	f
get_random_char	mob_prog.c	/^CHAR_DATA *get_random_char( CHAR_DATA *mob )$/;"	f
get_random_exit	act_move.c	/^int get_random_exit( CHAR_DATA *ch )$/;"	f
get_random_room	act_enter.c	/^ROOM_INDEX_DATA  *get_random_room(CHAR_DATA *ch)$/;"	f
get_random_room_area	act_enter.c	/^ROOM_INDEX_DATA  *get_random_room_area(CHAR_DATA *ch)$/;"	f
get_random_room_range	act_enter.c	/^ROOM_INDEX_DATA  *get_random_room_range(CHAR_DATA *ch, int min_vnum, int max_vnum)$/;"	f
get_random_war_room	act_enter.c	/^ROOM_INDEX_DATA  *get_random_war_room(CHAR_DATA *ch)$/;"	f
get_rating_name	olc_act.c	/^char* get_rating_name( int rating )$/;"	f
get_reaction	hunt.c	/^int get_reaction( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
get_religion	religion.c	/^RELIGION_DATA *get_religion( CHAR_DATA *ch )$/;"	f
get_religion_bonus	religion.c	/^int get_religion_bonus( CHAR_DATA *ch )$/;"	f
get_religion_by_ID	religion.c	/^RELIGION_DATA* get_religion_by_ID( int ID )$/;"	f
get_religion_by_name	religion.c	/^RELIGION_DATA* get_religion_by_name( char *name )$/;"	f
get_religion_follower_data	religion.c	/^FOLLOWER_DATA* get_religion_follower_data( char *name )$/;"	f
get_religion_of_altar	religion.c	/^RELIGION_DATA *get_religion_of_altar( ROOM_INDEX_DATA *room )$/;"	f
get_religion_of_guard	religion.c	/^RELIGION_DATA *get_religion_of_guard( CHAR_DATA *guard )$/;"	f
get_religion_rank_name	religion.c	/^char* get_religion_rank_name( int rank )$/;"	f
get_reset_number	olc.c	/^int get_reset_number( ROOM_INDEX_DATA *room, char command, int vnum )$/;"	f
get_revers_exit	olc_act.c	/^EXIT_DATA* get_revers_exit( ROOM_INDEX_DATA *pRoom, int door, bool changed )$/;"	f
get_room_area	handler.c	/^ROOM_INDEX_DATA* get_room_area( AREA_DATA *area, char *argument )$/;"	f
get_room_in_range	handler.c	/^ROOM_INDEX_DATA* get_room_in_range( int min_vnum, int max_vnum, char *argument, bool exact )$/;"	f
get_room_index	db.c	/^ROOM_INDEX_DATA *get_room_index( int vnum )$/;"	f
get_room_index_safe	db.c	/^ROOM_INDEX_DATA *get_room_index_safe( int vnum )$/;"	f
get_room_world	handler.c	/^ROOM_INDEX_DATA* get_room_world( char *argument )$/;"	f
get_rprog_index	db.c	/^PROG_CODE *get_rprog_index( int vnum )$/;"	f
get_save	magic.c	/^int get_save(CHAR_DATA *ch, bool physical)$/;"	f
get_size	recycle.c	/^int get_size (int val)$/;"	f
get_skill	skills.c	/^int get_skill(CHAR_DATA *ch, int sn)$/;"	f
get_skill_prac	skills.c	/^int get_skill_prac(CHAR_DATA *ch, int sn)$/;"	f
get_sn_damage	magic.c	/^int get_sn_damage( int sn, int level, CHAR_DATA *ch )$/;"	f
get_sn_heal	magic.c	/^int get_sn_heal( int sn, int level, CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
get_spell_damage	magic.c	/^int get_spell_damage( int mana, int lag, int level )$/;"	f
get_spell_heal	magic.c	/^int get_spell_heal( int mana, int lag, int level )$/;"	f
get_spell_list	special.c	/^struct spell_type* get_spell_list( CHAR_DATA *ch )$/;"	f
get_spell_target	magic.c	/^bool get_spell_target( CHAR_DATA *ch, char *arg, int sn, \/* input *\/$/;"	f
get_table	lua_arclib.h	/^    struct lua_prop_type * const get_table;$/;"	m	struct:lua_obj_type
get_tattoo	tattoo.c	/^int get_tattoo( tattoo_list tl, int loc )$/;"	f
get_tattoo_ch	tattoo.c	/^int get_tattoo_ch( CHAR_DATA *ch, int loc )$/;"	f
get_tattoo_level	tattoo.c	/^float get_tattoo_level( CHAR_DATA *ch, int loc, int level )$/;"	f
get_translucency_spec_penalty	grep.c	/^int get_translucency_spec_penalty( int level )$/;"	f
get_true_weight	handler.c	/^int get_true_weight(OBJ_DATA *obj)$/;"	f
get_trust	handler.c	/^int get_trust( CHAR_DATA *ch )$/;"	f
get_twohand_bonus	fight.c	/^int get_twohand_bonus( CHAR_DATA *ch, OBJ_DATA *wield, bool improve )$/;"	f
get_vnum_area	olc_act.c	/^AREA_DATA *get_vnum_area( int vnum )$/;"	f
get_vulnerability	fight.c	/^float get_vulnerability( CHAR_DATA *victim )$/;"	f
get_waiting_desc	auth.c	/^CHAR_DATA *get_waiting_desc( CHAR_DATA *ch, char *name ) $/;"	f
get_weapon_damage	fight.c	/^int get_weapon_damage( OBJ_DATA *wield )$/;"	f
get_weapon_damtype	fight.c	/^int get_weapon_damtype( OBJ_DATA *wield )$/;"	f
get_weapon_skill	skills.c	/^int get_weapon_skill(CHAR_DATA *ch, int sn)$/;"	f
get_weapon_sn	handler.c	/^int get_weapon_sn(CHAR_DATA *ch)$/;"	f
get_weapon_sn_new	handler.c	/^int get_weapon_sn_new(CHAR_DATA *ch, bool secondary)$/;"	f
gg	merc.h	1169;"	d
give_ftag_reward	freeze.c	/^void give_ftag_reward(int team, int amount)$/;"	f
glob_arguments	lua_arclib.c	/^static int glob_arguments ( lua_State *LS)$/;"	f	file:
glob_cancel	lua_arclib.c	/^static int glob_cancel ( lua_State *LS)$/;"	f	file:
glob_clearloopcount	lua_arclib.c	/^static int glob_clearloopcount (lua_State *LS)$/;"	f	file:
glob_dammessage	lua_arclib.c	/^static int glob_dammessage (lua_State *LS)$/;"	f	file:
glob_do_luaquery	lua_arclib.c	/^static int glob_do_luaquery ( lua_State *LS)$/;"	f	file:
glob_echoaround	lua_arclib.c	/^static int glob_echoaround (lua_State *LS)$/;"	f	file:
glob_echoat	lua_arclib.c	/^static int glob_echoat (lua_State *LS)$/;"	f	file:
glob_getarealist	lua_arclib.c	/^static int glob_getarealist (lua_State *LS)$/;"	f	file:
glob_getcharlist	lua_arclib.c	/^static int glob_getcharlist (lua_State *LS)$/;"	f	file:
glob_getdescriptorlist	lua_arclib.c	/^static int glob_getdescriptorlist (lua_State *LS)$/;"	f	file:
glob_getglobals	lua_arclib.c	/^static int glob_getglobals (lua_State *LS)$/;"	f	file:
glob_gethelplist	lua_arclib.c	/^static int glob_gethelplist ( lua_State *LS )$/;"	f	file:
glob_getluatype	lua_arclib.c	/^static int glob_getluatype (lua_State *LS)$/;"	f	file:
glob_getmoblist	lua_arclib.c	/^static int glob_getmoblist (lua_State *LS)$/;"	f	file:
glob_getmobproto	lua_arclib.c	/^static int glob_getmobproto (lua_State *LS)$/;"	f	file:
glob_getmobworld	lua_arclib.c	/^static int glob_getmobworld (lua_State *LS)$/;"	f	file:
glob_getobjlist	lua_arclib.c	/^static int glob_getobjlist (lua_State *LS)$/;"	f	file:
glob_getobjproto	lua_arclib.c	/^static int glob_getobjproto (lua_State *LS)$/;"	f	file:
glob_getobjworld	lua_arclib.c	/^static int glob_getobjworld (lua_State *LS)$/;"	f	file:
glob_getpc	lua_arclib.c	/^static int glob_getpc (lua_State *LS)$/;"	f	file:
glob_getplayerlist	lua_arclib.c	/^static int glob_getplayerlist (lua_State *LS)$/;"	f	file:
glob_getrandomroom	lua_arclib.c	/^static int glob_getrandomroom ( lua_State *LS)$/;"	f	file:
glob_getroom	lua_arclib.c	/^static int glob_getroom (lua_State *LS)$/;"	f	file:
glob_getshoplist	lua_arclib.c	/^static int glob_getshoplist ( lua_State *LS)$/;"	f	file:
glob_gtransfer	lua_arclib.c	/^static int glob_gtransfer (lua_State *LS)$/;"	f	file:
glob_hour	lua_arclib.c	/^static int glob_hour (lua_State *LS)$/;"	f	file:
glob_log	lua_arclib.c	/^static int glob_log (lua_State *LS)$/;"	f	file:
glob_mudconfig	lua_arclib.c	/^static int glob_mudconfig (lua_State *LS)$/;"	f	file:
glob_pagetochar	lua_arclib.c	/^static int glob_pagetochar (lua_State *LS)$/;"	f	file:
glob_rand	lua_arclib.c	/^static int glob_rand ( lua_State *LS)$/;"	f	file:
glob_randnum	lua_arclib.c	/^static int glob_randnum ( lua_State *LS)$/;"	f	file:
glob_sendtochar	lua_arclib.c	/^static int glob_sendtochar (lua_State *LS)$/;"	f	file:
glob_table	lua_arclib.c	/^GLOB_TYPE glob_table[] =$/;"	v
glob_table	lua_arclib.c	/^struct glob_type glob_table[];$/;"	v	typeref:struct:glob_type
glob_tprintstr	lua_arclib.c	/^static int glob_tprintstr ( lua_State *LS)$/;"	f	file:
glob_transfer	lua_arclib.c	/^static int glob_transfer (lua_State *LS)$/;"	f	file:
glob_type	lua_arclib.c	/^typedef struct glob_type$/;"	s	file:
global_immediate_flush	act_wiz.c	/^bool global_immediate_flush = FALSE;$/;"	v
global_immediate_flush	act_wiz.c	/^bool global_immediate_flush = TRUE;$/;"	v
global_sec_check	lua_arclib.c	/^static int global_sec_check (lua_State *LS)$/;"	f	file:
gn_add	skills.c	/^void gn_add( CHAR_DATA *ch, int gn)$/;"	f
gn_remove	skills.c	/^void gn_remove( CHAR_DATA *ch, int gn)$/;"	f
go_ahead_str	comm.c	/^const   char    go_ahead_str    [] = { IAC, GA, '\\0' };$/;"	v
go_type	timer.c	/^    int go_type;$/;"	m	struct:timer_node	file:
god	comm.c	/^bool            god;        \/* All new chars are gods!  *\/$/;"	v
god	religion.h	/^    char *god;$/;"	m	struct:religion_data
god_action	religion.c	/^struct god_action$/;"	s	file:
god_bless	religion.c	/^bool god_bless( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_cleanse	religion.c	/^bool god_cleanse( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_confuse	religion.c	/^bool god_confuse( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_curse	religion.c	/^bool god_curse( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_defy	religion.c	/^bool god_defy( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_enlighten	religion.c	/^bool god_enlighten( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration)$/;"	f
god_fortune	religion.c	/^bool god_fortune( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_haunt	religion.c	/^bool god_haunt( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_heal	religion.c	/^bool god_heal( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_plague	religion.c	/^bool god_plague( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_power	religion.h	/^    int god_power; \/* favor points *\/$/;"	m	struct:religion_data
god_protect	religion.c	/^bool god_protect( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_slow	religion.c	/^bool god_slow( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
god_speed	religion.c	/^bool god_speed( CHAR_DATA *ch, CHAR_DATA *victim, char *god_name, sh_int duration )$/;"	f
godlib_bless	lua_arclib.c	/^static int godlib_bless (lua_State *LS)$/;"	f	file:
godlib_cleanse	lua_arclib.c	/^static int godlib_cleanse (lua_State *LS)$/;"	f	file:
godlib_confuse	lua_arclib.c	/^static int godlib_confuse (lua_State *LS)$/;"	f	file:
godlib_curse	lua_arclib.c	/^static int godlib_curse (lua_State *LS)$/;"	f	file:
godlib_defy	lua_arclib.c	/^static int godlib_defy (lua_State *LS)$/;"	f	file:
godlib_enlighten	lua_arclib.c	/^static int godlib_enlighten (lua_State *LS)$/;"	f	file:
godlib_fortune	lua_arclib.c	/^static int godlib_fortune (lua_State *LS)$/;"	f	file:
godlib_haunt	lua_arclib.c	/^static int godlib_haunt (lua_State *LS)$/;"	f	file:
godlib_heal	lua_arclib.c	/^static int godlib_heal (lua_State *LS)$/;"	f	file:
godlib_helper_get_duration	lua_arclib.c	/^static int godlib_helper_get_duration(lua_State* LS, int index)$/;"	f	file:
godlib_plague	lua_arclib.c	/^static int godlib_plague (lua_State *LS)$/;"	f	file:
godlib_protect	lua_arclib.c	/^static int godlib_protect (lua_State *LS)$/;"	f	file:
godlib_slow	lua_arclib.c	/^static int godlib_slow (lua_State *LS)$/;"	f	file:
godlib_speed	lua_arclib.c	/^static int godlib_speed (lua_State *LS)$/;"	f	file:
going	freeze.c	/^bool going=FALSE;$/;"	v
gold	merc.h	/^	long        gold;$/;"	m	struct:char_data
gold_reward	merc.h	/^   int gold_reward; $/;"	m	struct:achievement_entry
gossip	merc.h	/^	int gossip[3];          \/* {p *\/$/;"	m	struct:pc_data
gossip_text	merc.h	/^	int gossip_text[3];     \/* {P *\/$/;"	m	struct:pc_data
grade	tables.h	/^    char *grade;$/;"	m	struct:pkgrade_type
grant_add	grant.c	/^void grant_add(CHAR_DATA *ch, char *name, DO_FUN *do_fun, int duration, int level)$/;"	f
grant_data	merc.h	/^struct grant_data$/;"	s
grant_duration	grant.c	/^int grant_duration(CHAR_DATA *ch, DO_FUN *do_fun)$/;"	f
grant_level	grant.c	/^void grant_level( CHAR_DATA *ch, CHAR_DATA *victim, int level, int duration )$/;"	f
grant_prayer	religion.c	/^void grant_prayer( CHAR_DATA *ch )$/;"	f
grant_remove	grant.c	/^void grant_remove(CHAR_DATA *ch, DO_FUN *do_fun, bool mshow)$/;"	f
grant_revoke	grant.c	/^void grant_revoke(CHAR_DATA *ch, char *name, DO_FUN *do_fun, bool mshow)$/;"	f
granted	merc.h	/^    GRANT_DATA * granted;$/;"	m	struct:pc_data
gratz	merc.h	/^	int gratz[3];           \/* {z *\/$/;"	m	struct:pc_data
gratz_text	merc.h	/^	int gratz_text[3];      \/* {Z *\/$/;"	m	struct:pc_data
grep_data	grep.c	/^struct grep_data$/;"	s	file:
grep_mob	grep.c	/^void grep_mob( CHAR_DATA *ch, char *argument, int min_vnum, int max_vnum )$/;"	f
grep_obj	grep.c	/^void grep_obj( CHAR_DATA *ch, char *argument, int min_vnum, int max_vnum )$/;"	f
grep_room	grep.c	/^void grep_room( CHAR_DATA *ch, char *argument, int min_vnum, int max_vnum )$/;"	f
group	merc.h	/^	sh_int      group;$/;"	m	struct:char_data
group	merc.h	/^	sh_int      group;$/;"	m	struct:mob_index_data_old
group	merc.h	/^    sh_int      group;$/;"	m	struct:mob_index_data
group_add	skills.c	/^void group_add( CHAR_DATA *ch, const char *name, bool deduct)$/;"	f
group_chosen	merc.h	/^	bool    group_chosen[MAX_GROUP];$/;"	m	struct:gen_data
group_gain	fight.c	/^void group_gain( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
group_known	merc.h	/^    bool        group_known [MAX_GROUP];$/;"	m	struct:pc_data
group_lookup	skills.c	/^int group_lookup( const char *name )$/;"	f
group_remove	skills.c	/^void group_remove(CHAR_DATA *ch, const char *name)$/;"	f
group_table	const.c	/^struct group_type group_table[MAX_GROUP] =$/;"	v	typeref:struct:group_type
group_type	merc.h	/^struct  group_type$/;"	s
gsn	merc.h	/^	sh_int  *gsn;$/;"	m	struct:weapon_type
gsn	merc.h	/^	sh_int *        gsn;$/;"	m	struct:stance_type
gsn_absolute_zero	db.c	/^sh_int  gsn_absolute_zero;$/;"	v
gsn_acid_blast	db.c	/^sh_int  gsn_acid_blast;$/;"	v
gsn_aim	db.c	/^sh_int  gsn_aim;$/;"	v
gsn_alchemy	db.c	/^sh_int  gsn_alchemy;$/;"	v
gsn_alertness	db.c	/^sh_int  gsn_alertness;$/;"	v
gsn_ambidextrous	db.c	/^sh_int  gsn_ambidextrous;$/;"	v
gsn_ambush	db.c	/^sh_int  gsn_ambush;$/;"	v
gsn_anatomy	db.c	/^sh_int  gsn_anatomy;$/;"	v
gsn_anklebiter	db.c	/^sh_int  gsn_anklebiter;$/;"	v
gsn_appraise	db.c	/^sh_int  gsn_appraise;$/;"	v
gsn_arcana	db.c	/^sh_int  gsn_arcana;$/;"	v
gsn_arcane_lore	db.c	/^sh_int	gsn_arcane_lore;$/;"	v
gsn_armor	db.c	/^sh_int  gsn_armor;$/;"	v
gsn_ashura	db.c	/^sh_int  gsn_ashura;$/;"	v
gsn_assassination	db.c	/^sh_int  gsn_assassination;$/;"	v
gsn_astral	db.c	/^sh_int  gsn_astral;$/;"	v
gsn_aversion	db.c	/^sh_int  gsn_aversion;$/;"	v
gsn_avoidance	db.c	/^sh_int  gsn_avoidance;$/;"	v
gsn_axe	db.c	/^sh_int  gsn_axe;$/;"	v
gsn_back_leap	db.c	/^sh_int  gsn_back_leap;$/;"	v
gsn_backstab	db.c	/^sh_int  gsn_backstab;$/;"	v
gsn_bash	db.c	/^sh_int  gsn_bash;$/;"	v
gsn_basic_apparition	db.c	/^sh_int  gsn_basic_apparition;$/;"	v
gsn_bear	db.c	/^sh_int  gsn_bear;$/;"	v
gsn_beast_mastery	db.c	/^sh_int  gsn_beast_mastery;$/;"	v
gsn_beheading	db.c	/^sh_int  gsn_beheading;$/;"	v
gsn_berserk	db.c	/^sh_int  gsn_berserk;$/;"	v
gsn_bite	db.c	/^sh_int  gsn_bite;$/;"	v
gsn_blackjack	db.c	/^sh_int  gsn_blackjack;$/;"	v
gsn_blade_dance	db.c	/^sh_int  gsn_blade_dance;$/;"	v
gsn_bless	db.c	/^sh_int	gsn_bless;$/;"	v
gsn_bless	db.c	/^sh_int  gsn_bless;$/;"	v
gsn_blessed_darkness	db.c	/^sh_int  gsn_blessed_darkness;$/;"	v
gsn_blindfighting	db.c	/^sh_int  gsn_blindfighting;$/;"	v
gsn_blindness	db.c	/^sh_int  gsn_blindness;$/;"	v
gsn_bloodbath	db.c	/^sh_int  gsn_bloodbath;$/;"	v
gsn_boa	db.c	/^sh_int  gsn_boa;$/;"	v
gsn_bodyguard	db.c	/^sh_int  gsn_bodyguard;$/;"	v
gsn_bow	db.c	/^sh_int  gsn_bow;   $/;"	v
gsn_brawl	db.c	/^sh_int  gsn_brawl;$/;"	v
gsn_brutal_damage	db.c	/^sh_int  gsn_brutal_damage;$/;"	v
gsn_bunny	db.c	/^sh_int	gsn_bunny;$/;"	v
gsn_burning_hands	db.c	/^sh_int  gsn_burning_hands;$/;"	v
gsn_burst	db.c	/^sh_int  gsn_burst;$/;"	v
gsn_call_lightning	db.c	/^sh_int  gsn_call_lightning;$/;"	v
gsn_calm	db.c	/^sh_int  gsn_calm;$/;"	v
gsn_camp_fire	db.c	/^sh_int  gsn_camp_fire;$/;"	v
gsn_chain_spell	db.c	/^sh_int  gsn_chain_spell;$/;"	v
gsn_charge	db.c	/^sh_int  gsn_charge;$/;"	v
gsn_charm_person	db.c	/^sh_int  gsn_charm_person;$/;"	v
gsn_choke_hold	db.c	/^sh_int  gsn_choke_hold;$/;"	v
gsn_chop	db.c	/^sh_int  gsn_chop;$/;"	v
gsn_circle	db.c	/^sh_int  gsn_circle;$/;"	v
gsn_climbing	db.c	/^sh_int  gsn_climbing;$/;"	v
gsn_cone_of_exhaustion	db.c	/^sh_int  gsn_cone_of_exhaustion;$/;"	v
gsn_confusion	db.c	/^sh_int  gsn_confusion;$/;"	v
gsn_control_weather	db.c	/^sh_int  gsn_control_weather;$/;"	v
gsn_craft	db.c	/^sh_int  gsn_craft;$/;"	v
gsn_critical	db.c	/^sh_int  gsn_critical;$/;"	v
gsn_crush	db.c	/^sh_int  gsn_crush;$/;"	v
gsn_curse	db.c	/^sh_int  gsn_curse;$/;"	v
gsn_custom_affect	db.c	/^sh_int  gsn_custom_affect;$/;"	v
gsn_dagger	db.c	/^sh_int  gsn_dagger;$/;"	v
gsn_dark_reaping	db.c	/^sh_int  gsn_dark_reaping;$/;"	v
gsn_deaths_door	db.c	/^sh_int  gsn_deaths_door;$/;"	v
gsn_decompose	db.c	/^sh_int  gsn_decompose;$/;"	v
gsn_detoxify	db.c	/^sh_int  gsn_detoxify;$/;"	v
gsn_dimensional_blade	db.c	/^sh_int  gsn_dimensional_blade;$/;"	v
gsn_dirt	db.c	/^sh_int  gsn_dirt;$/;"	v
gsn_disarm	db.c	/^sh_int  gsn_disarm;$/;"	v
gsn_disarm_trap	db.c	/^sh_int  gsn_disarm_trap;$/;"	v
gsn_disguise	db.c	/^sh_int  gsn_disguise;$/;"	v
gsn_distract	db.c	/^sh_int  gsn_distract;$/;"	v
gsn_dodge	db.c	/^sh_int  gsn_dodge;$/;"	v
gsn_double_strike	db.c	/^sh_int  gsn_double_strike;$/;"	v
gsn_dowsing	db.c	/^sh_int  gsn_dowsing;$/;"	v
gsn_dragon	db.c	/^sh_int  gsn_dragon;$/;"	v
gsn_drain_life	db.c	/^sh_int  gsn_drain_life;$/;"	v
gsn_drunken_fury	db.c	/^sh_int  gsn_drunken_fury;$/;"	v
gsn_dual_axe	db.c	/^sh_int  gsn_dual_axe;$/;"	v
gsn_dual_dagger	db.c	/^sh_int  gsn_dual_dagger;$/;"	v
gsn_dual_gun	db.c	/^sh_int  gsn_dual_gun;$/;"	v
gsn_dual_sword	db.c	/^sh_int  gsn_dual_sword;$/;"	v
gsn_dual_wield	db.c	/^sh_int  gsn_dual_wield;$/;"	v
gsn_duck	db.c	/^sh_int  gsn_duck;$/;"	v
gsn_eagle	db.c	/^sh_int  gsn_eagle;$/;"	v
gsn_eel	db.c	/^sh_int  gsn_eel;$/;"	v
gsn_electrocution	db.c	/^sh_int  gsn_electrocution;$/;"	v
gsn_elemental_blade	db.c	/^sh_int  gsn_elemental_blade;$/;"	v
gsn_elude	db.c	/^sh_int  gsn_elude;$/;"	v
gsn_empower_spell	db.c	/^sh_int  gsn_empower_spell;$/;"	v
gsn_enchant_armor	db.c	/^sh_int  gsn_enchant_armor;$/;"	v
gsn_enchant_arrow	db.c	/^sh_int  gsn_enchant_arrow;$/;"	v
gsn_enchant_weapon	db.c	/^sh_int  gsn_enchant_weapon;$/;"	v
gsn_endurance	db.c	/^sh_int  gsn_endurance;$/;"	v
gsn_enhanced_damage	db.c	/^sh_int  gsn_enhanced_damage;$/;"	v
gsn_entrapment	db.c	/^sh_int	gsn_entrapment;$/;"	v
gsn_envenom	db.c	/^sh_int  gsn_envenom;$/;"	v
gsn_epidemic	db.c	/^sh_int  gsn_epidemic;$/;"	v
gsn_estimate	db.c	/^sh_int  gsn_estimate;$/;"	v
gsn_evasion	db.c	/^sh_int  gsn_evasion;$/;"	v
gsn_evasive	db.c	/^sh_int  gsn_evasive;$/;"	v
gsn_extend_spell	db.c	/^sh_int  gsn_extend_spell;$/;"	v
gsn_extra_attack	db.c	/^sh_int  gsn_extra_attack;$/;"	v
gsn_fade	db.c	/^sh_int  gsn_fade;$/;"	v
gsn_fast_healing	db.c	/^sh_int  gsn_fast_healing;$/;"	v
gsn_fatal_blow	db.c	/^sh_int  gsn_fatal_blow;$/;"	v
gsn_fear	db.c	/^sh_int  gsn_fear;$/;"	v
gsn_feeblemind	db.c	/^sh_int  gsn_feeblemind;$/;"	v
gsn_feint	db.c	/^sh_int  gsn_feint;$/;"	v
gsn_fervent_rage	db.c	/^sh_int  gsn_fervent_rage;$/;"	v
gsn_fervent_rage_cooldown	db.c	/^sh_int  gsn_fervent_rage_cooldown;$/;"	v
gsn_finesse	db.c	/^sh_int  gsn_finesse;$/;"	v
gsn_fire_breath	db.c	/^sh_int  gsn_fire_breath;$/;"	v
gsn_firewitchs_seance	db.c	/^sh_int  gsn_firewitchs_seance;$/;"	v
gsn_firstaid	db.c	/^sh_int  gsn_firstaid;$/;"	v
gsn_fishing	db.c	/^sh_int  gsn_fishing;$/;"	v
gsn_flail	db.c	/^sh_int  gsn_flail;$/;"	v
gsn_flanking	db.c	/^sh_int  gsn_flanking;$/;"	v
gsn_fledging	db.c	/^sh_int  gsn_fledging;$/;"	v
gsn_flee	db.c	/^sh_int	gsn_flee;$/;"	v
gsn_fly	db.c	/^sh_int  gsn_fly;$/;"	v
gsn_focus	db.c	/^sh_int  gsn_focus;$/;"	v
gsn_forage	db.c	/^sh_int  gsn_forage;$/;"	v
gsn_fullauto	db.c	/^sh_int  gsn_fullauto;$/;"	v
gsn_giant_strength	db.c	/^sh_int  gsn_giant_strength;$/;"	v
gsn_giantfeller	db.c	/^sh_int  gsn_giantfeller;$/;"	v
gsn_goblincleaver	db.c	/^sh_int  gsn_goblincleaver;$/;"	v
gsn_god_bless	db.c	/^sh_int  gsn_god_bless;$/;"	v
gsn_god_curse	db.c	/^sh_int  gsn_god_curse;$/;"	v
gsn_gouge	db.c	/^sh_int  gsn_gouge;$/;"	v
gsn_guard	db.c	/^sh_int  gsn_guard;$/;"	v
gsn_gun	db.c	/^sh_int  gsn_gun;   $/;"	v
gsn_haggle	db.c	/^sh_int  gsn_haggle;$/;"	v
gsn_hailstorm	db.c	/^sh_int  gsn_hailstorm;$/;"	v
gsn_hand_to_hand	db.c	/^sh_int  gsn_hand_to_hand;$/;"	v
gsn_haste	db.c	/^sh_int  gsn_haste;$/;"	v
gsn_headbutt	db.c	/^sh_int  gsn_headbutt;$/;"	v
gsn_hide	db.c	/^sh_int  gsn_hide;$/;"	v
gsn_hogtie	db.c	/^sh_int  gsn_hogtie;$/;"	v
gsn_holy_apparition	db.c	/^sh_int  gsn_holy_apparition;$/;"	v
gsn_hunt	db.c	/^sh_int  gsn_hunt;     $/;"	v
gsn_hurl	db.c	/^sh_int  gsn_hurl;$/;"	v
gsn_ignite	db.c	/^sh_int  gsn_ignite;$/;"	v
gsn_immolation	db.c	/^sh_int  gsn_immolation;$/;"	v
gsn_infectious_arrow	db.c	/^sh_int  gsn_infectious_arrow;$/;"	v
gsn_inquisition	db.c	/^sh_int  gsn_inquisition;$/;"	v
gsn_inspiring_song	db.c	/^sh_int  gsn_inspiring_song;$/;"	v
gsn_intimidation	db.c	/^sh_int  gsn_intimidation;$/;"	v
gsn_introspection	db.c	/^sh_int  gsn_introspection;$/;"	v
gsn_invis	db.c	/^sh_int  gsn_invis;$/;"	v
gsn_iron_hide	db.c	/^sh_int  gsn_iron_hide;$/;"	v
gsn_jihad	db.c	/^sh_int  gsn_jihad;$/;"	v
gsn_jump_up	db.c	/^sh_int  gsn_jump_up;$/;"	v
gsn_kamikaze	db.c	/^sh_int	gsn_kamikaze;$/;"	v
gsn_kick	db.c	/^sh_int  gsn_kick;$/;"	v
gsn_korinns_inspiration	db.c	/^sh_int  gsn_korinns_inspiration;$/;"	v
gsn_kung_fu	db.c	/^sh_int  gsn_kung_fu;$/;"	v
gsn_laughing_fit	db.c	/^sh_int  gsn_laughing_fit;$/;"	v
gsn_leadership	db.c	/^sh_int  gsn_leadership;$/;"	v
gsn_leg_sweep	db.c	/^sh_int  gsn_leg_sweep;$/;"	v
gsn_lightning_bolt	db.c	/^sh_int  gsn_lightning_bolt;$/;"	v
gsn_lion	db.c	/^sh_int  gsn_lion;$/;"	v
gsn_lore	db.c	/^sh_int  gsn_lore;$/;"	v
gsn_mace	db.c	/^sh_int  gsn_mace;$/;"	v
gsn_magic_missile	db.c	/^sh_int  gsn_magic_missile;$/;"	v
gsn_mana_shield	db.c	/^sh_int  gsn_mana_shield;$/;"	v
gsn_mass_combat	db.c	/^sh_int  gsn_mass_combat;$/;"	v
gsn_mass_confusion	db.c	/^sh_int  gsn_mass_confusion;$/;"	v
gsn_mass_invis	db.c	/^sh_int  gsn_mass_invis;$/;"	v
gsn_maul	db.c	/^sh_int  gsn_maul;$/;"	v
gsn_meditation	db.c	/^sh_int  gsn_meditation;$/;"	v
gsn_melee	db.c	/^sh_int  gsn_melee;$/;"	v
gsn_meteor_swarm	db.c	/^sh_int  gsn_meteor_swarm;$/;"	v
gsn_mimic	db.c	/^sh_int  gsn_mimic;$/;"	v
gsn_mindflay	db.c	/^sh_int  gsn_mindflay;$/;"	v
gsn_minor_fade	db.c	/^sh_int  gsn_minor_fade;$/;"	v
gsn_mirror_image	db.c	/^sh_int  gsn_mirror_image;$/;"	v
gsn_monsoon	db.c	/^sh_int  gsn_monsoon;$/;"	v
gsn_mug	db.c	/^sh_int  gsn_mug;$/;"	v
gsn_natural_resistance	db.c	/^sh_int  gsn_natural_resistance;$/;"	v
gsn_necrosis	db.c	/^sh_int  gsn_necrosis;$/;"	v
gsn_net	db.c	/^sh_int  gsn_net;$/;"	v
gsn_overcharge	db.c	/^sh_int  gsn_overcharge;$/;"	v
gsn_parademias_bile	db.c	/^sh_int  gsn_parademias_bile;$/;"	v
gsn_paralysis_poison	db.c	/^sh_int  gsn_paralysis_poison;$/;"	v
gsn_paroxysm	db.c	/^sh_int  gsn_paroxysm;$/;"	v
gsn_paroxysm_cooldown	db.c	/^sh_int  gsn_paroxysm_cooldown;$/;"	v
gsn_parry	db.c	/^sh_int  gsn_parry;$/;"	v
gsn_pathfind	db.c	/^sh_int  gsn_pathfind;$/;"	v
gsn_peek	db.c	/^sh_int  gsn_peek;$/;"	v
gsn_peel	db.c	/^sh_int  gsn_peel;$/;"	v
gsn_petrify	db.c	/^sh_int  gsn_petrify;$/;"	v
gsn_phantasmal_image	db.c	/^sh_int  gsn_phantasmal_image;$/;"	v
gsn_phase	db.c	/^sh_int  gsn_phase;$/;"	v
gsn_phoenix	db.c	/^sh_int  gsn_phoenix;$/;"	v
gsn_pick_lock	db.c	/^sh_int  gsn_pick_lock;$/;"	v
gsn_pistol_whip	db.c	/^sh_int  gsn_pistol_whip;$/;"	v
gsn_plague	db.c	/^sh_int  gsn_plague;$/;"	v
gsn_poison	db.c	/^sh_int  gsn_poison;$/;"	v
gsn_polearm	db.c	/^sh_int  gsn_polearm;$/;"	v
gsn_porcupine	db.c	/^sh_int  gsn_porcupine;$/;"	v
gsn_power_thrust	db.c	/^sh_int  gsn_power_thrust;$/;"	v
gsn_prayer	db.c	/^sh_int	gsn_prayer;$/;"	v
gsn_prot_magic	db.c	/^sh_int  gsn_prot_magic;$/;"	v
gsn_puncture	db.c	/^sh_int  gsn_puncture;$/;"	v
gsn_puppetry	db.c	/^sh_int  gsn_puppetry;$/;"	v
gsn_quick_draw	db.c	/^sh_int  gsn_quick_draw;$/;"	v
gsn_quicken_spell	db.c	/^sh_int  gsn_quicken_spell;$/;"	v
gsn_quirkys_insanity	db.c	/^sh_int  gsn_quirkys_insanity;$/;"	v
gsn_quivering_palm	db.c	/^sh_int  gsn_quivering_palm;$/;"	v
gsn_raft	db.c	/^sh_int  gsn_raft;  $/;"	v
gsn_rage	db.c	/^sh_int  gsn_rage;$/;"	v
gsn_razor_claws	db.c	/^sh_int  gsn_razor_claws;$/;"	v
gsn_recall	db.c	/^sh_int  gsn_recall;$/;"	v
gsn_reflection	db.c	/^sh_int  gsn_reflection;$/;"	v
gsn_regeneration	db.c	/^sh_int  gsn_regeneration;$/;"	v
gsn_replenish	db.c	/^sh_int  gsn_replenish;$/;"	v
gsn_replenish_cooldown	db.c	/^sh_int  gsn_replenish_cooldown;$/;"	v
gsn_rescue	db.c	/^sh_int  gsn_rescue;$/;"	v
gsn_retreat	db.c	/^sh_int	gsn_retreat;$/;"	v
gsn_retribution	db.c	/^sh_int  gsn_retribution;$/;"	v
gsn_rhino	db.c	/^sh_int  gsn_rhino;$/;"	v
gsn_ritual	db.c	/^sh_int  gsn_ritual;$/;"	v
gsn_round_swing	db.c	/^sh_int  gsn_round_swing;$/;"	v
gsn_roundhouse	db.c	/^sh_int  gsn_roundhouse;$/;"	v
gsn_rupture	db.c	/^sh_int  gsn_rupture;$/;"	v
gsn_rustle_grub	db.c	/^sh_int  gsn_rustle_grub;$/;"	v
gsn_sanctuary	db.c	/^sh_int  gsn_sanctuary;$/;"	v
gsn_scorpion	db.c	/^sh_int  gsn_scorpion;$/;"	v
gsn_scribe	db.c	/^sh_int  gsn_scribe;$/;"	v
gsn_scrolls	db.c	/^sh_int  gsn_scrolls;$/;"	v
gsn_second_attack	db.c	/^sh_int  gsn_second_attack;$/;"	v
gsn_semiauto	db.c	/^sh_int  gsn_semiauto;$/;"	v
gsn_serpent	db.c	/^sh_int  gsn_serpent;$/;"	v
gsn_set_snare	db.c	/^sh_int  gsn_set_snare;$/;"	v
gsn_shadow_shroud	db.c	/^sh_int  gsn_shadow_shroud;$/;"	v
gsn_shadowclaw	db.c	/^sh_int  gsn_shadowclaw;$/;"	v
gsn_shadowessence	db.c	/^sh_int  gsn_shadowessence;$/;"	v
gsn_shadowsoul	db.c	/^sh_int  gsn_shadowsoul;$/;"	v
gsn_shadowwalk	db.c	/^sh_int  gsn_shadowwalk;$/;"	v
gsn_shan_ya	db.c	/^sh_int  gsn_shan_ya;$/;"	v
gsn_sharp_shooting	db.c	/^sh_int  gsn_sharp_shooting;$/;"	v
gsn_shelter	db.c	/^sh_int  gsn_shelter;$/;"	v
gsn_shield_bash	db.c	/^sh_int  gsn_shield_bash;$/;"	v
gsn_shield_block	db.c	/^sh_int  gsn_shield_block;$/;"	v
gsn_shoot_lock	db.c	/^sh_int  gsn_shoot_lock;$/;"	v
gsn_showdown	db.c	/^sh_int  gsn_showdown;$/;"	v
gsn_shroud_of_darkness	db.c	/^sh_int  gsn_shroud_of_darkness;$/;"	v
gsn_slash_throat	db.c	/^sh_int  gsn_slash_throat;$/;"	v
gsn_sleep	db.c	/^sh_int  gsn_sleep;$/;"	v
gsn_slow	db.c	/^sh_int  gsn_slow;$/;"	v
gsn_smite	db.c	/^sh_int  gsn_smite;$/;"	v
gsn_smotes_anachronism	db.c	/^sh_int  gsn_smotes_anachronism;$/;"	v
gsn_sneak	db.c	/^sh_int  gsn_sneak;$/;"	v
gsn_snipe	db.c	/^sh_int  gsn_snipe;$/;"	v
gsn_solar_flare	db.c	/^sh_int  gsn_solar_flare;$/;"	v
gsn_soothe	db.c	/^sh_int  gsn_soothe;$/;"	v
gsn_spear	db.c	/^sh_int  gsn_spear;$/;"	v
gsn_spit	db.c	/^sh_int  gsn_spit;$/;"	v
gsn_stalk	db.c	/^sh_int  gsn_stalk;$/;"	v
gsn_staves	db.c	/^sh_int  gsn_staves;$/;"	v
gsn_steal	db.c	/^sh_int  gsn_steal;$/;"	v
gsn_strafe	db.c	/^sh_int  gsn_strafe;$/;"	v
gsn_streetwise	db.c	/^sh_int  gsn_streetwise;$/;"	v
gsn_survey	db.c	/^sh_int  gsn_survey;$/;"	v
gsn_sustenance	db.c	/^sh_int  gsn_sustenance;   $/;"	v
gsn_swaydes_mercy	db.c	/^sh_int  gsn_swaydes_mercy;$/;"	v
gsn_swimming	db.c	/^sh_int  gsn_swimming;$/;"	v
gsn_sword	db.c	/^sh_int  gsn_sword;$/;"	v
gsn_tame	db.c	/^sh_int  gsn_tame;$/;"	v
gsn_target_practice	db.c	/^sh_int  gsn_target_practice;$/;"	v
gsn_taxidermy	db.c	/^sh_int  gsn_taxidermy;$/;"	v
gsn_tempest	db.c	/^sh_int  gsn_tempest;$/;"	v
gsn_third_attack	db.c	/^sh_int  gsn_third_attack;$/;"	v
gsn_thousand_yard_stare	db.c	/^sh_int  gsn_thousand_yard_stare;$/;"	v
gsn_tiger	db.c	/^sh_int  gsn_tiger;$/;"	v
gsn_tight_grouping	db.c	/^sh_int  gsn_tight_grouping;$/;"	v
gsn_toad	db.c	/^sh_int  gsn_toad;$/;"	v
gsn_tomb_rot	db.c	/^sh_int  gsn_tomb_rot;$/;"	v
gsn_torch	db.c	/^sh_int  gsn_torch;$/;"	v
gsn_tortoise	db.c	/^sh_int  gsn_tortoise;$/;"	v
gsn_treat_weapon	db.c	/^sh_int  gsn_treat_weapon;$/;"	v
gsn_trip	db.c	/^sh_int  gsn_trip;$/;"	v
gsn_true_grit	db.c	/^sh_int  gsn_true_grit;$/;"	v
gsn_tumbling	db.c	/^sh_int  gsn_tumbling;$/;"	v
gsn_two_handed	db.c	/^sh_int  gsn_two_handed;$/;"	v
gsn_unearth	db.c	/^sh_int  gsn_unearth;$/;"	v
gsn_unicorn	db.c	/^sh_int  gsn_unicorn;$/;"	v
gsn_unjam	db.c	/^sh_int  gsn_unjam;$/;"	v
gsn_uppercut	db.c	/^sh_int  gsn_uppercut;$/;"	v
gsn_vampire_hunting	db.c	/^sh_int  gsn_vampire_hunting;$/;"	v
gsn_vampiric_bite	db.c	/^sh_int  gsn_vampiric_bite;$/;"	v
gsn_venom_bite	db.c	/^sh_int  gsn_venom_bite;$/;"	v
gsn_wands	db.c	/^sh_int  gsn_wands;$/;"	v
gsn_war_cry	db.c	/^sh_int  gsn_war_cry;$/;"	v
gsn_weapons_lore	db.c	/^sh_int  gsn_weapons_lore;$/;"	v
gsn_wendigo	db.c	/^sh_int  gsn_wendigo;$/;"	v
gsn_werewolf_hunting	db.c	/^sh_int  gsn_werewolf_hunting;$/;"	v
gsn_whip	db.c	/^sh_int  gsn_whip;$/;"	v
gsn_wish	db.c	/^sh_int  gsn_wish;$/;"	v
gsn_witch_hunting	db.c	/^sh_int  gsn_witch_hunting;$/;"	v
gsn_woodland_combat	db.c	/^sh_int  gsn_woodland_combat;$/;"	v
gsn_word_of_recall	db.c	/^sh_int  gsn_word_of_recall;$/;"	v
gsn_wrist_shield	db.c	/^sh_int  gsn_wrist_shield;$/;"	v
gsn_zombie_breath	db.c	/^sh_int  gsn_zombie_breath;$/;"	v
gsn_zone_of_damnation	db.c	/^sh_int  gsn_zone_of_damnation;$/;"	v
gtell	merc.h	/^	int gtell[3];           \/* {3 *\/$/;"	m	struct:pc_data
gtell_history	merc.h	/^	PERS_HISTORY *gtell_history;$/;"	m	struct:pc_data
gtell_text	merc.h	/^	int gtell_text[3];      \/* {4 *\/$/;"	m	struct:pc_data
guard_vnum	religion.h	/^    int guard_vnum;$/;"	m	struct:religion_data
guild	merc.h	/^    sh_int  guild[MAX_GUILD];   \/* Vnum of guild rooms      *\/$/;"	m	struct:class_type
had_free	recycle.c	/^HELP_AREA * had_free;$/;"	v
had_list	db.c	/^HELP_AREA *     had_list;$/;"	v
haggle_cost	act_obj.c	/^int haggle_cost( CHAR_DATA *ch, int cost, int base_cost )$/;"	f
hall	merc.h	/^    sh_int   hall;              \/* Recall room *\/$/;"	m	struct:clan_data
handle_arrow_shot	fight.c	/^void handle_arrow_shot( CHAR_DATA *ch, CHAR_DATA *victim, bool hit )$/;"	f
handle_con_note_expire	board.c	/^void handle_con_note_expire(DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_finish	board.c	/^void handle_con_note_finish (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_subject	board.c	/^void handle_con_note_subject (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_text	board.c	/^void handle_con_note_text (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_con_note_to	board.c	/^void handle_con_note_to (DESCRIPTOR_DATA *d, char * argument)$/;"	f
handle_death	fight.c	/^void handle_death( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
handle_player_save	simsave.c	/^void handle_player_save()$/;"	f
has_affect	grep.c	/^bool has_affect( OBJ_INDEX_DATA *obj, int loc, char *msg )$/;"	f
has_focus_obj	magic.c	/^bool has_focus_obj( CHAR_DATA *ch )$/;"	f
has_item	mob_prog.c	/^bool has_item( CHAR_DATA *ch, int vnum, int item_type, bool fWear )$/;"	f
has_item_in_container	mob_prog.c	/^bool has_item_in_container( CHAR_DATA *ch, int vnum, char *obj_name )$/;"	f
has_key	act_move.c	/^bool has_key( CHAR_DATA *ch, int key )$/;"	f
has_mp_trigger_vnum	mob_prog.c	/^bool has_mp_trigger_vnum( CHAR_DATA *mob, int trigger, int vnum )$/;"	f
has_mprog	grep.c	/^bool has_mprog( MOB_INDEX_DATA *mob, int vnum )$/;"	f
has_oprog	grep.c	/^bool has_oprog( OBJ_INDEX_DATA *obj, int vnum )$/;"	f
has_prev_reset	olc.c	/^bool has_prev_reset( ROOM_INDEX_DATA *room, char command, int vnum, int insert_loc )$/;"	f
has_race_skill	skills.c	/^bool has_race_skill( int skill, int rn )$/;"	f
has_special	grep.c	/^bool has_special( MOB_INDEX_DATA *mob, char *spec_name, char *msg )$/;"	f
has_spell	grep.c	/^bool has_spell( OBJ_INDEX_DATA *obj, int ID )$/;"	f
hash_add_mob	vshift.c	/^void hash_add_mob( MOB_INDEX_DATA *target )$/;"	f
hash_add_obj	vshift.c	/^void hash_add_obj( OBJ_INDEX_DATA *target )$/;"	f
hash_add_room	vshift.c	/^void hash_add_room( ROOM_INDEX_DATA *target )$/;"	f
hash_enter	hunt.c	/^int hash_enter(struct hash_header *ht,int key,void *data)$/;"	f
hash_find	hunt.c	/^void *hash_find(struct hash_header *ht,int key)$/;"	f
hash_header	hunt.c	/^struct hash_header$/;"	s	file:
hash_iterate	hunt.c	/^void hash_iterate(struct hash_header *ht,void (*func)(),void *cdata)$/;"	f
hash_link	hunt.c	/^struct hash_link$/;"	s	file:
hash_remove	hunt.c	/^void *hash_remove(struct hash_header *ht,int key)$/;"	f
hash_remove_mob	vshift.c	/^void hash_remove_mob( MOB_INDEX_DATA *target )$/;"	f
hash_remove_obj	vshift.c	/^void hash_remove_obj( OBJ_INDEX_DATA *target )$/;"	f
hash_remove_room	vshift.c	/^void hash_remove_room( ROOM_INDEX_DATA *target )$/;"	f
haunt	lua_arclib.c	/^GODLIBHELP_DURATION( haunt );$/;"	v
head	merc.h	/^	PERS_ENTRY *head;$/;"	m	struct:pers_comm_history
head	merc.h	/^    COMM_ENTRY *head; \/* most recent *\/$/;"	m	struct:comm_history_type
heal	lua_arclib.c	/^GODLIBHELP_DURATION( heal );$/;"	v
heal_rate	merc.h	/^    sh_int      heal_rate;$/;"	m	struct:room_index_data
hedit	olc.c	/^void hedit( CHAR_DATA *ch, char *argument)$/;"	f
hedit_create	olc.h	/^DECLARE_OLC_FUN( hedit_create    );$/;"	v
hedit_delete	olc.h	/^DECLARE_OLC_FUN( hedit_delete    );$/;"	v
hedit_desc	olc.h	/^DECLARE_OLC_FUN( hedit_desc      );$/;"	v
hedit_keywords	olc.h	/^DECLARE_OLC_FUN( hedit_keywords  );$/;"	v
hedit_level	olc.h	/^DECLARE_OLC_FUN( hedit_level     );$/;"	v
hedit_show	olc.h	/^DECLARE_OLC_FUN( hedit_show      );$/;"	v
hedit_table	olc.c	/^const struct olc_cmd_type hedit_table[] =$/;"	v	typeref:struct:olc_cmd_type
help	mob_cmds.h	/^    char * const        help;$/;"	m	struct:mob_cmd_type
help	tables.h	/^	char * help;$/;"	m	struct:bit_type
help_area_data	merc.h	/^struct help_area_data$/;"	s
help_data	merc.h	/^struct  help_data$/;"	s
help_first	db.c	/^HELP_DATA *     help_first;$/;"	v
help_greeting	db.c	/^char *          help_greeting;$/;"	v
help_last	db.c	/^HELP_DATA *     help_last;$/;"	v
help_last	mem.c	/^HELP_DATA		*	help_last;$/;"	v
help_table	olc_act.c	/^const struct olc_help_type help_table[] =$/;"	v	typeref:struct:olc_help_type
helper_visible	handler.c	/^bool helper_visible = FALSE;$/;"	v
helps	merc.h	/^        HELP_AREA * helps;$/;"	m	struct:area_data
herb_table	alchemy.c	/^struct herb_type herb_table[] =$/;"	v	typeref:struct:herb_type
herb_type	alchemy.c	/^struct herb_type$/;"	s	file:
herb_vnum	alchemy.c	/^    int herb_vnum[MAX_HERB];$/;"	m	struct:recipe_type	file:
hh	merc.h	1170;"	d
highest_level	merc.h	/^    sh_int      highest_level; \/* highest level reached during current remort *\/$/;"	m	struct:pc_data
hint	smith.c	/^    char * const    hint;$/;"	m	struct:smith_arg	file:
history_stats	merc.h	/^    sh_int      history_stats[MAX_STATS];$/;"	m	struct:pc_data
hit	merc.h	/^	int         hit[3];$/;"	m	struct:mob_index_data_old
hit	merc.h	/^	int      hit;$/;"	m	struct:char_data
hit_gain	update.c	/^int hit_gain( CHAR_DATA *ch )$/;"	f
hitpoint_percent	merc.h	/^    sh_int      hitpoint_percent;$/;"	m	struct:mob_index_data
hitroll	merc.h	/^	sh_int      hitroll;$/;"	m	struct:char_data
hitroll	merc.h	/^	sh_int      hitroll;$/;"	m	struct:mob_index_data_old
hitroll_percent	merc.h	/^    sh_int      hitroll_percent;$/;"	m	struct:mob_index_data
host	merc.h	/^	char *      host;$/;"	m	struct:descriptor_data
hour	merc.h	/^	int     hour;$/;"	m	struct:time_info_data
hp_gain	merc.h	/^    sh_int  hp_gain;$/;"	m	struct:class_type
hunt_fail_chance	hunt.c	/^int hunt_fail_chance(int skill, int distance, int mastery)$/;"	f
hunt_max_distance	hunt.c	/^int hunt_max_distance(int skill, int mastery)$/;"	f
hunt_victim	hunt.c	/^void hunt_victim( CHAR_DATA *ch )$/;"	f
hunting	merc.h	/^	char *hunting;$/;"	m	struct:char_data
hunting_data	hunt.c	/^struct hunting_data$/;"	s	file:
i_flag_bits_name	handler.c	/^char* i_flag_bits_name( struct flag_type flag_table[], long flag )$/;"	f
i_flag_string	bit.c	/^char *i_flag_string( const struct flag_type *flag_table, long bits )$/;"	f
id	merc.h	/^	long        id;$/;"	m	struct:char_data
id	merc.h	/^    int     id;     $/;"	m	struct:mem_data
id	merc.h	/^    int id;$/;"	m	struct:quest_data
ignore_invisible	handler.c	/^bool ignore_invisible = FALSE; \/\/ hunt etc.$/;"	v
ii	merc.h	1171;"	d
imm	merc.h	/^	tflag    imm;            \/* imm bits for the race *\/$/;"	m	struct:race_type
imm_bit_name	handler.c	/^char* imm_bit_name( int flag )$/;"	f
imm_bits_name	handler.c	/^char* imm_bits_name( tflag flag )$/;"	f
imm_flags	merc.h	/^	tflag        imm_flags;$/;"	m	struct:char_data
imm_flags	merc.h	/^	tflag        imm_flags;$/;"	m	struct:mob_index_data_old
imm_flags	merc.h	/^    tflag       imm_flags;$/;"	m	struct:mob_index_data
imm_flags	tables.c	/^const struct flag_type imm_flags[] =$/;"	v	typeref:struct:flag_type
imm_level	merc.h	/^    sh_int imm_level;             \/* Level of imm applying penalty *\/$/;"	m	struct:penalty_data
imm_name	merc.h	/^    char *imm_name;               \/* Name of imm applying penalty *\/$/;"	m	struct:penalty_data
imm_name	merc.h	/^   char   *imm_name; \/* Immortal that convicted or forgave the player *\/$/;"	m	struct:crime_data
immtalk	merc.h	/^	int immtalk[3];         \/* {i *\/$/;"	m	struct:pc_data
immtalk_history	playback.c	/^COMM_HISTORY immtalk_history={0, NULL, NULL};$/;"	v
immtalk_text	merc.h	/^	int immtalk_text[3];    \/* {I *\/$/;"	m	struct:pc_data
imposed_time	merc.h	/^    long imposed_time;            \/* Actual date\/time penalty was imposed *\/$/;"	m	struct:penalty_data
in_donation_room	act_obj.c	/^bool in_donation_room(OBJ_DATA *obj)$/;"	f
in_obj	merc.h	/^	OBJ_DATA *      in_obj;$/;"	m	struct:obj_data
in_pkill_battle	fight.c	/^bool in_pkill_battle( CHAR_DATA *ch )$/;"	f
in_progress	merc.h	/^    NOTE_DATA *   in_progress;$/;"	m	struct:pc_data
in_religion_war	warfare.c	/^bool in_religion_war( CHAR_DATA *ch )$/;"	f
in_room	merc.h	/^	ROOM_INDEX_DATA *   in_room;$/;"	m	struct:char_data
in_room	merc.h	/^	ROOM_INDEX_DATA *   in_room;$/;"	m	struct:obj_data
inactive	merc.h	/^	int     inactive;$/;"	m	struct:descriptor_data
inbuf	merc.h	/^	char        inbuf       [MAX_PROTOCOL_BUFFER];$/;"	m	struct:descriptor_data
incmpl	merc.h	/^        bool incmpl;\/* whether incomplete was detected *\/$/;"	m	struct:descriptor_data::__anon4
incog_level	merc.h	/^	sh_int      incog_level;$/;"	m	struct:char_data
incomm	merc.h	/^	char        incomm      [MAX_INPUT_LENGTH];$/;"	m	struct:descriptor_data
index	lua_arclib.h	/^    int (*index)();$/;"	m	struct:lua_obj_type
index_lookup	lookup.c	/^int index_lookup(const int bit, const struct flag_type *flag_table)$/;"	f
index_mobile	db.c	/^void index_mobile( MOB_INDEX_DATA *pMobIndex )$/;"	f
infinite_loop_check_hook	lua_main.c	/^static void infinite_loop_check_hook( lua_State *LS, lua_Debug *ar)$/;"	f	file:
info	merc.h	/^	int info[3];            \/* {1 *\/$/;"	m	struct:pc_data
info_message	act_comm.c	/^void info_message( CHAR_DATA *ch, char *argument, bool show_to_char )$/;"	f
info_message_new	act_comm.c	/^void info_message_new( CHAR_DATA *ch, char *argument, bool show_to_char,$/;"	f
info_text	merc.h	/^	int info_text[3];       \/* {2 *\/$/;"	m	struct:pc_data
init_by_array	mt19937ar.c	/^void init_by_array(unsigned long init_key[], int key_length)$/;"	f
init_descriptor	comm.c	/^void init_descriptor( int control )$/;"	f
init_genrand	mt19937ar.c	/^void init_genrand(unsigned long s)$/;"	f
init_hash_table	hunt.c	/^void init_hash_table(struct hash_header *ht,int rec_size,int table_size)$/;"	f
init_mm	db.c	/^void init_mm( )$/;"	f
init_socket	comm.c	/^int init_socket( u_short port )$/;"	f
init_world	hunt.c	/^void init_world(ROOM_INDEX_DATA *room_db[])$/;"	f
initiator_name	merc.h	/^   char *initiator_name;  \/* Person initiating war                     *\/$/;"	m	struct:clanwar_data
initiator_rank	merc.h	/^   sh_int initiator_rank; \/* Rank of person initiating war             *\/$/;"	m	struct:clanwar_data
inlast	merc.h	/^	char        inlast      [MAX_INPUT_LENGTH];$/;"	m	struct:descriptor_data
insert_die	stats.c	/^void insert_die(CHAR_DATA *ch, int die)$/;"	f
install_other_handlers	comm.c	/^void install_other_handlers ()$/;"	f
int_app_field	stats.c	/^int int_app_field(int x)$/;"	f
int_app_learn	stats.c	/^int int_app_learn(int x)$/;"	f
interpolate	db.c	/^int interpolate( int level, int value_00, int value_maxL )$/;"	f
interpret	interp.c	/^void interpret( CHAR_DATA *ch, char *argument )$/;"	f
interpret	merc.h	/^        bool interpret; \/* Whether in lua interpreter mode *\/$/;"	m	struct:descriptor_data::__anon4
invis	merc.h	/^    bool invis;$/;"	m	struct:comm_history_entry
invis_level	merc.h	/^	sh_int      invis_level;$/;"	m	struct:char_data
invitation	merc.h	/^    char *      invitation[MAX_CLAN];$/;"	m	struct:pc_data
invitation_only	merc.h	/^    bool     invitation_only;   \/* Is the clan invitation only? *\/$/;"	m	struct:clan_data
is	lua_arclib.h	/^    bool (*is)();$/;"	m	struct:lua_obj_type
is_affect_cap_hard	grep.c	/^bool is_affect_cap_hard( int location )$/;"	f
is_affected	handler.c	/^bool is_affected( CHAR_DATA *ch, int sn )$/;"	f
is_affected_parse	mob_prog.c	/^bool is_affected_parse( CHAR_DATA *ch, char *buf )$/;"	f
is_aggro_room	magic.c	/^bool is_aggro_room( ROOM_INDEX_DATA *room, CHAR_DATA *victim )$/;"	f
is_always_safe	fight.c	/^bool is_always_safe( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_area_ingame	grep.c	/^bool is_area_ingame( AREA_DATA *area )$/;"	f
is_basic_stat	grep.c	/^bool is_basic_stat( int location )$/;"	f
is_blindness	magic.c	/^bool is_blindness( int sn )$/;"	f
is_calm	fight.c	/^bool is_calm( CHAR_DATA *ch )$/;"	f
is_ch_name	handler.c	/^bool is_ch_name( char *str, CHAR_DATA *ch, bool exact, CHAR_DATA *viewer )$/;"	f
is_clan	handler.c	/^bool is_clan(CHAR_DATA *ch)$/;"	f
is_clanwar_opp	clanwar.c	/^bool is_clanwar_opp( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_class_skill	skills.c	/^bool is_class_skill( int class, int sn )$/;"	f
is_command	act_info.c	/^bool is_command( char *arg )$/;"	f
is_command_pending	comm.c	/^bool is_command_pending( DESCRIPTOR_DATA *d )$/;"	f
is_disguised	act_info.c	/^bool is_disguised( CHAR_DATA *ch )$/;"	f
is_drop_obj	handler.c	/^bool is_drop_obj( OBJ_DATA *obj )$/;"	f
is_either_name	handler.c	/^bool is_either_name( char *str, char *namelist, bool exact )$/;"	f
is_either_str	interp.c	/^bool is_either_str( char *prefix, char *str, bool exact )$/;"	f
is_empty_string	string.c	/^bool is_empty_string( char *s )$/;"	f
is_exact_name	handler.c	/^bool is_exact_name( char *str, char *namelist )$/;"	f
is_friend	handler.c	/^bool is_friend(CHAR_DATA *ch,CHAR_DATA *victim)$/;"	f
is_granted	grant.c	/^bool is_granted( CHAR_DATA *ch, DO_FUN *do_fun)$/;"	f
is_granted_name	grant.c	/^bool is_granted_name( CHAR_DATA *ch, char *name)$/;"	f
is_guild_room	quest.c	/^bool is_guild_room( int vnum )$/;"	f
is_here	redit-ilab.c	/^static bool is_here (RESET_DATA* pReset, int vnum, bool last_mob_here)$/;"	f	file:
is_high_priest	religion.c	/^bool is_high_priest( CHAR_DATA *ch )$/;"	f
is_in_group	skills.c	/^bool is_in_group( int skill, int group )$/;"	f
is_in_mastery_group	skills.c	/^static bool is_in_mastery_group( int sn, int gn )$/;"	f	file:
is_in_remort	remort.c	/^bool is_in_remort(CHAR_DATA *ch)$/;"	f
is_in_room	handler.c	/^bool is_in_room( CHAR_DATA *ch )$/;"	f
is_lua	merc.h	/^    bool        is_lua;$/;"	m	struct:prog_code
is_mental	magic.c	/^bool is_mental( int sn )$/;"	f
is_mimic	handler.c	/^bool is_mimic( CHAR_DATA *ch )$/;"	f
is_mob_in_spec	grep.c	/^bool is_mob_in_spec( MOB_INDEX_DATA *mob, char *msg )$/;"	f
is_mob_ingame	grep.c	/^bool is_mob_ingame( MOB_INDEX_DATA *mob )$/;"	f
is_mprog_running	mob_prog.c	/^bool is_mprog_running()$/;"	f
is_name	handler.c	/^bool is_name ( char *str, char *namelist )$/;"	f
is_normal_hit	fight.c	/^bool is_normal_hit( int dt )$/;"	f
is_note_to	board.c	/^bool is_note_to (CHAR_DATA *ch, NOTE_DATA *note)$/;"	f
is_number	interp.c	/^bool is_number ( char *arg )$/;"	f
is_obj_below_spec	grep.c	/^bool is_obj_below_spec( OBJ_INDEX_DATA *obj, char *msg )$/;"	f
is_obj_in_spec	grep.c	/^bool is_obj_in_spec( OBJ_INDEX_DATA *obj, char *msg )$/;"	f
is_obj_ingame	grep.c	/^bool is_obj_ingame( OBJ_INDEX_DATA *obj )$/;"	f
is_obj_owner	handler.c	/^bool is_obj_owner(CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
is_offensive	magic.c	/^bool is_offensive( int sn )$/;"	f
is_opponent	fight.c	/^bool is_opponent( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_pet_storage	update.c	/^bool is_pet_storage( ROOM_INDEX_DATA *room )$/;"	f
is_priest	religion.c	/^bool is_priest( CHAR_DATA *ch )$/;"	f
is_questeq	handler.c	/^bool is_questeq( OBJ_DATA *obj )$/;"	f
is_r_number	mob_cmds.c	/^bool is_r_number( char *arg )$/;"	f
is_ranged_weapon	fight.c	/^bool is_ranged_weapon( OBJ_DATA *weapon )$/;"	f
is_relic_obj	religion.c	/^bool is_relic_obj( OBJ_DATA *obj )$/;"	f
is_religion_member	religion.c	/^bool is_religion_member( CHAR_DATA *ch )$/;"	f
is_religion_opp	religion.c	/^bool is_religion_opp( CHAR_DATA *ch, CHAR_DATA *opp )$/;"	f
is_remort_obj	handler.c	/^bool is_remort_obj( OBJ_DATA *obj )$/;"	f
is_reserved_name	nanny.c	/^bool is_reserved_name( char *name )$/;"	f
is_revoked	grant.c	/^bool is_revoked( CHAR_DATA *ch, DO_FUN *do_fun)$/;"	f
is_room_ingame	grep.c	/^bool is_room_ingame( ROOM_INDEX_DATA *room )$/;"	f
is_room_owner	handler.c	/^bool is_room_owner(CHAR_DATA *ch, ROOM_INDEX_DATA *room)$/;"	f
is_safe	fight.c	/^bool is_safe( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
is_safe_check	fight.c	/^bool is_safe_check( CHAR_DATA *ch, CHAR_DATA *victim, $/;"	f
is_safe_spell	fight.c	/^bool is_safe_spell( CHAR_DATA *ch, CHAR_DATA *victim, bool area )$/;"	f
is_same_clan	handler.c	/^bool is_same_clan(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
is_same_group	act_comm.c	/^bool is_same_group( CHAR_DATA *ach, CHAR_DATA *bch )$/;"	f
is_same_player	comm.c	/^bool is_same_player( CHAR_DATA *ch1, CHAR_DATA *ch2 )$/;"	f
is_same_team	warfare.c	/^bool is_same_team( CHAR_DATA *ch1, CHAR_DATA *ch2 )$/;"	f
is_settable	tables.c	/^bool is_settable( int flag, struct flag_type *flag_table )$/;"	f
is_stat	bit.c	/^bool is_stat( const struct flag_type *flag_table )$/;"	f
is_sticky_obj	handler.c	/^bool is_sticky_obj( OBJ_DATA *obj )$/;"	f
is_substr	buildutil.c	/^bool is_substr( char *sub, char *str )$/;"	f
is_tattoo_list_empty	tattoo.c	/^bool is_tattoo_list_empty( tattoo_list tl )$/;"	f
is_tattoo_loc	tattoo.c	/^bool is_tattoo_loc( int loc )$/;"	f
is_violent	magic.c	/^bool is_violent( CHAR_DATA *vch, CHAR_DATA *ch )$/;"	f
is_vnum	redit-ilab.c	40;"	d	file:
is_waiting_for_auth	auth.c	/^bool is_waiting_for_auth( CHAR_DATA *ch )$/;"	f
is_wilderness	hunt.c	/^bool is_wilderness( int sector )$/;"	f
is_wimpy	fight.c	/^bool is_wimpy( CHAR_DATA *ch )$/;"	f
item_lookup	lookup.c	/^int item_lookup(const char *name)$/;"	f
item_name	handler.c	/^char *item_name(int item_type)$/;"	f
item_table	const.c	/^const struct item_type      item_table  []  =$/;"	v	typeref:struct:item_type
item_type	merc.h	/^	sh_int      item_type;$/;"	m	struct:obj_data
item_type	merc.h	/^	sh_int      item_type;$/;"	m	struct:obj_index_data
item_type	merc.h	/^struct item_type$/;"	s
jail_room	merc.h	/^    int jail_room;                \/* If this is a jail penalty, the jail room vnum *\/$/;"	m	struct:penalty_data
jail_room_list	db.c	/^int             jail_room_list[MAX_JAIL_ROOM];$/;"	v
jj	merc.h	1172;"	d
join_time	religion.h	/^    time_t join_time;$/;"	m	struct:follower_data
just_killed	merc.h	/^        bool        just_killed; \/* for checking if char was just killed *\/$/;"	m	struct:char_data
keeper	merc.h	/^	sh_int  keeper;         \/* Vnum of shop keeper mob  *\/$/;"	m	struct:shop_data
key	hunt.c	/^    int           key;$/;"	m	struct:hash_link	file:
key	merc.h	/^	int     key;$/;"	m	struct:stance_type
key	merc.h	/^	sh_int      key;$/;"	m	struct:exit_data
keylist	hunt.c	/^    int           *keylist, klistsize, klistlen; \/* this is really lame, AMAZINGLY lame *\/$/;"	m	struct:hash_header	file:
keyword	merc.h	/^	char *      keyword;$/;"	m	struct:exit_data
keyword	merc.h	/^	char *keyword;              \/* Keyword in look\/examine          *\/$/;"	m	struct:extra_descr_data
keyword	merc.h	/^   char *  keyword;$/;"	m	struct:help_data
keyword_list	mob_prog.c	/^typedef char* keyword_list[][2];$/;"	t	file:
keyword_list	olc_mpcode.c	/^typedef char* keyword_list[][2];$/;"	t	file:
keyword_lookup	mob_prog.c	/^int keyword_lookup( const keyword_list table, char *keyword )$/;"	f
kill_data	merc.h	/^struct  kill_data$/;"	s
kill_table	db.c	/^KILL_DATA       kill_table  [MAX_LEVEL];$/;"	v
killed	merc.h	/^	sh_int      killed;$/;"	m	struct:kill_data
killed	merc.h	/^	sh_int      killed;$/;"	m	struct:mob_index_data_old
killed	merc.h	/^    sh_int      killed;$/;"	m	struct:mob_index_data
kk	merc.h	1173;"	d
klistlen	hunt.c	/^    int           *keylist, klistsize, klistlen; \/* this is really lame, AMAZINGLY lame *\/$/;"	m	struct:hash_header	file:
klistsize	hunt.c	/^    int           *keylist, klistsize, klistlen; \/* this is really lame, AMAZINGLY lame *\/$/;"	m	struct:hash_header	file:
lag_free	merc.h	/^    bool lag_free;$/;"	m	struct:descriptor_data
last	merc.h	/^   HELP_DATA *  last;$/;"	m	struct:help_area_data
last_auth_name	auth.c	/^AUTH_LIST *last_auth_name;$/;"	v
last_command	interp.c	/^char last_command[MSL] = ""; \/* Global variable to hold the last input line *\/$/;"	v
last_debug	mob_prog.c	/^char last_debug[MSL] = "";$/;"	v
last_delete_name	auth.c	/^char last_delete_name[MIL] = "";$/;"	v
last_host	merc.h	/^    char *  last_host;$/;"	m	struct:pc_data
last_index	merc.h	/^    int last_index;$/;"	m	struct:string_ring_buf
last_level	merc.h	/^    int         last_level;$/;"	m	struct:pc_data
last_mob_id	recycle.c	/^long    last_mob_id;$/;"	v
last_mprog	mob_prog.c	/^char last_mprog[MSL] = "";$/;"	v
last_msg_was_prompt	merc.h	/^        bool        last_msg_was_prompt;$/;"	m	struct:descriptor_data
last_note	merc.h	/^    time_t        last_note[MAX_BOARD]; \/* last note for the boards *\/$/;"	m	struct:pc_data
last_note_stamp	board.c	/^long last_note_stamp = 0; \/* To generate unique timestamps on notes *\/$/;"	v
last_pc_id	recycle.c	/^long    last_pc_id;$/;"	v
last_reserved	act_wiz.c	/^RESERVED_DATA *last_reserved;$/;"	v
last_war_time	warfare.c	/^long last_war_time = 0;$/;"	v
leader	merc.h	/^	CHAR_DATA *     leader;$/;"	m	struct:char_data
learned	merc.h	/^    sh_int      learned     [MAX_SKILL];$/;"	m	struct:pc_data
len	merc.h	/^	int len;	\/* The current len of the buffer *\/$/;"	m	struct:buffer_type
level	alchemy.c	/^    int level;$/;"	m	struct:recipe_type	file:
level	crafting.c	/^    int level;$/;"	m	struct:crafting_type	file:
level	interp.h	/^	sh_int      level;$/;"	m	struct:cmd_type
level	merc.h	/^	int     level;$/;"	m	struct:wiznet_type
level	merc.h	/^	sh_int      level;$/;"	m	struct:char_data
level	merc.h	/^	sh_int      level;$/;"	m	struct:mob_index_data_old
level	merc.h	/^	sh_int      level;$/;"	m	struct:obj_data
level	merc.h	/^	sh_int      level;$/;"	m	struct:obj_index_data
level	merc.h	/^	sh_int  level;$/;"	m	struct:ban_data
level	merc.h	/^    int                 level;$/;"	m	struct:grant_data
level	merc.h	/^    sh_int	level;$/;"	m	struct:wiz_data
level	merc.h	/^    sh_int      level;$/;"	m	struct:affect_data
level	merc.h	/^    sh_int      level;$/;"	m	struct:mob_index_data
level	merc.h	/^   sh_int  level;$/;"	m	struct:help_data
level	merc.h	/^   sh_int level;                   \/* level of disabler *\/$/;"	m	struct:disabled_data
level_base_ac	mob_stats.c	/^int level_base_ac( int level )$/;"	f
level_base_attacks	mob_stats.c	/^int level_base_attacks( int level )$/;"	f
level_base_damage	mob_stats.c	/^int level_base_damage( int level )$/;"	f
level_base_damroll	mob_stats.c	/^int level_base_damroll( int level )$/;"	f
level_base_hitroll	mob_stats.c	/^int level_base_hitroll( int level )$/;"	f
level_base_hp	mob_stats.c	/^int level_base_hp( int level )$/;"	f
level_base_mana	mob_stats.c	/^int level_base_mana( int level )$/;"	f
level_base_move	mob_stats.c	/^int level_base_move( int level )$/;"	f
level_base_saves	mob_stats.c	/^int level_base_saves( int level )$/;"	f
level_base_wealth	mob_stats.c	/^long level_base_wealth( int level )$/;"	f
level_power	fight.c	/^int level_power( CHAR_DATA *ch )$/;"	f
level_stats	olc_act.c	/^static int level_stats[][LVL_STAT_NR] = {$/;"	v	file:
lib	lua_arclib.c	/^    char *lib;$/;"	m	struct:glob_type	file:
light	merc.h	/^    sh_int      light;$/;"	m	struct:room_index_data
light_status	handler.c	/^int light_status( CHAR_DATA *ch )$/;"	f
limit	merc.h	/^    time_t limit;$/;"	m	struct:quest_data
limit	merc.h	/^   int limit;      $/;"	m	struct:achievement_entry
limit	remort.c	/^    time_t limit;	$/;"	m	struct:remort_table	file:
lines	merc.h	/^	int         lines;  \/* for the pager *\/$/;"	m	struct:char_data
liq_affect	merc.h	/^	sh_int  liq_affect[5];$/;"	m	struct:liq_type
liq_color	merc.h	/^	char *  liq_color;$/;"	m	struct:liq_type
liq_lookup	lookup.c	/^int liq_lookup (const char *name)$/;"	f
liq_name	merc.h	/^	char *  liq_name;$/;"	m	struct:liq_type
liq_table	const.c	/^const   struct  liq_type    liq_table   []  =$/;"	v	typeref:struct:liq_type
liq_type	merc.h	/^struct  liq_type$/;"	s
list_group_chosen	skills.c	/^void list_group_chosen(CHAR_DATA *ch)$/;"	f
list_group_costs	skills.c	/^void list_group_costs(CHAR_DATA *ch)$/;"	f
list_quest_items	quest.c	/^char* list_quest_items()$/;"	f
list_religions	religion.c	/^void list_religions( CHAR_DATA *ch )$/;"	f
ll	merc.h	1174;"	d
load_area	db.c	/^void load_area( FILE *fp )$/;"	f
load_area_file	db.c	/^void load_area_file( FILE *fp, bool clone )$/;"	f
load_areaprogs	db.c	/^void load_areaprogs( FILE *fp )$/;"	f
load_auth_list	auth.c	/^void load_auth_list()$/;"	f
load_bans	ban.c	/^void load_bans(void)$/;"	f
load_board	board.c	/^static void load_board (BOARD_DATA *board)$/;"	f	file:
load_boards	board.c	/^void load_boards ()$/;"	f
load_char_obj	simsave.c	/^bool load_char_obj( DESCRIPTOR_DATA *d, char *name )$/;"	f
load_clan_file	clan.c	/^void load_clan_file(const char *filename)$/;"	f
load_clans	clan.c	/^void load_clans( )$/;"	f
load_clanwars	clanwar.c	/^void load_clanwars()$/;"	f
load_comm_histories	playback.c	/^void load_comm_histories()$/;"	f
load_comm_history	playback.c	/^static void load_comm_history( lua_State *LS, COMM_HISTORY *history )$/;"	f	file:
load_crime_list	penalty.c	/^void load_crime_list(void)$/;"	f
load_disabled	interp.c	/^void load_disabled()$/;"	f
load_file_to_buffer	buffer_util.c	/^DBUFFER* load_file_to_buffer( FILE *fp )$/;"	f
load_helps	db.c	/^void load_helps( FILE *fp, char *fname )$/;"	f
load_lboards	lua_main.c	/^void load_lboards()$/;"	f
load_luaconfig	lua_main.c	/^void load_luaconfig( CHAR_DATA *ch, const char *text )$/;"	f
load_mobbles	db2.c	/^void load_mobbles( FILE *fp )$/;"	f
load_mobiles	db2.c	/^void load_mobiles( FILE *fp )$/;"	f
load_mobprogs	db.c	/^void load_mobprogs( FILE *fp )$/;"	f
load_mudconfig	lua_main.c	/^void load_mudconfig()$/;"	f
load_objects	db2.c	/^void load_objects( FILE *fp )$/;"	f
load_objprogs	db.c	/^void load_objprogs( FILE *fp )$/;"	f
load_penalties	penalty.c	/^void load_penalties()$/;"	f
load_portal_list	act_enter.c	/^void load_portal_list()$/;"	f
load_religions	religion.c	/^void load_religions()$/;"	f
load_reserved	db.c	/^void load_reserved( void )$/;"	f
load_resets	db.c	/^ void load_resets( FILE *fp )$/;"	f
load_roomprogs	db.c	/^void load_roomprogs( FILE *fp )$/;"	f
load_rooms	db.c	/^void load_rooms( FILE *fp )$/;"	f
load_shops	db.c	/^void load_shops( FILE *fp )$/;"	f
load_skill	skills.c	/^void load_skill(FILE *f, int cnum, int version)$/;"	f
load_skills	skills.c	/^void load_skills()$/;"	f
load_social	social-edit.c	/^void load_social (FILE *fp, struct social_type *social)$/;"	f
load_social_table	social-edit.c	/^void load_social_table ()$/;"	f
load_specials	db.c	/^void load_specials( FILE *fp )$/;"	f
load_storage_boxes	simsave.c	/^bool load_storage_boxes(CHAR_DATA *ch )$/;"	f
load_wizlist	wizlist.c	/^void load_wizlist(void)$/;"	f
location	merc.h	/^    sh_int      location;$/;"	m	struct:affect_data
log	interp.h	/^	sh_int      log;$/;"	m	struct:cmd_type
log_buf	db.c	/^char            log_buf     [2*MAX_INPUT_LENGTH];$/;"	v
log_bugs	act_comm.c	/^void log_bugs(char *str)$/;"	f
log_chan	playback.c	/^void log_chan(CHAR_DATA * ch, char * text , sh_int channel)$/;"	f
log_error	db.c	/^void log_error( const char *str )$/;"	f
log_mob_index	db.c	/^void log_mob_index()$/;"	f
log_pers	playback.c	/^void log_pers( PERS_HISTORY *history, char *text )$/;"	f
log_string	db.c	/^void log_string( const char *str )$/;"	f
log_trace	db.c	/^void log_trace()$/;"	f
logon	merc.h	/^	time_t      logon;$/;"	m	struct:char_data
logpf	comm.c	/^void logpf (char * fmt, ...)$/;"	f
long_descr	merc.h	/^	char *      long_descr;$/;"	m	struct:char_data
long_descr	merc.h	/^	char *      long_descr;$/;"	m	struct:mob_index_data_old
long_descr	merc.h	/^    char*       long_descr;$/;"	m	struct:mob_index_data
long_name	merc.h	/^	char *long_name;       \/* Explanatory text, should be no more than 40 ? chars *\/$/;"	m	struct:board_data
look_obj	act_info.c	/^OBJ_DATA* look_obj( CHAR_DATA *ch, char *argument )$/;"	f
lost	tables.h	/^    int lost;$/;"	m	struct:pkgrade_type
lost_in_warfare	tables.h	/^    int lost_in_warfare;$/;"	m	struct:pkgrade_type
lpad	string.c	/^char *lpad( char *argument, int width, char fill )$/;"	f
ltrim	string.c	/^char* ltrim(const char *s)$/;"	f
lua	merc.h	/^    } lua;$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data::__anon4
lua_area_program	lua_scripting.c	/^bool lua_area_program( const char *trigger, int pvnum, const char *source, $/;"	f
lua_extra_val	lua_arclib.h	/^typedef struct lua_extra_val$/;"	s
lua_load_aprog	lua_scripting.c	/^bool lua_load_aprog( lua_State *LS, int vnum, const char *code)$/;"	f
lua_load_mprog	lua_scripting.c	/^bool lua_load_mprog( lua_State *LS, int vnum, const char *code )$/;"	f
lua_load_oprog	lua_scripting.c	/^bool lua_load_oprog( lua_State *LS, int vnum, const char *code)$/;"	f
lua_load_prog	lua_scripting.c	/^static bool lua_load_prog( lua_State *LS, int vnum, const char *code, LUA_SCRIPTER *scripter)$/;"	f	file:
lua_load_rprog	lua_scripting.c	/^bool lua_load_rprog( lua_State *LS, int vnum, const char *code)$/;"	f
lua_log_perf	lua_main.c	/^void lua_log_perf( double value )$/;"	f
lua_mob_program	lua_scripting.c	/^void lua_mob_program( const char *text, int pvnum, const char *source, $/;"	f
lua_mprogs	db.c	/^int  lua_mprogs=0;$/;"	v
lua_obj_program	lua_scripting.c	/^bool lua_obj_program( const char *trigger, int pvnum, const char *source, $/;"	f
lua_obj_type	lua_arclib.h	/^typedef struct lua_obj_type$/;"	s
lua_prop_type	lua_arclib.c	/^typedef struct lua_prop_type$/;"	s	file:
lua_room_program	lua_scripting.c	/^bool lua_room_program( const char *trigger, int pvnum, const char *source, $/;"	f
lua_scripter	lua_scripting.c	/^typedef struct lua_scripter$/;"	s	file:
lua_unregister_desc	lua_main.c	/^void lua_unregister_desc (DESCRIPTOR_DATA *d)$/;"	f
luavals	merc.h	/^    struct lua_extra_val *luavals; \/* list of extra vals set via script *\/$/;"	m	struct:obj_data	typeref:struct:obj_data::lua_extra_val
luavals	merc.h	/^    struct lua_extra_val *luavals;$/;"	m	struct:char_data	typeref:struct:char_data::lua_extra_val
lvl	act_info.c	/^    int lvl;$/;"	m	struct:newbie_data	file:
mail_notify	board.c	/^void mail_notify( CHAR_DATA *ch, NOTE_DATA *pnote, BOARD_DATA *board )$/;"	f
main	comm.c	/^int main( int argc, char **argv )$/;"	f
make_corpse	fight.c	/^void make_corpse( CHAR_DATA *victim, CHAR_DATA *killer, bool go_morgue)$/;"	f
make_group_table	lua_main.c	/^void make_group_table( lua_State *LS )$/;"	f
make_note	board.c	/^void make_note (const char* board_name, const char *sender, const char *to, const char *subject, const int expire_days, const char *text)$/;"	f
make_skill_table	lua_main.c	/^void make_skill_table( lua_State *LS )$/;"	f
make_visible	act_move.c	/^void make_visible( CHAR_DATA *ch )$/;"	f
makedrunk	act_comm.c	/^char * makedrunk (char *string, CHAR_DATA * ch)$/;"	f
mana	merc.h	/^	int         mana[3];$/;"	m	struct:mob_index_data_old
mana	merc.h	/^	int      mana;$/;"	m	struct:char_data
mana_cost	magic.c	/^int mana_cost (CHAR_DATA *ch, int sn, int skill)$/;"	f
mana_gain	merc.h	/^    sh_int  mana_gain;          \/* Class gains mana on level    *\/$/;"	m	struct:class_type
mana_gain	update.c	/^int mana_gain( CHAR_DATA *ch )$/;"	f
mana_percent	merc.h	/^    sh_int      mana_percent;$/;"	m	struct:mob_index_data
mana_rate	merc.h	/^    sh_int      mana_rate;$/;"	m	struct:room_index_data
mana_used	merc.h	/^	int	mana_used;$/;"	m	struct:char_data
martial	merc.h	/^	bool        martial;$/;"	m	struct:stance_type
martial_damage	fight.c	/^int martial_damage( CHAR_DATA *ch, CHAR_DATA *victim, int sn )$/;"	f
mask	merc.h	/^	int mask;$/;"	m	struct:explore_holder
master	merc.h	/^	CHAR_DATA *     master;$/;"	m	struct:char_data
mastered	merc.h	/^    sh_int      mastered    [MAX_SKILL];$/;"	m	struct:pc_data
mastery_adjust_cost	magic.c	/^int mastery_adjust_cost( int cost, int mastery )$/;"	f
mastery_adjust_level	magic.c	/^int mastery_adjust_level( int level, int mastery )$/;"	f
mastery_adjusted_wait	fight2.c	/^void mastery_adjusted_wait( CHAR_DATA *ch, int sn )$/;"	f
mastery_bonus	skills.c	/^int mastery_bonus( CHAR_DATA *ch, int sn, int m_bonus, int gm_bonus )$/;"	f
mastery_group_table	const.c	/^const struct mastery_group_type mastery_group_table[] =$/;"	v	typeref:struct:mastery_group_type
mastery_group_type	merc.h	/^struct  mastery_group_type$/;"	s
mastery_points	skills.c	/^static int mastery_points( CHAR_DATA *ch )$/;"	f	file:
mastery_rating	merc.h	/^    sh_int  mastery_rating; \/* how hard it is to master *\/$/;"	m	struct:skill_type
mastery_title	skills.c	/^static const char* mastery_title( int level )$/;"	f	file:
match_grep_mob	grep.c	/^bool match_grep_mob( GREP_DATA *gd, MOB_INDEX_DATA *mob, char *info )$/;"	f
match_grep_obj	grep.c	/^bool match_grep_obj( GREP_DATA *gd, OBJ_INDEX_DATA *obj, char *info )$/;"	f
match_grep_room	grep.c	/^bool match_grep_room( GREP_DATA *gd, ROOM_INDEX_DATA *room, char *info )$/;"	f
material	merc.h	/^	char *      material;$/;"	m	struct:mob_index_data_old
material	merc.h	/^	char *      material;$/;"	m	struct:obj_data
material	merc.h	/^	char *      material;$/;"	m	struct:obj_index_data
material_lookup	handler.c	/^int material_lookup (const char *name)$/;"	f
materials_table	crafting.c	/^struct materials_type materials_table[] =$/;"	v	typeref:struct:materials_type
materials_type	crafting.c	/^struct materials_type$/;"	s	file:
materials_vnum	crafting.c	/^    int materials_vnum[MAX_MATERIALS];$/;"	m	struct:crafting_type	file:
max	stats.c	/^    int min, max, rolled;$/;"	m	struct:min_max_rolled	file:
maxSocial	social-edit.c	/^int maxSocial;$/;"	v
max_align	merc.h	/^    sh_int   max_align;         \/* Alignment threshold for membership *\/$/;"	m	struct:clan_data
max_align	religion.h	/^    int min_align, max_align;$/;"	m	struct:religion_data
max_hit	merc.h	/^	int      max_hit;$/;"	m	struct:char_data
max_hmm_train	stats.c	/^int max_hmm_train( int level )$/;"	f
max_level	special.c	/^    sh_int  max_level;$/;"	m	struct:spell_type	file:
max_level	warfare.h	/^   int max_level;$/;"	m	struct:war_data
max_mana	merc.h	/^	int      max_mana;$/;"	m	struct:char_data
max_mastery_class	skills.c	/^static int max_mastery_class( int class, int sn )$/;"	f	file:
max_mastery_level	skills.c	/^static int max_mastery_level( CHAR_DATA *ch, int sn )$/;"	f	file:
max_mastery_points	skills.c	/^static int max_mastery_points( CHAR_DATA *ch )$/;"	f	file:
max_move	merc.h	/^	int      max_move;$/;"	m	struct:char_data
max_on	act_info.c	/^int max_on = 0;$/;"	v
max_promote_rank	merc.h	/^    sh_int   max_promote_rank;  \/* Maximum rank players of this rank may promote others to. *\/$/;"	m	struct:clan_rank_data
max_stats	merc.h	/^	sh_int  max_stats[MAX_STATS];   \/* maximum stats *\/$/;"	m	struct:pc_race_type
max_vnum	merc.h	/^	int      max_vnum;$/;"	m	struct:area_data
maxlevel	merc.h	/^        int      maxlevel;$/;"	m	struct:area_data
mean	religion.c	/^    bool mean;$/;"	m	struct:god_action	file:
medit	olc.c	/^void medit( CHAR_DATA *ch, char *argument )$/;"	f
medit_ac	olc.h	/^DECLARE_OLC_FUN( medit_ac        );  \/* ROM *\/$/;"	v
medit_act	olc.h	/^DECLARE_OLC_FUN( medit_act       );  \/* ROM *\/$/;"	v
medit_addmprog	olc.h	/^DECLARE_OLC_FUN( medit_addmprog  );  \/* ROM *\/$/;"	v
medit_affect	olc.h	/^DECLARE_OLC_FUN( medit_affect    );  \/* ROM *\/$/;"	v
medit_align	olc.h	/^DECLARE_OLC_FUN( medit_align		);$/;"	v
medit_armor	olc.h	/^DECLARE_OLC_FUN( medit_armor     );$/;"	v
medit_create	olc.h	/^DECLARE_OLC_FUN( medit_create		);$/;"	v
medit_damage	olc.h	/^DECLARE_OLC_FUN( medit_damage    );$/;"	v
medit_damtype	olc.h	/^DECLARE_OLC_FUN( medit_damtype   );  \/* ROM *\/$/;"	v
medit_delete	olc.h	/^DECLARE_OLC_FUN( medit_delete       );$/;"	v
medit_delmprog	olc.h	/^DECLARE_OLC_FUN( medit_delmprog  );  \/* ROM *\/$/;"	v
medit_desc	olc.h	/^DECLARE_OLC_FUN( medit_desc		);$/;"	v
medit_form	olc.h	/^DECLARE_OLC_FUN( medit_form      );  \/* ROM *\/$/;"	v
medit_group	olc.h	/^DECLARE_OLC_FUN( medit_group     );  \/* ROM *\/$/;"	v
medit_hitpoints	olc.h	/^DECLARE_OLC_FUN( medit_hitpoints );$/;"	v
medit_hitroll	olc.h	/^DECLARE_OLC_FUN( medit_hitroll   );$/;"	v
medit_imm	olc.h	/^DECLARE_OLC_FUN( medit_imm       );  \/* ROM *\/$/;"	v
medit_level	olc.h	/^DECLARE_OLC_FUN( medit_level		);$/;"	v
medit_long	olc.h	/^DECLARE_OLC_FUN( medit_long		);$/;"	v
medit_mana	olc.h	/^DECLARE_OLC_FUN( medit_mana      );$/;"	v
medit_move	olc.h	/^DECLARE_OLC_FUN( medit_move      );$/;"	v
medit_name	olc.h	/^DECLARE_OLC_FUN( medit_name		);$/;"	v
medit_notes	olc.h	/^DECLARE_OLC_FUN( medit_notes    );$/;"	v
medit_off	olc.h	/^DECLARE_OLC_FUN( medit_off       );  \/* ROM *\/$/;"	v
medit_part	olc.h	/^DECLARE_OLC_FUN( medit_part      );  \/* ROM *\/$/;"	v
medit_percent	olc_act.c	/^bool medit_percent ( CHAR_DATA *ch, char *argument, char* command)$/;"	f
medit_position	olc.h	/^DECLARE_OLC_FUN( medit_position  );  \/* ROM *\/$/;"	v
medit_race	olc.h	/^DECLARE_OLC_FUN( medit_race      );  \/* ROM *\/$/;"	v
medit_res	olc.h	/^DECLARE_OLC_FUN( medit_res       );  \/* ROM *\/$/;"	v
medit_saves	olc.h	/^DECLARE_OLC_FUN( medit_saves     );$/;"	v
medit_sex	olc.h	/^DECLARE_OLC_FUN( medit_sex       );  \/* ROM *\/$/;"	v
medit_shop	olc.h	/^DECLARE_OLC_FUN( medit_shop		);$/;"	v
medit_short	olc.h	/^DECLARE_OLC_FUN( medit_short		);$/;"	v
medit_show	olc.h	/^DECLARE_OLC_FUN( medit_show		);$/;"	v
medit_size	olc.h	/^DECLARE_OLC_FUN( medit_size      );  \/* ROM *\/$/;"	v
medit_spec	olc.h	/^DECLARE_OLC_FUN( medit_spec		);$/;"	v
medit_stance	olc.h	/^DECLARE_OLC_FUN( medit_stance    );$/;"	v
medit_table	olc.c	/^const struct olc_cmd_type medit_table[] =$/;"	v	typeref:struct:olc_cmd_type
medit_vuln	olc.h	/^DECLARE_OLC_FUN( medit_vuln      );  \/* ROM *\/$/;"	v
medit_wealth	olc.h	/^DECLARE_OLC_FUN( medit_wealth    );$/;"	v
mem_data	merc.h	/^struct mem_data$/;"	s
mem_data_free	recycle.c	/^MEM_DATA *mem_data_free;$/;"	v
mem_file_type	buffer_util.h	/^struct mem_file_type$/;"	s
mem_load_char_obj	bsave.c	/^void mem_load_char_obj( DESCRIPTOR_DATA *d, MEMFILE *mf )$/;"	f
mem_load_storage_box	bsave.c	/^void mem_load_storage_box( CHAR_DATA *ch, MEMFILE *mf )$/;"	f
mem_save_char_obj	bsave.c	/^MEMFILE* mem_save_char_obj( CHAR_DATA *ch )$/;"	f
mem_save_clan_file	clan.c	/^MEMFILE* mem_save_clan_file( int clannum )$/;"	f
mem_save_storage_box	bsave.c	/^void mem_save_storage_box( CHAR_DATA *ch )$/;"	f
mem_sim_save_other	simsave.c	/^void mem_sim_save_other()$/;"	f
memfile_free	buffer_util.c	/^void memfile_free(MEMFILE *mf)$/;"	f
memfile_from_list	simsave.c	/^MEMFILE *memfile_from_list( char *filename, MEMFILE *list )$/;"	f
memfile_in_list	simsave.c	/^bool memfile_in_list( char *filename, MEMFILE *list )$/;"	f
memfile_new	buffer_util.c	/^MEMFILE *memfile_new( char *filename, int min_size )$/;"	f
memfile_wrap_buffer	buffer_util.c	/^MEMFILE* memfile_wrap_buffer( char *filename, DBUFFER *buf )$/;"	f
memfile_wrap_free	buffer_util.c	/^void memfile_wrap_free( MEMFILE *mf )$/;"	f
memory	merc.h	/^	MEM_DATA *      memory;$/;"	m	struct:char_data
merc_down	comm.c	/^bool            merc_down;      \/* Shutdown         *\/$/;"	v
merge_arrows	act_obj.c	/^void merge_arrows( CHAR_DATA *ch, OBJ_DATA *obj1, OBJ_DATA *obj2 )$/;"	f
message	act_comm.c	/^    char *  message[8];$/;"	m	struct:pose_table_type	file:
meta_magic	magic.c	/^tflag meta_magic = {};$/;"	v
meta_magic_adjust_cost	magic.c	/^int meta_magic_adjust_cost( CHAR_DATA *ch, int cost, bool base )$/;"	f
meta_magic_adjust_wait	magic.c	/^int meta_magic_adjust_wait( int wait )$/;"	f
meta_magic_cast	magic.c	/^void meta_magic_cast( CHAR_DATA *ch, char *meta_arg, char *argument )$/;"	f
meta_magic_concentration_check	magic.c	/^bool meta_magic_concentration_check( CHAR_DATA *ch )$/;"	f
meta_magic_sn	magic.c	/^int meta_magic_sn( int meta )$/;"	f
meta_magic_strip	magic.c	/^void meta_magic_strip( CHAR_DATA *ch, int sn, int target_type )$/;"	f
method_table	lua_arclib.h	/^    struct lua_prop_type * const method_table;$/;"	m	struct:lua_obj_type
mimic_name	merc.h	/^    char *mimic_name;$/;"	m	struct:comm_history_entry
min	stats.c	/^    int min, max, rolled;$/;"	m	struct:min_max_rolled	file:
min_align	merc.h	/^    sh_int   min_align;         \/* Alignment threshold for membership *\/$/;"	m	struct:clan_data
min_align	religion.h	/^    int min_align, max_align;$/;"	m	struct:religion_data
min_drunk_level	merc.h	/^		int     min_drunk_level;$/;"	m	struct:struckdrunk
min_faith	religion.h	/^    int min_faith;$/;"	m	struct:religion_rank_data
min_level	merc.h	/^	sh_int min_level;$/;"	m	struct:channel_type
min_level	merc.h	/^    sh_int   min_level;         \/* Minimum level required to be promoted to this rank. *\/$/;"	m	struct:clan_rank_data
min_level	special.c	/^    sh_int  min_level;$/;"	m	struct:spell_type	file:
min_level	warfare.h	/^   int min_level;$/;"	m	struct:war_data
min_mana	merc.h	/^	sh_int  min_mana;       \/* Minimum mana used        *\/$/;"	m	struct:skill_type
min_max_rolled	stats.c	/^struct min_max_rolled$/;"	s	file:
min_rating	merc.h	/^	sh_int  min_rating;     \/* for auto-rating calculation *\/$/;"	m	struct:skill_type
min_stats	merc.h	/^	sh_int  min_stats[MAX_STATS];   \/* minimum stats *\/$/;"	m	struct:pc_race_type
min_time	religion.h	/^    int min_time;$/;"	m	struct:religion_rank_data
min_vnum	merc.h	/^	int      min_vnum;$/;"	m	struct:area_data
minimum_position	merc.h	/^	sh_int  minimum_position;   \/* Position for caster \/ user   *\/$/;"	m	struct:skill_type
miniquests	merc.h	/^        int      miniquests;$/;"	m	struct:area_data
minlevel	merc.h	/^        int      minlevel;$/;"	m	struct:area_data
mm	merc.h	1175;"	d
mmhg	merc.h	/^	int     mmhg;$/;"	m	struct:weather_data
mob_base_ac	mob_stats.c	/^int mob_base_ac( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_attacks	mob_stats.c	/^int mob_base_attacks( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_damage	mob_stats.c	/^int mob_base_damage( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_damroll	mob_stats.c	/^int mob_base_damroll( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_hitroll	mob_stats.c	/^int mob_base_hitroll( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_hp	mob_stats.c	/^int mob_base_hp( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_mana	mob_stats.c	/^int mob_base_mana( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_move	mob_stats.c	/^int mob_base_move( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_saves	mob_stats.c	/^int mob_base_saves( MOB_INDEX_DATA *pMobIndex, int level )$/;"	f
mob_base_wealth	mob_stats.c	/^long mob_base_wealth( MOB_INDEX_DATA *pMobIndex )$/;"	f
mob_cmd_table	mob_cmds.c	/^const	struct	mob_cmd_type	mob_cmd_table	[] =$/;"	v	typeref:struct:mob_cmd_type
mob_cmd_type	mob_cmds.h	/^struct	mob_cmd_type$/;"	s
mob_deaths	merc.h	/^	int                 mob_deaths;$/;"	m	struct:pc_data
mob_get_skill	skills.c	/^int mob_get_skill(CHAR_DATA *ch, int sn)$/;"	f
mob_has_skill	skills.c	/^int mob_has_skill(CHAR_DATA *ch, int sn)$/;"	f
mob_hit	fight.c	/^void mob_hit (CHAR_DATA *ch, CHAR_DATA *victim, int dt)$/;"	f
mob_index_data	merc.h	/^struct  mob_index_data$/;"	s
mob_index_data_old	merc.h	/^struct  mob_index_data_old$/;"	s
mob_index_hash	db.c	/^MOB_INDEX_DATA *    mob_index_hash      [MAX_KEY_HASH];$/;"	v
mob_interpret	mob_cmds.c	/^void mob_interpret( CHAR_DATA *ch, char *argument )$/;"	f
mob_kills	merc.h	/^	int                 mob_kills;$/;"	m	struct:pc_data
mobdeaths	merc.h	/^    long     mobdeaths;         \/* Number of mob deaths by clan members *\/$/;"	m	struct:clan_data
mobile_count	db.c	/^int  mobile_count = 0;$/;"	v
mobile_special_update	update.c	/^void mobile_special_update( void )$/;"	f
mobile_timer_update	update.c	/^void mobile_timer_update( void )$/;"	f
mobile_update	update.c	/^void mobile_update( void )$/;"	f
mobkills	merc.h	/^    long     mobkills;          \/* Number of mobs killed by clan members *\/$/;"	m	struct:clan_data
mod_skills	merc.h	/^    sh_int      mod_skills; \/\/ modifier to all skills, -100 to +100, 0 by default$/;"	m	struct:char_data
mod_stat	merc.h	/^	sh_int      mod_stat[MAX_STATS];$/;"	m	struct:char_data
modifier	merc.h	/^    sh_int      modifier;$/;"	m	struct:affect_data
money_weight	handler.c	/^int money_weight( int silver, int gold )$/;"	f
month	merc.h	/^	int     month;$/;"	m	struct:time_info_data
month_name	act_info.c	/^char *  const   month_name  [] =$/;"	v
morph_pc_race_table	const.c	/^struct pc_race_type morph_pc_race_table[] = $/;"	v	typeref:struct:pc_race_type
morph_power	act_move.c	/^int morph_power( CHAR_DATA *ch )$/;"	f
morph_race	merc.h	/^	sh_int morph_race;$/;"	m	struct:pc_data
morph_race_table	const.c	/^struct race_type morph_race_table[] = $/;"	v	typeref:struct:race_type
morph_time	merc.h	/^	sh_int morph_time;$/;"	m	struct:pc_data
morph_update	act_move.c	/^void morph_update( CHAR_DATA *ch )$/;"	f
motd	merc.h	/^    char *   motd;		\/* Special motd displayed for clan members. *\/$/;"	m	struct:clan_data
move	merc.h	/^	int      move;$/;"	m	struct:char_data
move_char	act_move.c	/^int move_char( CHAR_DATA *ch, int door, bool follow )$/;"	f
move_gain	merc.h	/^    sh_int  move_gain;$/;"	m	struct:class_type
move_gain	update.c	/^int move_gain( CHAR_DATA *ch )$/;"	f
move_percent	merc.h	/^    sh_int      move_percent;$/;"	m	struct:mob_index_data
movement_loss	act_move.c	/^const   sh_int  movement_loss   [SECT_MAX]  =$/;"	v
moves_used	merc.h	/^	int	moves_used;$/;"	m	struct:char_data
mp_act_trigger	mob_prog.c	/^bool mp_act_trigger( $/;"	f
mp_bribe_trigger	mob_prog.c	/^void mp_bribe_trigger( CHAR_DATA *mob, CHAR_DATA *ch, int amount )$/;"	f
mp_command_trigger	mob_prog.c	/^bool mp_command_trigger( CHAR_DATA *ch, int cmd, const char *argument )$/;"	f
mp_exit_trigger	mob_prog.c	/^bool mp_exit_trigger( CHAR_DATA *ch, int dir )$/;"	f
mp_give_trigger	mob_prog.c	/^bool mp_give_trigger( CHAR_DATA *mob, CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
mp_greet_trigger	mob_prog.c	/^void mp_greet_trigger( CHAR_DATA *ch )$/;"	f
mp_hprct_trigger	mob_prog.c	/^void mp_hprct_trigger( CHAR_DATA *mob, CHAR_DATA *ch )$/;"	f
mp_mprct_trigger	mob_prog.c	/^void mp_mprct_trigger( CHAR_DATA *mob, CHAR_DATA *ch )$/;"	f
mp_percent_trigger	mob_prog.c	/^bool mp_percent_trigger( $/;"	f
mp_spell_trigger	mob_prog.c	/^bool mp_spell_trigger( char* argument, CHAR_DATA *mob, CHAR_DATA *ch)$/;"	f
mp_timer_trigger	mob_prog.c	/^void mp_timer_trigger( CHAR_DATA *mob )$/;"	f
mp_try_trigger	mob_prog.c	/^bool mp_try_trigger( char* argument, CHAR_DATA *ch )$/;"	f
mpassist	mob_cmds.c	/^void mpassist( CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
mpechoaround	mob_cmds.c	/^void mpechoaround( CHAR_DATA *ch, CHAR_DATA *vic, char *txt )$/;"	f
mpechoat	mob_cmds.c	/^void mpechoat( CHAR_DATA *ch, CHAR_DATA *victim, char *argument)$/;"	f
mpedit	olc_mpcode.c	/^void mpedit( CHAR_DATA *ch, char *argument)$/;"	f
mpedit_code	olc.h	/^DECLARE_OLC_FUN( mpedit_code     );$/;"	v
mpedit_create	olc.h	/^DECLARE_OLC_FUN( mpedit_create   );$/;"	v
mpedit_delete	olc.h	/^DECLARE_OLC_FUN( mpedit_delete   );$/;"	v
mpedit_if	olc.h	/^DECLARE_OLC_FUN( mpedit_if       );$/;"	v
mpedit_list	olc.h	/^DECLARE_OLC_FUN( mpedit_list     );$/;"	v
mpedit_lua	olc.h	/^DECLARE_OLC_FUN( mpedit_lua      );$/;"	v
mpedit_mob	olc.h	/^DECLARE_OLC_FUN( mpedit_mob      );$/;"	v
mpedit_security	olc.h	/^DECLARE_OLC_FUN( mpedit_security );$/;"	v
mpedit_show	olc.h	/^DECLARE_OLC_FUN( mpedit_show     );$/;"	v
mpedit_table	olc_mpcode.c	/^const struct olc_cmd_type mpedit_table[] =$/;"	v	typeref:struct:olc_cmd_type
mpkill	mob_cmds.c	/^void mpkill( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
mpmload	mob_cmds.c	/^CHAR_DATA * mpmload( CHAR_DATA *ch, char *argument )$/;"	f
mpqadvance	mob_cmds.c	/^void mpqadvance( CHAR_DATA *ch, CHAR_DATA *victim, char *arg2, char *arg3 )$/;"	f
mpqset	mob_cmds.c	/^void mpqset(CHAR_DATA *ch, CHAR_DATA *victim, char *arg2, char *arg3,$/;"	f
mpremort	mob_cmds.c	/^void mpremort( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
mpreward	mob_cmds.c	/^void mpreward( CHAR_DATA *ch, CHAR_DATA *victim, char *arg2, int amount )$/;"	f
mprog_call_level	mob_prog.c	/^static int mprog_call_level = 0;$/;"	v	file:
mprog_call_level_decrease	mob_prog.c	/^int mprog_call_level_decrease()$/;"	f
mprog_call_level_increase	mob_prog.c	/^int mprog_call_level_increase()$/;"	f
mprog_delay	merc.h	/^    sh_int        mprog_delay;$/;"	m	struct:char_data
mprog_flags	merc.h	/^	tflag        mprog_flags;$/;"	m	struct:mob_index_data_old
mprog_flags	merc.h	/^    tflag       mprog_flags;$/;"	m	struct:mob_index_data
mprog_flags	tables.c	/^const struct flag_type mprog_flags[] =$/;"	v	typeref:struct:flag_type
mprog_list	db.c	/^PROG_CODE *    mprog_list;$/;"	v
mprog_setup	mob_prog.c	/^void mprog_setup( CHAR_DATA *mob)$/;"	f
mprog_target	merc.h	/^	CHAR_DATA *     mprog_target;$/;"	m	struct:char_data
mprog_timer_init	mob_prog.c	/^void mprog_timer_init( CHAR_DATA *mob)$/;"	f
mprog_type_to_name	mob_cmds.c	/^char *mprog_type_to_name( int type )$/;"	f
mprogs	merc.h	/^	PROG_LIST *        mprogs;$/;"	m	struct:mob_index_data_old
mprogs	merc.h	/^    PROG_LIST* mprogs;$/;"	m	struct:mob_index_data
mpscripter	lua_scripting.c	/^LUA_SCRIPTER mpscripter =$/;"	v
msdp_update	update.c	/^void msdp_update( void )$/;"	f
mset_stat	buildutil.c	/^bool mset_stat( CHAR_DATA *ch, CHAR_DATA *victim, int stat, int value )$/;"	f
mset_table	buildutil.c	/^} mset_table [] =$/;"	v	typeref:struct:__anon2
msg_obj	merc.h	/^	char *  msg_obj;        \/* Wear off message for obects  *\/$/;"	m	struct:skill_type
msg_off	merc.h	/^	char *  msg_off;        \/* Wear off message     *\/$/;"	m	struct:skill_type
msl_string	merc.h	/^typedef char msl_string[MSL];$/;"	t
mt	mt19937ar.c	/^static unsigned long mt[N]; \/* the array for the state vector  *\/$/;"	v	file:
mti	mt19937ar.c	/^static int mti=N+1; \/* mti==N+1 means mt[N] is not initialized *\/$/;"	v	file:
mtlib_rand	lua_arclib.c	/^static int mtlib_rand (lua_State *LS)$/;"	f	file:
mtlib_srand	lua_arclib.c	/^static int mtlib_srand (lua_State *LS)$/;"	f	file:
mudconfig_init	mudconfig.c	/^void mudconfig_init()$/;"	f
mudconfig_table	mudconfig.c	/^CFG_DATA_ENTRY mudconfig_table[] =$/;"	v
mudlib_luadir	lua_arclib.c	/^static int mudlib_luadir( lua_State *LS)$/;"	f	file:
mudlib_userdir	lua_arclib.c	/^static int mudlib_userdir( lua_State *LS)$/;"	f	file:
mult_argument	interp.c	/^int mult_argument(char *argument, char *arg)$/;"	f
multi_hit	fight.c	/^void multi_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt )$/;"	f
music	merc.h	/^	int music[3];           \/* {e *\/$/;"	m	struct:pc_data
music_text	merc.h	/^	int music_text[3];      \/* {E *\/$/;"	m	struct:pc_data
must_extract	merc.h	/^        bool        must_extract; \/* for delayed char purging *\/$/;"	m	struct:char_data
must_extract	merc.h	/^    bool        must_extract; \/* for delayed obj purging *\/$/;"	m	struct:obj_data
must_save_area	olc_save.c	/^bool must_save_area( AREA_DATA *area )$/;"	f
nAllocPerm	interp.c	/^int nAllocPerm;$/;"	v
nAllocString	interp.c	/^int nAllocString;$/;"	v
name	act_wiz.c	/^    const char *name;$/;"	m	struct:__anon1	file:
name	alchemy.c	/^    char *name;$/;"	m	struct:recipe_type	file:
name	crafting.c	/^    char *name;$/;"	m	struct:crafting_type	file:
name	healer.c	/^    char *name;$/;"	m	struct:spell_cost	file:
name	hunt.c	/^    char          *name;$/;"	m	struct:hunting_data	file:
name	interp.h	/^	char * const    name;$/;"	m	struct:cmd_type
name	lua_arclib.c	/^    char *name;$/;"	m	struct:glob_type	file:
name	lua_arclib.h	/^    char *name;$/;"	m	struct:lua_extra_val
name	lua_scripting.c	/^    const char *name;$/;"	m	struct:lua_scripter	file:
name	merc.h	/^	char     name[20];$/;"	m	struct:social_type
name	merc.h	/^	char *      name;$/;"	m	struct:area_data
name	merc.h	/^	char *      name;$/;"	m	struct:char_data
name	merc.h	/^	char *      name;$/;"	m	struct:obj_data
name	merc.h	/^	char *      name;$/;"	m	struct:obj_index_data
name	merc.h	/^	char *  name;           \/* MUST be in race_type *\/$/;"	m	struct:pc_race_type
name	merc.h	/^	char *  name;           \/* Name of skill        *\/$/;"	m	struct:skill_type
name	merc.h	/^	char *  name;           \/* call name of the race *\/$/;"	m	struct:race_type
name	merc.h	/^	char *  name;           \/* name *\/$/;"	m	struct:attack_type
name	merc.h	/^	char *  name;           \/* special function name *\/$/;"	m	struct:spec_type
name	merc.h	/^	char *  name;$/;"	m	struct:ban_data
name	merc.h	/^	char *  name;$/;"	m	struct:group_type
name	merc.h	/^	char *  name;$/;"	m	struct:item_type
name	merc.h	/^	char *  name;$/;"	m	struct:stance_type
name	merc.h	/^	char *  name;$/;"	m	struct:weapon_type
name	merc.h	/^	char *  name;$/;"	m	struct:wiznet_type
name	merc.h	/^	char *name;$/;"	m	struct:channel_type
name	merc.h	/^    char *	name;$/;"	m	struct:wiz_data
name	merc.h	/^    char *              name;$/;"	m	struct:grant_data
name	merc.h	/^    char *      name;$/;"	m	struct:room_index_data
name	merc.h	/^    char *   name;$/;"	m	struct:clan_data
name	merc.h	/^    char *   name;$/;"	m	struct:clan_rank_data
name	merc.h	/^    char *  name;           \/* the full name of the class *\/$/;"	m	struct:class_type
name	merc.h	/^    char *  name;$/;"	m	struct:mastery_group_type
name	merc.h	/^    char * name;$/;"	m	struct:align_type
name	merc.h	/^    char *name;$/;"	m	struct:comm_history_entry
name	merc.h	/^    char *name;$/;"	m	struct:portal_data
name	merc.h	/^    char *name;$/;"	m	struct:reserved_data
name	merc.h	/^   char   *name;     \/* Keyword *\/$/;"	m	struct:crime_data
name	merc.h	/^   char  * name;           \/* Name of character awaiting authorization *\/$/;"	m	struct:auth_list
name	mob_cmds.h	/^    char * const	name;$/;"	m	struct:mob_cmd_type
name	mudconfig.h	/^    const char *name;$/;"	m	struct:config_data_entry
name	olc.h	/^    char * const	name;$/;"	m	struct:editor_cmd_type
name	olc.h	/^    char * const	name;$/;"	m	struct:olc_cmd_type
name	quest.c	/^    char name[MIL];$/;"	m	struct:quest_item	file:
name	religion.c	/^    char *name;$/;"	m	struct:god_action	file:
name	religion.h	/^    char *name;$/;"	m	struct:follower_data
name	religion.h	/^    char *name;$/;"	m	struct:religion_data
name	religion.h	/^    char *name;$/;"	m	struct:religion_rank_data
name	remort.c	/^    char *name;$/;"	m	struct:remort_chamber	file:
name	remort.c	/^    char *name;$/;"	m	struct:remort_table	file:
name	smith.c	/^    char * const            name;$/;"	m	struct:smith_set_arg	file:
name	smith.c	/^    char * const    name;$/;"	m	struct:smith_arg	file:
name	tables.h	/^	char *name;$/;"	m	struct:stat_type
name	tables.h	/^    char *name;                                \/* "nochannel", "noemote", "freeze", etc. *\/$/;"	m	struct:penalty_type
name	tables.h	/^    char *name;$/;"	m	struct:flag_type
name	tables.h	/^    char *name;$/;"	m	struct:position_type
name	tables.h	/^    char *name;$/;"	m	struct:sex_type
name	tables.h	/^    char *name;$/;"	m	struct:size_type
name_color	merc.h	/^    char *	name_color;$/;"	m	struct:pc_data
name_lookup	lookup.c	/^char *name_lookup(const int bit, const struct flag_type *flag_table)$/;"	f
name_sorted_group_table	lua_main.c	/^int name_sorted_group_table( int sequence )$/;"	f
name_sorted_skill_table	lua_main.c	/^int name_sorted_skill_table( int sequence )$/;"	f
names	merc.h	/^	char *names;           \/* Default recipient *\/$/;"	m	struct:board_data
nanny	nanny.c	/^void nanny( DESCRIPTOR_DATA *d, char *argument )$/;"	f
narg	lua_scripting.c	/^    int narg; \/* set during init *\/$/;"	m	struct:lua_scripter	file:
nasty_signal_handler	comm.c	/^void nasty_signal_handler (int no)$/;"	f
negate	grep.c	/^    bool negate;$/;"	m	struct:grep_data	file:
negotiated_t	protocol.h	/^} negotiated_t;$/;"	t	typeref:enum:__anon7
new_affect	recycle.c	/^AFFECT_DATA *new_affect(void)$/;"	f
new_apcode	mem.c	/^PROG_CODE *new_apcode(void)$/;"	f
new_aprog	recycle.c	/^PROG_LIST *new_aprog(void)$/;"	f
new_area	mem.c	/^AREA_DATA *new_area( void )$/;"	f
new_ban	recycle.c	/^BAN_DATA *new_ban(void)$/;"	f
new_buf	recycle.c	/^BUFFER *new_buf()$/;"	f
new_buf_size	recycle.c	/^BUFFER *new_buf_size(int size)$/;"	f
new_char	recycle.c	/^CHAR_DATA *new_char (void)$/;"	f
new_crime	recycle.c	/^CRIME_DATA *new_crime(void)$/;"	f
new_descriptor	recycle.c	/^DESCRIPTOR_DATA *new_descriptor(void)$/;"	f
new_exit	mem.c	/^EXIT_DATA *new_exit( void )$/;"	f
new_extra_descr	recycle.c	/^EXTRA_DESCR_DATA *new_extra_descr(void)$/;"	f
new_follower	religion.c	/^FOLLOWER_DATA* new_follower( RELIGION_DATA *religion, char *name )$/;"	f
new_gen_data	recycle.c	/^GEN_DATA *new_gen_data(void)$/;"	f
new_grep_data	grep.c	/^GREP_DATA* new_grep_data( sh_int stat, int value, char *str_value, bool negate )$/;"	f
new_had	recycle.c	/^HELP_AREA * new_had ( void )$/;"	f
new_help	recycle.c	/^HELP_DATA * new_help ( void )$/;"	f
new_load_area	db.c	/^void new_load_area( FILE *fp )$/;"	f
new_luaval	lua_arclib.c	/^LUA_EXTRA_VAL *new_luaval( int type, const char *name, const char *val, bool persist )$/;"	f
new_mem_data	recycle.c	/^MEM_DATA *new_mem_data(void)$/;"	f
new_mob_index	mem.c	/^MOB_INDEX_DATA *new_mob_index( void )$/;"	f
new_mpcode	mem.c	/^PROG_CODE *new_mpcode(void)$/;"	f
new_mprog	recycle.c	/^PROG_LIST *new_mprog(void)$/;"	f
new_note	recycle.c	/^NOTE_DATA *new_note ()$/;"	f
new_obj	merc.h	/^    OBJ_DATA *new_obj;$/;"	m	struct:smith_data
new_obj	recycle.c	/^OBJ_DATA *new_obj(void)$/;"	f
new_obj_index	mem.c	/^OBJ_INDEX_DATA *new_obj_index( void )$/;"	f
new_opcode	mem.c	/^PROG_CODE *new_opcode(void)$/;"	f
new_oprog	recycle.c	/^PROG_LIST *new_oprog(void)$/;"	f
new_pcdata	recycle.c	/^PC_DATA *new_pcdata(void)$/;"	f
new_penalty	merc.h	/^    PENALTY_DATA *new_penalty;$/;"	m	struct:pc_data
new_penalty	penalty.c	/^PENALTY_DATA *new_penalty(CHAR_DATA *imm, CHAR_DATA *victim)$/;"	f
new_portal	recycle.c	/^PORTAL_DATA *new_portal( void )$/;"	f
new_quest	recycle.c	/^QUEST_DATA *new_quest(void)$/;"	f
new_religion	religion.c	/^RELIGION_DATA* new_religion()$/;"	f
new_reset	db.c	/^ void new_reset( ROOM_INDEX_DATA *pR, RESET_DATA *pReset )$/;"	f
new_reset	redit-ilab.c	/^static RESET_DATA* new_reset ()$/;"	f	file:
new_reset_data	mem.c	/^RESET_DATA *new_reset_data( void )$/;"	f
new_room_index	mem.c	/^ROOM_INDEX_DATA *new_room_index( void )$/;"	f
new_rpcode	mem.c	/^PROG_CODE *new_rpcode(void)$/;"	f
new_rprog	recycle.c	/^PROG_LIST *new_rprog(void)$/;"	f
new_shop	mem.c	/^SHOP_DATA *new_shop( void )$/;"	f
new_sort	recycle.c	/^SORT_TABLE *new_sort(void)$/;"	f
new_tells	merc.h	/^	bool	new_tells; \/* whether there are unread tells *\/$/;"	m	struct:pc_data
new_timer_node	timer.c	/^static TIMER_NODE *new_timer_node( void *gobj, int go_type, int tm_type, int seconds, const char *tag )$/;"	f	file:
new_wiz	recycle.c	/^WIZ_DATA *new_wiz(void)$/;"	f
newbie	merc.h	/^	int newbie[3];          \/* {n *\/$/;"	m	struct:pc_data
newbie_alert	nanny.c	/^void newbie_alert(DESCRIPTOR_DATA *d)$/;"	f
newbie_data	act_info.c	/^struct newbie_data$/;"	s	file:
newbie_text	merc.h	/^	int newbie_text[3];     \/* {N *\/$/;"	m	struct:pc_data
newindex	lua_arclib.h	/^    int (*newindex)();$/;"	m	struct:lua_obj_type
newlock	comm.c	/^bool            newlock;        \/* Game is newlocked        *\/$/;"	v
next	buffer_util.h	/^  MEMFILE *next;$/;"	m	struct:mem_file_type
next	grep.c	/^    GREP_DATA *next;$/;"	m	struct:grep_data	file:
next	hunt.c	/^    struct hash_link  *next;$/;"	m	struct:hash_link	typeref:struct:hash_link::hash_link	file:
next	lua_arclib.h	/^    struct lua_extra_val *next;$/;"	m	struct:lua_extra_val	typeref:struct:lua_extra_val::lua_extra_val
next	merc.h	/^	AREA_DATA * next;$/;"	m	struct:area_data
next	merc.h	/^	BAN_DATA *  next;$/;"	m	struct:ban_data
next	merc.h	/^	BUFFER *    next;$/;"	m	struct:buf_type
next	merc.h	/^	CHAR_DATA *     next;$/;"	m	struct:char_data
next	merc.h	/^	DESCRIPTOR_DATA *   next;$/;"	m	struct:descriptor_data
next	merc.h	/^	EXTRA_DESCR_DATA *next; \/* Next in list                     *\/$/;"	m	struct:extra_descr_data
next	merc.h	/^	GEN_DATA    *next;$/;"	m	struct:gen_data
next	merc.h	/^	MOB_INDEX_DATA_OLD *    next;$/;"	m	struct:mob_index_data_old
next	merc.h	/^	NOTE_DATA * next;$/;"	m	struct:note_data
next	merc.h	/^	OBJ_DATA *      next;$/;"	m	struct:obj_data
next	merc.h	/^	OBJ_INDEX_DATA *    next;$/;"	m	struct:obj_index_data
next	merc.h	/^	PERS_ENTRY *next;$/;"	m	struct:pers_comm_entry
next	merc.h	/^	PROG_CODE *    next;$/;"	m	struct:prog_code
next	merc.h	/^	PROG_LIST *    next;$/;"	m	struct:prog_list
next	merc.h	/^	RESET_DATA *    next;$/;"	m	struct:reset_data
next	merc.h	/^	SHOP_DATA * next;           \/* Next shop in list        *\/$/;"	m	struct:shop_data
next	merc.h	/^	SORT_TABLE *    next;$/;"	m	struct:sort_table
next	merc.h	/^	struct explore_holder *next;$/;"	m	struct:explore_holder	typeref:struct:explore_holder::explore_holder
next	merc.h	/^    AFFECT_DATA *   next;$/;"	m	struct:affect_data
next	merc.h	/^    COMM_ENTRY *next;$/;"	m	struct:comm_history_entry
next	merc.h	/^    EXIT_DATA * next;       \/* OLC *\/$/;"	m	struct:exit_data
next	merc.h	/^    GRANT_DATA *        next;$/;"	m	struct:grant_data
next	merc.h	/^    MEM_DATA    *next;$/;"	m	struct:mem_data
next	merc.h	/^    MOB_INDEX_DATA* next;$/;"	m	struct:mob_index_data
next	merc.h	/^    PC_DATA *       next;$/;"	m	struct:pc_data
next	merc.h	/^    PENALTY_DATA *next;           \/* Pointer to next node *\/$/;"	m	struct:penalty_data
next	merc.h	/^    PORTAL_DATA *next;$/;"	m	struct:portal_data
next	merc.h	/^    QUEST_DATA *next;$/;"	m	struct:quest_data
next	merc.h	/^    RESERVED_DATA *next;$/;"	m	struct:reserved_data
next	merc.h	/^    ROOM_INDEX_DATA *   next;$/;"	m	struct:room_index_data
next	merc.h	/^    WIZ_DATA *	next;$/;"	m	struct:wiz_data
next	merc.h	/^   AUTH_LIST *next;$/;"	m	struct:auth_list
next	merc.h	/^   CLANWAR_DATA *next;$/;"	m	struct:clanwar_data
next	merc.h	/^   CRIME_DATA *next;$/;"	m	struct:crime_data
next	merc.h	/^   DISABLED_DATA *next;            \/* pointer to next node *\/$/;"	m	struct:disabled_data
next	merc.h	/^   HELP_AREA *  next;$/;"	m	struct:help_area_data
next	merc.h	/^   HELP_DATA * next;$/;"	m	struct:help_data
next	religion.h	/^    FOLLOWER_DATA *next;$/;"	m	struct:follower_data
next	religion.h	/^    RELIGION_DATA *next;$/;"	m	struct:religion_data
next	remort.c	/^    REMORT_TABLE *next;$/;"	m	struct:remort_table	file:
next	timer.c	/^    struct timer_node *next;$/;"	m	struct:timer_node	typeref:struct:timer_node::timer_node	file:
next_area	merc.h	/^   HELP_DATA * next_area;$/;"	m	struct:help_data
next_board	board.c	/^static bool next_board (CHAR_DATA *ch)$/;"	f	file:
next_content	merc.h	/^	OBJ_DATA *      next_content;$/;"	m	struct:obj_data
next_in_room	merc.h	/^	CHAR_DATA *     next_in_room;$/;"	m	struct:char_data
next_q	hunt.c	/^    struct room_q *next_q;$/;"	m	struct:room_q	typeref:struct:room_q::room_q	file:
next_read	buffer_util.h	/^  int next_read;$/;"	m	struct:read_buffer_type
next_sr_buf	buffer.c	/^char* next_sr_buf( SR_BUF *sr_buf )$/;"	f
nextquest	merc.h	/^	sh_int              nextquest; \/* Vassago *\/$/;"	m	struct:pc_data
nice_dam_die	olc_act.c	/^int nice_dam_die( int dam )$/;"	f
nn	merc.h	1176;"	d
nodes	hunt.c	/^struct nodes$/;"	s	file:
note	act_wiz.c	/^    const char *note;$/;"	m	struct:__anon1	file:
note_data	merc.h	/^struct  note_data$/;"	s
note_first	merc.h	/^	NOTE_DATA *note_first; \/* pointer to board's first note *\/$/;"	m	struct:board_data
note_free	db.c	/^NOTE_DATA *     note_free;$/;"	v
note_free	recycle.c	/^NOTE_DATA *note_free;$/;"	v
note_line	board.c	/^const static char* note_line = $/;"	v	file:
notes	merc.h	/^    char *      notes;$/;"	m	struct:area_data
notes	merc.h	/^    char *      notes;$/;"	m	struct:obj_index_data
notes	merc.h	/^    char *      notes;$/;"	m	struct:room_index_data
notes	merc.h	/^    char*       notes;$/;"	m	struct:mob_index_data
noun	merc.h	/^	char *  noun;           \/* message *\/$/;"	m	struct:attack_type
noun_damage	merc.h	/^	char *  noun_damage;        \/* Damage message       *\/$/;"	m	struct:skill_type
nplayer	merc.h	/^	sh_int      nplayer;$/;"	m	struct:area_data
nrtn	lua_scripting.c	/^    const int nrtn;$/;"	m	struct:lua_scripter	file:
nt_act	comm.c	/^void nt_act ( const char *format, CHAR_DATA *ch, const void *arg1, const void *arg2,$/;"	f
nt_act_new	comm.c	/^void nt_act_new ( const char *format, CHAR_DATA *ch, const void *arg1, const void *arg2,$/;"	f
nuke_pets	act_comm.c	/^void nuke_pets( CHAR_DATA *ch )$/;"	f
num_eval	mob_prog.c	/^int num_eval( int lval, int oper, int rval )$/;"	f
num_skills	merc.h	/^	sh_int  num_skills;$/;"	m	struct:pc_race_type
number	merc.h	/^	sh_int      number;$/;"	m	struct:kill_data
number_argument	interp.c	/^int number_argument( char *argument, char *arg )$/;"	f
number_bits	db.c	/^int number_bits( int width )$/;"	f
number_door	db.c	/^int number_door( void )$/;"	f
number_fuzzy	db.c	/^int number_fuzzy( int number )$/;"	f
number_mm	db.c	/^long number_mm( void )$/;"	f
number_of_rep	merc.h	/^		int     number_of_rep;$/;"	m	struct:struckdrunk
number_percent	db.c	/^int number_percent( void )$/;"	f
number_range	db.c	/^int number_range( int from, int to )$/;"	f
numlineas	string.c	/^char *numlineas( char *string )$/;"	f
obj_cast_spell	magic.c	/^bool obj_cast_spell( int sn, int level, CHAR_DATA *ch, OBJ_DATA *obj, char *arg )$/;"	f
obj_check	act_wiz.c	/^bool obj_check (CHAR_DATA *ch, OBJ_DATA *obj)$/;"	f
obj_data	merc.h	/^struct  obj_data$/;"	s
obj_from_char	handler.c	/^void obj_from_char( OBJ_DATA *obj )$/;"	f
obj_from_obj	handler.c	/^void obj_from_obj( OBJ_DATA *obj )$/;"	f
obj_from_object_list	handler.c	/^void obj_from_object_list( OBJ_DATA *obj )$/;"	f
obj_from_room	handler.c	/^void obj_from_room( OBJ_DATA *obj )$/;"	f
obj_from_world	handler.c	/^void obj_from_world( OBJ_DATA *obj )$/;"	f
obj_index_data	merc.h	/^struct  obj_index_data$/;"	s
obj_index_hash	db.c	/^OBJ_INDEX_DATA *    obj_index_hash      [MAX_KEY_HASH];$/;"	v
obj_on_char	alchemy.c	/^OBJ_DATA* obj_on_char( CHAR_DATA *ch, int vnum )$/;"	f
obj_ovalue	olc_act.c	/^static int obj_ovalue[][OBJ_STAT_NR] = {$/;"	v	file:
obj_reward	merc.h	/^   int obj_reward;   $/;"	m	struct:achievement_entry
obj_to_char	handler.c	/^void obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch )$/;"	f
obj_to_keeper	act_obj.c	/^void obj_to_keeper( OBJ_DATA *obj, CHAR_DATA *ch )$/;"	f
obj_to_obj	handler.c	/^void obj_to_obj( OBJ_DATA *obj, OBJ_DATA *obj_to )$/;"	f
obj_to_room	handler.c	/^void obj_to_room( OBJ_DATA *obj, ROOM_INDEX_DATA *pRoomIndex )$/;"	f
obj_update	update.c	/^void obj_update( void )$/;"	f
object_count	db.c	/^int  object_count = 0;$/;"	v
object_list	db.c	/^OBJ_DATA *      object_list;$/;"	v
oedit	olc.c	/^void oedit( CHAR_DATA *ch, char *argument )$/;"	f
oedit_addaffect	olc.h	/^DECLARE_OLC_FUN( oedit_addaffect	);$/;"	v
oedit_addapply	olc.h	/^DECLARE_OLC_FUN( oedit_addapply		);$/;"	v
oedit_addoprog	olc.h	/^DECLARE_OLC_FUN( oedit_addoprog  );  \/* ROM *\/$/;"	v
oedit_adjust	olc.h	/^DECLARE_OLC_FUN( oedit_adjust           );$/;"	v
oedit_affect	olc.h	/^DECLARE_OLC_FUN( oedit_affect           );  \/* ROM *\/$/;"	v
oedit_clan	olc.h	/^DECLARE_OLC_FUN( oedit_clan		);$/;"	v
oedit_combine	olc.h	/^DECLARE_OLC_FUN( oedit_combine          );  \/* ROM *\/$/;"	v
oedit_condition	olc.h	/^DECLARE_OLC_FUN( oedit_condition        );  \/* ROM *\/$/;"	v
oedit_cost	olc.h	/^DECLARE_OLC_FUN( oedit_cost		);$/;"	v
oedit_create	olc.h	/^DECLARE_OLC_FUN( oedit_create		);$/;"	v
oedit_delaffect	olc.h	/^DECLARE_OLC_FUN( oedit_delaffect	);$/;"	v
oedit_delete	olc.h	/^DECLARE_OLC_FUN( oedit_delete   );$/;"	v
oedit_deloprog	olc.h	/^DECLARE_OLC_FUN( oedit_deloprog  );  \/* ROM *\/$/;"	v
oedit_ed	olc.h	/^DECLARE_OLC_FUN( oedit_ed		);$/;"	v
oedit_extra	olc.h	/^DECLARE_OLC_FUN( oedit_extra            );  \/* ROM *\/$/;"	v
oedit_level	olc.h	/^DECLARE_OLC_FUN( oedit_level            );  \/* ROM *\/$/;"	v
oedit_long	olc.h	/^DECLARE_OLC_FUN( oedit_long		);$/;"	v
oedit_material	olc.h	/^DECLARE_OLC_FUN( oedit_material		);  \/* ROM *\/$/;"	v
oedit_name	olc.h	/^DECLARE_OLC_FUN( oedit_name		);$/;"	v
oedit_notes	olc.h	/^DECLARE_OLC_FUN( oedit_notes    );$/;"	v
oedit_rank	olc.h	/^DECLARE_OLC_FUN( oedit_rank		);$/;"	v
oedit_rating	olc.h	/^DECLARE_OLC_FUN( oedit_rating           );  \/* ROM *\/$/;"	v
oedit_short	olc.h	/^DECLARE_OLC_FUN( oedit_short		);$/;"	v
oedit_show	olc.h	/^DECLARE_OLC_FUN( oedit_show		);$/;"	v
oedit_table	olc.c	/^const struct olc_cmd_type oedit_table[] =$/;"	v	typeref:struct:olc_cmd_type
oedit_type	olc.h	/^DECLARE_OLC_FUN( oedit_type             );  \/* ROM *\/$/;"	v
oedit_value0	olc.h	/^DECLARE_OLC_FUN( oedit_value0		);$/;"	v
oedit_value1	olc.h	/^DECLARE_OLC_FUN( oedit_value1		);$/;"	v
oedit_value2	olc.h	/^DECLARE_OLC_FUN( oedit_value2		);$/;"	v
oedit_value3	olc.h	/^DECLARE_OLC_FUN( oedit_value3		);$/;"	v
oedit_value4	olc.h	/^DECLARE_OLC_FUN( oedit_value4		);  \/* ROM *\/$/;"	v
oedit_values	olc_act.c	/^bool oedit_values( CHAR_DATA *ch, char *argument, int value )$/;"	f
oedit_wear	olc.h	/^DECLARE_OLC_FUN( oedit_wear             );  \/* ROM *\/$/;"	v
oedit_weight	olc.h	/^DECLARE_OLC_FUN( oedit_weight		);$/;"	v
off	merc.h	/^	tflag    off;            \/* off bits for the race *\/$/;"	m	struct:race_type
off_bit_name	handler.c	/^char* off_bit_name( int flag )$/;"	f
off_bits_name	handler.c	/^char* off_bits_name( tflag flag )$/;"	f
off_flags	merc.h	/^	tflag        off_flags;$/;"	m	struct:char_data
off_flags	merc.h	/^	tflag        off_flags;$/;"	m	struct:mob_index_data_old
off_flags	merc.h	/^    tflag       off_flags;$/;"	m	struct:mob_index_data
off_flags	tables.c	/^const struct flag_type off_flags[] =$/;"	v	typeref:struct:flag_type
offbit	merc.h	/^	sh_int offbit;$/;"	m	struct:channel_type
offhand_attack_chance	fight.c	/^int offhand_attack_chance( CHAR_DATA *ch, bool improve )$/;"	f
olc	interp.h	/^	bool        olc;$/;"	m	struct:cmd_type
olc_cmd_type	olc.h	/^struct olc_cmd_type$/;"	s
olc_ed_name	olc.c	/^char *olc_ed_name( CHAR_DATA *ch )$/;"	f
olc_ed_vnum	olc.c	/^char *olc_ed_vnum( CHAR_DATA *ch )$/;"	f
olc_fun	olc.h	/^    OLC_FUN *		olc_fun;$/;"	m	struct:olc_cmd_type
olc_help_type	olc_act.c	/^struct olc_help_type$/;"	s	file:
old_obj	merc.h	/^    OBJ_DATA *old_obj;$/;"	m	struct:smith_data
on	merc.h	/^	OBJ_DATA *      on;$/;"	m	struct:char_data
on	merc.h	/^	OBJ_DATA *      on;$/;"	m	struct:obj_data
on	warfare.h	/^   bool on;$/;"	m	struct:war_data
one_argument	interp.c	/^char *one_argument( char *argument, char *arg_first )$/;"	f
one_argument_keep_case	interp.c	/^char *one_argument_keep_case( char *argument, char *arg_first )$/;"	f
one_hit	fight.c	/^bool one_hit ( CHAR_DATA *ch, CHAR_DATA *victim, int dt, bool secondary )$/;"	f
one_hit_damage	fight.c	/^int one_hit_damage( CHAR_DATA *ch, CHAR_DATA *victim, int dt, OBJ_DATA *wield )$/;"	f
one_way	interp.h	/^    bool              one_way;$/;"	m	struct:pair_type
oo	merc.h	1177;"	d
ooze_effect	breath.c	/^void ooze_effect( void *vo, int level, int dam, int target )$/;"	f
op_act_trigger	obj_prog.c	/^bool op_act_trigger($/;"	f
op_fight_trigger	obj_prog.c	/^void op_fight_trigger( CHAR_DATA *ch, CHAR_DATA *vic )$/;"	f
op_greet_trigger	obj_prog.c	/^void op_greet_trigger( CHAR_DATA *ch )$/;"	f
op_percent_trigger	obj_prog.c	/^bool op_percent_trigger($/;"	f
op_prehit_trigger	obj_prog.c	/^bool op_prehit_trigger( OBJ_DATA *obj, CHAR_DATA *ch, CHAR_DATA *vic, int damage)$/;"	f
op_speech_trigger	obj_prog.c	/^void op_speech_trigger( char *argument, CHAR_DATA *ch )$/;"	f
op_timer_trigger	obj_prog.c	/^void op_timer_trigger( OBJ_DATA *obj )$/;"	f
op_try_trigger	obj_prog.c	/^bool op_try_trigger( char* argument, CHAR_DATA *ch )$/;"	f
opedit	olc_opcode.c	/^void opedit( CHAR_DATA *ch, char *argument)$/;"	f
opedit_code	olc.h	/^DECLARE_OLC_FUN( opedit_code     );$/;"	v
opedit_create	olc.h	/^DECLARE_OLC_FUN( opedit_create   );$/;"	v
opedit_delete	olc.h	/^DECLARE_OLC_FUN( opedit_delete   );$/;"	v
opedit_security	olc.h	/^DECLARE_OLC_FUN( opedit_security );$/;"	v
opedit_show	olc.h	/^DECLARE_OLC_FUN( opedit_show     );$/;"	v
opedit_table	olc_opcode.c	/^const struct olc_cmd_type opedit_table[] =$/;"	v	typeref:struct:olc_cmd_type
open_hour	merc.h	/^	sh_int  open_hour;      \/* First opening hour       *\/$/;"	m	struct:shop_data
open_lua	lua_main.c	/^void open_lua ()$/;"	f
oprog_flags	merc.h	/^    tflag   oprog_flags;$/;"	m	struct:obj_index_data
oprog_flags	tables.c	/^const struct flag_type oprog_flags[] =$/;"	v	typeref:struct:flag_type
oprog_list	db.c	/^PROG_CODE *    oprog_list;$/;"	v
oprog_setup	obj_prog.c	/^void oprog_setup( OBJ_DATA *obj )$/;"	f
oprog_timer_init	obj_prog.c	/^void oprog_timer_init( OBJ_DATA *obj)$/;"	f
oprogs	merc.h	/^    PROG_LIST *oprogs;$/;"	m	struct:obj_index_data
org_max_vnum	vshift.c	/^static int org_max_vnum = 0;$/;"	v	file:
org_min_vnum	vshift.c	/^static int org_min_vnum = 0;$/;"	v	file:
orig_door	merc.h	/^	int         orig_door;  \/* OLC *\/$/;"	m	struct:exit_data
original	merc.h	/^	CHAR_DATA *     original;$/;"	m	struct:descriptor_data
original_char	comm.c	/^CHAR_DATA* original_char( CHAR_DATA *ch )$/;"	f
original_stats	merc.h	/^    sh_int      original_stats[MAX_STATS];$/;"	m	struct:pc_data
other_save_list	simsave.c	/^MEMFILE *other_save_list = NULL;$/;"	v
others_auto	merc.h	/^	char *      others_auto;$/;"	m	struct:social_type
others_found	merc.h	/^	char *    others_found;$/;"	m	struct:social_type
others_no_arg	merc.h	/^	char *    others_no_arg;$/;"	m	struct:social_type
otrig_timer	merc.h	/^    TIMER_NODE *otrig_timer; \/* should not be touched except in timer.c *\/$/;"	m	struct:obj_data
outbuf	merc.h	/^	char *      outbuf;$/;"	m	struct:descriptor_data
outsize	merc.h	/^	int         outsize;$/;"	m	struct:descriptor_data
outtop	merc.h	/^	int         outtop;$/;"	m	struct:descriptor_data
overflowed	merc.h	/^	bool overflowed; \/* Is the buffer overflowed? *\/$/;"	m	struct:buffer_type
owner	merc.h	/^	CHAR_DATA  *    owner;$/;"	m	struct:sort_table
owner	merc.h	/^	char *          owner;$/;"	m	struct:obj_data
owner	merc.h	/^    char *      owner;$/;"	m	struct:room_index_data
owner	warfare.h	/^   long owner;$/;"	m	struct:war_data
pDefault	protocol.h	/^   const char  *pDefault;      \/* The default value for a string *\/$/;"	m	struct:__anon10
pEdit	merc.h	/^	void *              pEdit;      \/* OLC *\/$/;"	m	struct:descriptor_data
pFunction	protocol.h	/^   const char  *(*pFunction)();\/* Optional function to return the value *\/$/;"	m	struct:__anon12
pIndexData	merc.h	/^	MOB_INDEX_DATA *    pIndexData;$/;"	m	struct:char_data
pIndexData	merc.h	/^	OBJ_INDEX_DATA *    pIndexData;$/;"	m	struct:obj_data
pLastTTYPE	protocol.h	/^   char     *pLastTTYPE;       \/* Used for the cyclic TTYPE check *\/$/;"	m	struct:__anon13
pMXPVersion	protocol.h	/^   char     *pMXPVersion;      \/* The version of MXP supported *\/$/;"	m	struct:__anon13
pName	protocol.h	/^   const char  *pName;         \/* The name of the MSSP variable *\/$/;"	m	struct:__anon12
pName	protocol.h	/^   const char  *pName;         \/* The string name of this variable *\/$/;"	m	struct:__anon10
pProtocol	merc.h	/^    protocol_t *        pProtocol;$/;"	m	struct:descriptor_data
pShop	merc.h	/^	SHOP_DATA *     pShop;$/;"	m	struct:mob_index_data_old
pShop	merc.h	/^    SHOP_DATA*  pShop;$/;"	m	struct:mob_index_data
pString	merc.h	/^	char **             pString;    \/* OLC *\/$/;"	m	struct:descriptor_data
pValue	protocol.h	/^   const char  *pValue;        \/* The value of the MSSP variable *\/$/;"	m	struct:__anon12
pValueString	protocol.h	/^   char        *pValueString;  \/* The string value of the variable *\/$/;"	m	struct:__anon11
pVariables	protocol.h	/^   MSDP_t  **pVariables;       \/* The MSDP variables *\/$/;"	m	struct:__anon13
page_to_char	comm.c	/^void page_to_char( const char *txt, CHAR_DATA *ch )$/;"	f
page_to_char_bw	comm.c	/^void page_to_char_bw( const char *txt, CHAR_DATA *ch )$/;"	f
page_to_char_new	comm.c	/^void page_to_char_new( const char *txt, CHAR_DATA *ch, bool raw )$/;"	f
pair_table	grant.c	/^const   struct  pair_type        pair_table       [] =$/;"	v	typeref:struct:pair_type
pair_type	interp.h	/^struct pair_type$/;"	s
paralysis_effect	effects.c	/^void paralysis_effect(void *vo,int level, int dam, int target)$/;"	f
parry_chance	fight.c	/^int parry_chance( CHAR_DATA *ch, CHAR_DATA *opp, bool improve )$/;"	f
parse_door_state	redit-ilab.c	/^static int parse_door_state (char* state)$/;"	f	file:
parse_gen_groups	skills.c	/^bool parse_gen_groups(CHAR_DATA *ch,char *argument)$/;"	f
parse_mob_grep	grep.c	/^GREP_DATA* parse_mob_grep( CHAR_DATA *ch, char *argument )$/;"	f
parse_obj_grep	grep.c	/^GREP_DATA* parse_obj_grep( CHAR_DATA *ch, char *argument )$/;"	f
parse_roll_stats	stats.c	/^bool parse_roll_stats (CHAR_DATA *ch,char *argument)$/;"	f
parse_room_grep	grep.c	/^GREP_DATA* parse_room_grep( CHAR_DATA *ch, char *argument )$/;"	f
parse_url	act_comm.c	/^char *parse_url( char *argument)$/;"	f
parse_vnum	redit-ilab.c	39;"	d	file:
part_bit_name	handler.c	/^char* part_bit_name( int flag )$/;"	f
part_bits_name	handler.c	/^char* part_bits_name( tflag flag )$/;"	f
part_flags	tables.c	/^const struct flag_type part_flags[] =$/;"	v	typeref:struct:flag_type
parts	merc.h	/^	tflag        parts;$/;"	m	struct:char_data
parts	merc.h	/^	tflag        parts;$/;"	m	struct:mob_index_data_old
parts	merc.h	/^	tflag    parts;          \/* default parts for the race *\/$/;"	m	struct:race_type
parts	merc.h	/^    tflag       parts;$/;"	m	struct:mob_index_data
passive_update	passive.c	/^void passive_update(CHAR_DATA *ch) $/;"	f
patron	merc.h	/^    char *   patron;            \/* Patron name referenced in code. *\/$/;"	m	struct:clan_data
pc_data	merc.h	/^struct  pc_data$/;"	s
pc_get_skill	skills.c	/^int pc_get_skill(CHAR_DATA *ch, int sn)$/;"	f
pc_race	merc.h	/^	bool    pc_race;        \/* can be chosen by pcs *\/$/;"	m	struct:race_type
pc_race_lookup	lookup.c	/^int pc_race_lookup (const char *name)$/;"	f
pc_race_table	const.c	/^struct  pc_race_type    pc_race_table   [MAX_PC_RACE]  =$/;"	v	typeref:struct:pc_race_type
pc_race_type	merc.h	/^struct pc_race_type  \/* additional data for pc races *\/$/;"	s
pc_skill_prac	skills.c	/^int pc_skill_prac(CHAR_DATA *ch, int sn)$/;"	f
pcdata	merc.h	/^	PC_DATA *       pcdata;$/;"	m	struct:char_data
pcdata_free	recycle.c	/^PC_DATA *pcdata_free;$/;"	v
pdeaths	merc.h	/^    long     pdeaths;           \/* Number of pkill deaths by clan members *\/$/;"	m	struct:clan_data
penalty	merc.h	/^        tflag       penalty;$/;"	m	struct:char_data
penalty_bits_name	handler.c	/^char *penalty_bits_name( tflag penalty_flags )$/;"	f
penalty_confirm	penalty.c	/^void  penalty_confirm ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_data	merc.h	/^struct penalty_data$/;"	s
penalty_finish	penalty.c	/^void penalty_finish  ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_handled	penalty.c	/^bool penalty_handled( CHAR_DATA *ch, CHAR_DATA *victim, char *pentype )$/;"	f
penalty_hours	penalty.c	/^void penalty_hours ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_list	penalty.c	/^PENALTY_DATA *penalty_list;$/;"	v
penalty_penlist	penalty.c	/^void penalty_penlist ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_points	penalty.c	/^void  penalty_points  ( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_severity	penalty.c	/^void  penalty_severity( DESCRIPTOR_DATA *d, char * argument )$/;"	f
penalty_status_name	penalty.c	/^char *penalty_status_name(int status)$/;"	f
penalty_table	tables.c	/^const struct penalty_type penalty_table[] = $/;"	v	typeref:struct:penalty_type
penalty_table_lookup	lookup.c	/^int penalty_table_lookup(const char *name)$/;"	f
penalty_type	merc.h	/^    char *penalty_type;           \/* Type of penalty *\/$/;"	m	struct:penalty_data
penalty_type	tables.h	/^struct penalty_type$/;"	s
penalty_update	penalty.c	/^void penalty_update(CHAR_DATA *ch)$/;"	f
people	merc.h	/^    CHAR_DATA *     people;$/;"	m	struct:room_index_data
per_chance	quest.c	/^bool per_chance(int num)$/;"	f
perm_hit	merc.h	/^    int      perm_hit;$/;"	m	struct:pc_data
perm_mana	merc.h	/^    int      perm_mana;$/;"	m	struct:pc_data
perm_move	merc.h	/^    int      perm_move;$/;"	m	struct:pc_data
perm_stat	merc.h	/^	sh_int      perm_stat[MAX_STATS];$/;"	m	struct:char_data
pers_comm_entry	merc.h	/^struct pers_comm_entry$/;"	s
pers_comm_history	merc.h	/^struct pers_comm_history$/;"	s
pers_entry_free	playback.c	/^void pers_entry_free(PERS_ENTRY *entry)$/;"	f
pers_entry_new	playback.c	/^PERS_ENTRY *pers_entry_new()$/;"	f
pers_history_free	playback.c	/^void pers_history_free(PERS_HISTORY *history)$/;"	f
pers_history_new	playback.c	/^PERS_HISTORY *pers_history_new()$/;"	f
persist	lua_arclib.h	/^    bool persist;$/;"	m	struct:lua_extra_val
personal_message	board.c	/^void personal_message (const char *sender, const char *to, const char *subject, const int expire_days, const char *text)$/;"	f
pet	merc.h	/^	CHAR_DATA *     pet;$/;"	m	struct:char_data
pfile_exists	simsave.c	/^bool pfile_exists( char *name )$/;"	f
pfile_version	bsave.c	/^static int pfile_version = 0;$/;"	v	file:
pgsn	merc.h	/^	sh_int *pgsn;           \/* Pointer to associated gsn    *\/$/;"	m	struct:skill_type
pick_weapon	nanny.c	/^bool	pick_weapon ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
pkgrade_table	tables.c	/^const struct pkgrade_type pkgrade_table[] =$/;"	v	typeref:struct:pkgrade_type
pkgrade_type	tables.h	/^struct pkgrade_type$/;"	s
pkill_confirm	flags.c	/^pkill_confirm(CHAR_DATA *ch, char *arg)$/;"	f
pkill_count	merc.h	/^    sh_int      pkill_count;$/;"	m	struct:pc_data
pkill_deaths	merc.h	/^    sh_int      pkill_deaths;$/;"	m	struct:pc_data
pkill_expire	merc.h	/^    time_t pkill_expire; \/* timestamp when you can turn it off *\/$/;"	m	struct:pc_data
pkill_timer	merc.h	/^    sh_int      pkill_timer;$/;"	m	struct:pc_data
pkills	merc.h	/^    long     pkills;            \/* Number of players pkilled by clan members *\/$/;"	m	struct:clan_data
pkills	merc.h	/^   int pkills;            \/* Number of pkills by this clan during war  *\/$/;"	m	struct:clanwar_data
pkpoints	merc.h	/^    sh_int	pkpoints;      \/* Initialy based on pkill_count, pkpoints determine pk grade *\/$/;"	m	struct:pc_data
pkpoints	tables.h	/^    int pkpoints;$/;"	m	struct:pkgrade_type
plague	lua_arclib.c	/^GODLIBHELP_DURATION( plague );$/;"	v
plague_effect	breath.c	/^void plague_effect( void *vo, int level, int dam, int target )$/;"	f
playback_clear	playback.c	/^void playback_clear( COMM_HISTORY *history)$/;"	f
playback_pers	playback.c	/^void playback_pers( CHAR_DATA *ch, PERS_HISTORY *history, sh_int entries)$/;"	f
playback_to_char	playback.c	/^void playback_to_char( CHAR_DATA *ch, COMM_HISTORY *history, sh_int entries )$/;"	f
played	merc.h	/^	int         played;$/;"	m	struct:char_data
player_name	merc.h	/^	char *      player_name;$/;"	m	struct:mob_index_data_old
player_name	merc.h	/^    char*       player_name;$/;"	m	struct:mob_index_data
player_quit_list	simsave.c	/^MEMFILE *player_quit_list = NULL;$/;"	v
player_save_list	simsave.c	/^MEMFILE *player_save_list = NULL;$/;"	v
player_save_state	simsave.c	/^static int player_save_state = SAVE_STATE_SIMSAVE;$/;"	v	file:
plr_flags	tables.c	/^const struct flag_type plr_flags[] =$/;"	v	typeref:struct:flag_type
points	merc.h	/^    sh_int      points;$/;"	m	struct:pc_data
points	merc.h	/^    sh_int points;                \/* # of penalty (demerit) points this imposes on player *\/$/;"	m	struct:penalty_data
points_chosen	merc.h	/^	int     points_chosen;$/;"	m	struct:gen_data
poison_effect	effects.c	/^void poison_effect(void *vo,int level, int dam, int target)$/;"	f
port	comm.c	/^u_short port;$/;"	v
portal_data	merc.h	/^struct portal_data$/;"	s
portal_flags	tables.c	/^const struct flag_type portal_flags[]=$/;"	v	typeref:struct:flag_type
portal_free	recycle.c	/^PORTAL_DATA *portal_free;$/;"	v
portal_list	act_enter.c	/^PORTAL_DATA *portal_list = NULL;$/;"	v
pose_table	act_comm.c	/^const   struct  pose_table_type pose_table  [MAX_POSE]  =$/;"	v	typeref:struct:pose_table_type
pose_table_type	act_comm.c	/^struct  pose_table_type$/;"	s	file:
position	interp.h	/^	sh_int      position;$/;"	m	struct:cmd_type
position	merc.h	/^	sh_int      position;$/;"	m	struct:char_data
position_flags	tables.c	/^const struct flag_type position_flags[] =$/;"	v	typeref:struct:flag_type
position_lookup	lookup.c	/^int position_lookup (const char *name)$/;"	f
position_table	tables.c	/^const struct position_type position_table[] =$/;"	v	typeref:struct:position_type
position_type	tables.h	/^struct position_type$/;"	s
post_spell_process	magic.c	/^void post_spell_process( int sn, CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
potion_vnum	alchemy.c	/^    int potion_vnum;$/;"	m	struct:recipe_type	file:
pp	merc.h	1178;"	d
practice	merc.h	/^	sh_int      practice;$/;"	m	struct:char_data
prayed_at	merc.h	/^    time_t prayed_at;$/;"	m	struct:pc_data
prayer_data	religion.h	/^struct prayer_data$/;"	s
prayer_num	religion.h	/^    int prayer_num;$/;"	m	struct:prayer_data
prayer_request	merc.h	/^    PRAYER_DATA *prayer_request;$/;"	m	struct:pc_data
pre_title	merc.h	/^    char *	pre_title;$/;"	m	struct:pc_data
prefix	merc.h	/^	char *      prefix;$/;"	m	struct:char_data
prev	merc.h	/^	PERS_ENTRY *prev;$/;"	m	struct:pers_comm_entry
prev	merc.h	/^	SORT_TABLE *    prev;$/;"	m	struct:sort_table
prev	merc.h	/^    COMM_ENTRY *prev;$/;"	m	struct:comm_history_entry
prev	merc.h	/^    RESERVED_DATA *prev;$/;"	m	struct:reserved_data
prev	merc.h	/^   AUTH_LIST *prev;$/;"	m	struct:auth_list
prev	timer.c	/^    struct timer_node *prev;$/;"	m	struct:timer_node	typeref:struct:timer_node::timer_node	file:
price_fun	smith.c	/^    SMITH_PRICE_FUN *       price_fun;$/;"	m	struct:smith_set_arg	file:
price_string	smith.c	/^    char * const            price_string;$/;"	m	struct:smith_set_arg	file:
priest	religion.h	/^    char *priest[MAX_PRIEST];$/;"	m	struct:religion_data
prime_color	merc.h	/^	char prime_color;$/;"	m	struct:channel_type
print_ach_rewards	act_info.c	/^void print_ach_rewards(CHAR_DATA *ch)$/;"	f
print_affect	act_info.c	/^void print_affect( CHAR_DATA *ch, AFFECT_DATA *paf, FILE *fp )$/;"	f
print_attack_table	act_wiz.c	/^static void print_attack_table( CHAR_DATA *ch, const struct attack_type *tbl)$/;"	f	file:
print_flag_table	act_wiz.c	/^static void print_flag_table( CHAR_DATA *ch, const struct flag_type *tbl)$/;"	f	file:
print_flags	bsave.c	/^char *print_flags(int flag)$/;"	f
print_gag	act_comm.c	/^void print_gag(char* info_str, long value, CHAR_DATA *ch)$/;"	f
print_item_table	act_wiz.c	/^static void print_item_table( CHAR_DATA *ch, const struct item_type *tbl)$/;"	f	file:
print_liq_table	act_wiz.c	/^static void print_liq_table( CHAR_DATA *ch, const struct liq_type *tbl)$/;"	f	file:
print_pkill_expire	flags.c	/^void print_pkill_expire( CHAR_DATA *ch)$/;"	f
print_pkill_grades	flags.c	/^void print_pkill_grades( CHAR_DATA *ch )$/;"	f
print_pub_chan	act_comm.c	/^print_pub_chan( sh_int sn, CHAR_DATA *ch)$/;"	f
print_skill_table	act_wiz.c	/^static void print_skill_table (CHAR_DATA *ch, const struct skill_type *tbl)$/;"	f	file:
print_stances	act_wiz.c	/^static void print_stances( CHAR_DATA *ch, const struct stance_type *tbl)$/;"	f	file:
print_stat_bars	act_info.c	/^void print_stat_bars( CHAR_DATA *ch, BUFFER *output )$/;"	f
print_tattoos	tattoo.c	/^char* print_tattoos( tattoo_list tl )$/;"	f
print_tflag	tflag.c	/^char* print_tflag( tflag f )$/;"	f
print_timer_list	timer.c	/^char * print_timer_list()$/;"	f
printf_to_char	comm.c	/^void printf_to_char (CHAR_DATA *ch, char *fmt, ...)$/;"	f
printf_to_wiznet	comm.c	/^void printf_to_wiznet(CHAR_DATA *ch, OBJ_DATA *obj,$/;"	f
printfun	act_wiz.c	/^    void (*printfun)();$/;"	m	struct:__anon1	file:
proc_startwar	warfare.c	/^void proc_startwar( CHAR_DATA *ch, char *argument, bool pay )$/;"	f
process_output	comm.c	/^bool process_output( DESCRIPTOR_DATA *d, bool fPrompt )$/;"	f
process_penalty	penalty.c	/^bool process_penalty( CHAR_DATA *ch, char *argument, char *pentype )$/;"	f
proclaim	merc.h	/^	int proclaim[3];        \/* {9 *\/$/;"	m	struct:pc_data
proclaim_text	merc.h	/^	int proclaim_text[3];   \/* {0 *\/$/;"	m	struct:pc_data
profit_buy	merc.h	/^	sh_int  profit_buy;     \/* Cost multiplier for buying   *\/$/;"	m	struct:shop_data
profit_sell	merc.h	/^	sh_int  profit_sell;        \/* Cost multiplier for selling  *\/$/;"	m	struct:shop_data
prog_code	merc.h	/^struct prog_code$/;"	s
prog_list	merc.h	/^struct prog_list$/;"	s
program_flow	mob_prog.c	/^void program_flow( $/;"	f
prompt	merc.h	/^	char *      prompt;$/;"	m	struct:char_data
protect	lua_arclib.c	/^GODLIBHELP_DURATION( protect );$/;"	v
proto_spell_breath	breath.c	/^void proto_spell_breath( int sn, int level, CHAR_DATA *ch, CHAR_DATA *victim, $/;"	f
protocol_t	protocol.h	/^} protocol_t;$/;"	t	typeref:struct:__anon13
psn	merc.h	/^	sh_int *psn;$/;"	m	struct:channel_type
ptc	merc.h	4131;"	d
ptr	lua_main.c	/^    struct sorted_ctable **ptr;$/;"	m	struct:sorted_ctable	typeref:struct:sorted_ctable::sorted_ctable	file:
public_channel	act_comm.c	/^void public_channel( CHANNEL *chan, CHAR_DATA *ch, char *argument )$/;"	f
public_channel_table	tables.c	/^const CHANNEL public_channel_table[] =$/;"	v
public_history	playback.c	/^COMM_HISTORY public_history={0, NULL, NULL};$/;"	v
punish_spam	alias.c	/^void punish_spam()$/;"	f
purge_area	db.c	/^void purge_area( AREA_DATA *pArea )$/;"	f
purge_count	merc.h	/^    int purge_count;       \/* Max messages before purge *\/$/;"	m	struct:board_data
purge_days	merc.h	/^	int purge_days;        \/* Default expiration *\/$/;"	m	struct:board_data
purge_room	db.c	/^void purge_room( ROOM_INDEX_DATA *pRoom )$/;"	f
push	lua_arclib.h	/^    bool (*push)();$/;"	m	struct:lua_obj_type
push_comm_history	playback.c	/^void push_comm_history( lua_State *LS, COMM_HISTORY *history )$/;"	f
push_luaval	lua_arclib.c	/^static void push_luaval( lua_State *LS, LUA_EXTRA_VAL *luaval )$/;"	f	file:
push_mudconfig_val	lua_arclib.c	/^static void push_mudconfig_val( lua_State *LS, CFG_DATA_ENTRY *en )$/;"	f	file:
pwd	merc.h	/^    char *      pwd;$/;"	m	struct:pc_data
qdata	merc.h	/^    QUEST_DATA *qdata;$/;"	m	struct:pc_data
qq	merc.h	1179;"	d
qset_timer	quest.c	/^int qset_timer( CHAR_DATA *ch, int id )$/;"	f
qset_update	update.c	/^void qset_update( CHAR_DATA *ch )$/;"	f
quest_data	merc.h	/^struct quest_data$/;"	s
quest_failed	merc.h	/^	int                 quest_failed;$/;"	m	struct:pc_data
quest_free	recycle.c	/^QUEST_DATA *quest_free;$/;"	v
quest_hard_failed	merc.h	/^        int                 quest_hard_failed;$/;"	m	struct:pc_data
quest_hard_success	merc.h	/^        int                 quest_hard_success;$/;"	m	struct:pc_data
quest_item	quest.c	/^struct quest_item$/;"	s	file:
quest_item_table	quest.c	/^QUEST_ITEM quest_item_table[] =$/;"	v
quest_level_diff	quest.c	/^bool quest_level_diff( CHAR_DATA *ch, int mlevel)$/;"	f
quest_level_diff_hard	quest.c	/^bool quest_level_diff_hard( CHAR_DATA *ch, int mlevel)$/;"	f
quest_reward	merc.h	/^   int quest_reward; $/;"	m	struct:achievement_entry
quest_status	quest.c	/^int quest_status( CHAR_DATA *ch, int id )$/;"	f
quest_success	merc.h	/^	int                 quest_success;$/;"	m	struct:pc_data
quest_timer	quest.c	/^int quest_timer;$/;"	v
quest_update	quest.c	/^void quest_update(void)$/;"	f
questarea	merc.h	/^	sh_int		    questarea;  \/* Quirky *\/$/;"	m	struct:pc_data
questgiver	merc.h	/^	CHAR_DATA *         questgiver; \/* Vassago *\/$/;"	m	struct:pc_data
question	merc.h	/^	int question[3];        \/* {q *\/$/;"	m	struct:pc_data
question_text	merc.h	/^	int question_text[3];   \/* {Q *\/$/;"	m	struct:pc_data
questmob	merc.h	/^	sh_int              questmob; \/* Vassago *\/$/;"	m	struct:pc_data
questobj	merc.h	/^	sh_int              questobj; \/* Vassago *\/$/;"	m	struct:pc_data
questpoints	merc.h	/^	int                 questpoints;  \/* Vassago *\/$/;"	m	struct:pc_data
questroom	merc.h	/^	sh_int		    questroom;  \/* Quirky *\/$/;"	m	struct:pc_data
quit_char	act_comm.c	/^void quit_char( CHAR_DATA *ch )$/;"	f
quit_save_char_obj	simsave.c	/^void quit_save_char_obj( CHAR_DATA *ch )$/;"	f
quote	merc.h	/^	int quote[3];           \/* {h *\/$/;"	m	struct:pc_data
quote_table	nanny.c	/^const struct quote_type quote_table[MAX_QUOTES] =$/;"	v	typeref:struct:quote_type
quote_text	merc.h	/^	int quote_text[3];      \/* {H *\/$/;"	m	struct:pc_data
quote_type	nanny.c	/^struct quote_type$/;"	s	file:
r_atoi	mob_cmds.c	/^int r_atoi( CHAR_DATA *ch, char *arg )$/;"	f
r_atoi_obj	mob_cmds.c	/^int r_atoi_obj( OBJ_DATA *obj, char *arg )$/;"	f
race	merc.h	/^	sh_int      race;$/;"	m	struct:char_data
race	merc.h	/^	sh_int      race;$/;"	m	struct:mob_index_data_old
race	merc.h	/^    sh_int      race;$/;"	m	struct:mob_index_data
race_doppelganger	db.c	/^sh_int race_doppelganger;$/;"	v
race_kills	merc.h	/^	int                 race_kills;$/;"	m	struct:pc_data
race_lookup	lookup.c	/^int race_lookup (const char *name)$/;"	f
race_lost	merc.h	/^	int                 race_lost;$/;"	m	struct:pc_data
race_naga	db.c	/^sh_int race_naga;$/;"	v
race_rakshasa	db.c	/^sh_int race_rakshasa;$/;"	v
race_table	const.c	/^\/*const*\/   struct  race_type   race_table  []      =$/;"	v	typeref:struct:race_type
race_type	merc.h	/^struct race_type$/;"	s
race_vampire	db.c	/^sh_int race_vampire;$/;"	v
race_werewolf	db.c	/^sh_int race_werewolf;$/;"	v
race_won	merc.h	/^	int                 race_won;$/;"	m	struct:pc_data
raceedit_addskill	olc.h	/^DECLARE_OLC_FUN( raceedit_addskill );$/;"	v
raceedit_complete	olc.h	/^DECLARE_OLC_FUN( raceedit_complete );$/;"	v
raceedit_create	olc.h	/^DECLARE_OLC_FUN( raceedit_create );$/;"	v
raceedit_delete	olc.h	/^DECLARE_OLC_FUN( raceedit_delete );$/;"	v
raceedit_etl	olc.h	/^DECLARE_OLC_FUN( raceedit_etl );$/;"	v
raceedit_gender	olc.h	/^DECLARE_OLC_FUN( raceedit_gender );$/;"	v
raceedit_range	olc.h	/^DECLARE_OLC_FUN( raceedit_range );$/;"	v
raceedit_remskill	olc.h	/^DECLARE_OLC_FUN( raceedit_remskill );$/;"	v
raceedit_show	olc.h	/^DECLARE_OLC_FUN( raceedit_show );$/;"	v
raceedit_size	olc.h	/^DECLARE_OLC_FUN( raceedit_size );$/;"	v
raceedit_whoname	olc.h	/^DECLARE_OLC_FUN( raceedit_whoname );$/;"	v
rand_div	quest.c	/^int rand_div(int divident, int divisor)$/;"	f
random_attack_type	db.c	/^int random_attack_type()$/;"	f
range_is_free	aclone.c	/^bool range_is_free( int min_vnum, int max_vnum )$/;"	f
range_is_free	vshift.c	/^bool range_is_free( int min_vnum, int max_vnum )$/;"	f
rank	merc.h	/^	sh_int	    rank;$/;"	m	struct:obj_index_data
rank	merc.h	/^	sh_int	rank;$/;"	m	struct:obj_data
rank_available	clan.c	/^bool rank_available(int clan, int current_rank, int new_rank)$/;"	f
rank_count	merc.h	/^    sh_int   rank_count;        \/* Number of ranks found at boot-time *\/$/;"	m	struct:clan_data
rank_list	merc.h	/^    CLAN_RANK_DATA  rank_list[MAX_CLAN_RANK]; \/* Linked list of rank records specific to this clan *\/$/;"	m	struct:clan_data
rarity	alchemy.c	/^    int rarity;$/;"	m	struct:herb_type	file:
rarity	crafting.c	/^    int rarity;$/;"	m	struct:materials_type	file:
rating	merc.h	/^	sh_int  rating[MAX_CLASS];  \/* How hard it is to learn  *\/$/;"	m	struct:skill_type
rating	merc.h	/^	sh_int  rating[MAX_CLASS];$/;"	m	struct:group_type
rating	merc.h	/^    sh_int  rating;$/;"	m	struct:mastery_group_type
raw_kill	fight.c	/^void raw_kill( CHAR_DATA *victim, CHAR_DATA *killer, bool to_morgue )$/;"	f
rbuffer_free	buffer_util.c	/^void rbuffer_free( RBUFFER *rbuf )$/;"	f
rbuffer_new	buffer_util.c	/^RBUFFER* rbuffer_new( int min_size )$/;"	f
rbuffer_reset	buffer_util.c	/^void rbuffer_reset( RBUFFER *rbuf )$/;"	f
reaction	merc.h	/^    int     reaction;$/;"	m	struct:mem_data
read_buffer_type	buffer_util.h	/^struct read_buffer_type$/;"	s
read_from_buffer	comm.c	/^void read_from_buffer( DESCRIPTOR_DATA *d )$/;"	f
read_from_descriptor	comm.c	/^bool read_from_descriptor( DESCRIPTOR_DATA *d )$/;"	f
read_imotd	nanny.c	/^bool	read_imotd ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
read_level	merc.h	/^	int read_level;        \/* minimum level to see board *\/$/;"	m	struct:board_data
read_motd	nanny.c	/^bool	read_motd ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
read_wrap_buffer	buffer_util.c	/^RBUFFER* read_wrap_buffer( DBUFFER *buf )$/;"	f
read_wrap_free	buffer_util.c	/^void read_wrap_free( RBUFFER *rbuf )$/;"	f
ready_to_save	simsave.c	/^bool ready_to_save( CHAR_DATA *ch )$/;"	f
rec_size	hunt.c	/^    int           rec_size;$/;"	m	struct:hash_header	file:
recipe_table	alchemy.c	/^struct recipe_type recipe_table[] =$/;"	v	typeref:struct:recipe_type
recipe_type	alchemy.c	/^struct recipe_type$/;"	s	file:
recursive_clone	act_wiz.c	/^void recursive_clone(CHAR_DATA *ch, OBJ_DATA *obj, OBJ_DATA *clone)$/;"	f
redit	olc.c	/^void redit( CHAR_DATA *ch, char *argument )$/;"	f
redit_add_reset	redit-ilab.c	/^static void redit_add_reset (ROOM_INDEX_DATA *pRoom, RESET_DATA *pReset)$/;"	f	file:
redit_addrprog	olc.h	/^DECLARE_OLC_FUN( redit_addrprog );$/;"	v
redit_clan	olc.h	/^DECLARE_OLC_FUN( redit_clan		);$/;"	v
redit_clan_rank	olc.h	/^DECLARE_OLC_FUN( redit_clan_rank	);$/;"	v
redit_create	olc.h	/^DECLARE_OLC_FUN( redit_create		);$/;"	v
redit_delete	olc.h	/^DECLARE_OLC_FUN( redit_delete       );$/;"	v
redit_delrprog	olc.h	/^DECLARE_OLC_FUN( redit_delrprog );$/;"	v
redit_desc	olc.h	/^DECLARE_OLC_FUN( redit_desc		);$/;"	v
redit_down	olc.h	/^DECLARE_OLC_FUN( redit_down		);$/;"	v
redit_east	olc.h	/^DECLARE_OLC_FUN( redit_east		);$/;"	v
redit_ed	olc.h	/^DECLARE_OLC_FUN( redit_ed		);$/;"	v
redit_format	olc.h	/^DECLARE_OLC_FUN( redit_format		);$/;"	v
redit_heal	olc.h	/^DECLARE_OLC_FUN( redit_heal		);$/;"	v
redit_mana	olc.h	/^DECLARE_OLC_FUN( redit_mana		);$/;"	v
redit_mlist	olc.h	/^DECLARE_OLC_FUN( redit_mlist		);$/;"	v
redit_mreset	olc.h	/^DECLARE_OLC_FUN( redit_mreset		);$/;"	v
redit_mshow	olc.h	/^DECLARE_OLC_FUN( redit_mshow		);$/;"	v
redit_name	olc.h	/^DECLARE_OLC_FUN( redit_name		);$/;"	v
redit_north	olc.h	/^DECLARE_OLC_FUN( redit_north		);$/;"	v
redit_northeast	olc.h	/^DECLARE_OLC_FUN( redit_northeast	);$/;"	v
redit_northwest	olc.h	/^DECLARE_OLC_FUN( redit_northwest	);$/;"	v
redit_notes	olc.h	/^DECLARE_OLC_FUN( redit_notes    );$/;"	v
redit_olist	olc.h	/^DECLARE_OLC_FUN( redit_olist		);$/;"	v
redit_oreset	olc.h	/^DECLARE_OLC_FUN( redit_oreset		);$/;"	v
redit_oshow	olc.h	/^DECLARE_OLC_FUN( redit_oshow		);$/;"	v
redit_owner	olc.h	/^DECLARE_OLC_FUN( redit_owner		);$/;"	v
redit_rlist	olc.h	/^DECLARE_OLC_FUN( redit_rlist		);$/;"	v
redit_room	olc.h	/^DECLARE_OLC_FUN( redit_room		);$/;"	v
redit_sector	olc.h	/^DECLARE_OLC_FUN( redit_sector		);$/;"	v
redit_show	olc.h	/^DECLARE_OLC_FUN( redit_show		);$/;"	v
redit_south	olc.h	/^DECLARE_OLC_FUN( redit_south		);$/;"	v
redit_southeast	olc.h	/^DECLARE_OLC_FUN( redit_southeast	);$/;"	v
redit_southwest	olc.h	/^DECLARE_OLC_FUN( redit_southwest	);$/;"	v
redit_table	olc.c	/^const struct olc_cmd_type redit_table[] =$/;"	v	typeref:struct:olc_cmd_type
redit_up	olc.h	/^DECLARE_OLC_FUN( redit_up		);$/;"	v
redit_west	olc.h	/^DECLARE_OLC_FUN( redit_west		);$/;"	v
reformat	buffer.c	/^char* reformat(const char *fmt, va_list va)$/;"	f
reg	lua_arclib.h	/^    void (*reg)();$/;"	m	struct:lua_obj_type
register_area_timer	timer.c	/^TIMER_NODE * register_area_timer( AREA_DATA *area, int max )$/;"	f
register_ch_timer	timer.c	/^TIMER_NODE * register_ch_timer( CHAR_DATA *ch, int max )$/;"	f
register_globals	lua_arclib.c	/^void register_globals( lua_State *LS )$/;"	f
register_lua_timer	timer.c	/^TIMER_NODE * register_lua_timer( int value, const char *tag)$/;"	f
register_obj_timer	timer.c	/^TIMER_NODE * register_obj_timer( OBJ_DATA *obj, int max )$/;"	f
register_room_timer	timer.c	/^TIMER_NODE * register_room_timer( ROOM_INDEX_DATA *room, int max )$/;"	f
regkey	lua_main.c	/^    const void *regkey;$/;"	m	struct:sorted_ctable	file:
rel_area	vshift.c	/^void rel_area( AREA_DATA *area )$/;"	f
rel_prog_code	vshift.c	/^void rel_prog_code( PROG_CODE *prog, int min_vnum, int max_vnum )$/;"	f
rel_prog_list	vshift.c	/^void rel_prog_list( PROG_LIST *list, int min_vnum, int max_vnum )$/;"	f
rel_string	vshift.c	/^char* rel_string( char *str, int min_vnum, int max_vnum )$/;"	f
relic_bonus	religion.h	/^    int relic_bonus; \/* current bonus the religion gets *\/$/;"	m	struct:religion_data
relic_obj	religion.h	/^    OBJ_DATA *relic_obj;$/;"	m	struct:religion_data
relic_room_vnum	religion.h	/^    int relic_room_vnum; \/* used to restore relic after crash *\/$/;"	m	struct:religion_data
relic_vnum	religion.h	/^    int relic_vnum;$/;"	m	struct:religion_data
religion	religion.h	/^    RELIGION_DATA *religion;$/;"	m	struct:follower_data
religion_add_follower	religion.c	/^void religion_add_follower( RELIGION_DATA *religion, CHAR_DATA *ch )$/;"	f
religion_check_priest_exist	religion.c	/^void religion_check_priest_exist( RELIGION_DATA *religion )$/;"	f
religion_create_relic	religion.c	/^void religion_create_relic( RELIGION_DATA *religion )$/;"	f
religion_data	religion.h	/^struct religion_data$/;"	s
religion_get_follower	religion.c	/^FOLLOWER_DATA* religion_get_follower( RELIGION_DATA *religion, char *name )$/;"	f
religion_kills	merc.h	/^	int                 religion_kills;$/;"	m	struct:pc_data
religion_list	religion.c	/^static RELIGION_DATA *religion_list = NULL;$/;"	v	file:
religion_load_from_file	religion.c	/^RELIGION_DATA* religion_load_from_file( FILE *fp )$/;"	f
religion_lost	merc.h	/^	int                 religion_lost;$/;"	m	struct:pc_data
religion_rank_data	religion.h	/^struct religion_rank_data$/;"	s
religion_ranks	religion.c	/^static RELIGION_RANK_DATA religion_ranks[RELIGION_MAX_RANK] =$/;"	v	file:
religion_relic_damage	religion.c	/^void religion_relic_damage( RELIGION_DATA *religion )$/;"	f
religion_remove_follower	religion.c	/^void religion_remove_follower( CHAR_DATA *ch )$/;"	f
religion_restore_relic	religion.c	/^void religion_restore_relic( RELIGION_DATA *religion )$/;"	f
religion_save_to_buffer	religion.c	/^void religion_save_to_buffer( RELIGION_DATA *rel, DBUFFER *fp )$/;"	f
religion_update_followers	religion.c	/^void religion_update_followers( RELIGION_DATA *religion )$/;"	f
religion_update_priests	religion.c	/^void religion_update_priests( RELIGION_DATA *religion )$/;"	f
religion_won	merc.h	/^	int                 religion_won;$/;"	m	struct:pc_data
remember_attack	hunt.c	/^void remember_attack(CHAR_DATA *ch, CHAR_DATA *victim, int dam)$/;"	f
remember_str_dup	db.c	/^void remember_str_dup(const char *str)$/;"	f
remort_begin	remort.c	/^void remort_begin(CHAR_DATA *ch)$/;"	f
remort_bonus	merc.h	/^        sh_int  remort_bonus[MAX_STATS]; \/* bonus for chosing a lower remort race *\/$/;"	m	struct:pc_race_type
remort_bonus	stats.c	/^int remort_bonus (CHAR_DATA *ch, int stat )$/;"	f
remort_cancel	remort.c	/^void remort_cancel(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_chamber	remort.c	/^struct remort_chamber$/;"	s	file:
remort_complete	remort.c	/^void remort_complete(CHAR_DATA *ch)$/;"	f
remort_cost_gold	remort.c	/^int remort_cost_gold(int remort)$/;"	f
remort_cost_qp	remort.c	/^int remort_cost_qp(int remort)$/;"	f
remort_enter	remort.c	/^void remort_enter(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_load	remort.c	/^void remort_load()$/;"	f
remort_mem_save	remort.c	/^MEMFILE* remort_mem_save()$/;"	f
remort_remove	remort.c	/^void remort_remove(CHAR_DATA *ch, bool success)$/;"	f
remort_repeat	remort.c	/^void remort_repeat( CHAR_DATA *ch, CHAR_DATA *adept, char *arg )$/;"	f
remort_reset_area	remort.c	/^void remort_reset_area( AREA_DATA *pArea )$/;"	f
remort_save	remort.c	/^void remort_save()$/;"	f
remort_save_needed	remort.c	/^static bool remort_save_needed = FALSE;$/;"	v	file:
remort_signup	remort.c	/^void remort_signup(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_speed	remort.c	/^void remort_speed(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_status	remort.c	/^void remort_status(CHAR_DATA *ch, CHAR_DATA *adept)$/;"	f
remort_table	remort.c	/^struct remort_table$/;"	s	file:
remort_update	remort.c	/^void remort_update()$/;"	f
remorts	merc.h	/^	sh_int  remorts;$/;"	m	struct:pc_race_type
remorts	merc.h	/^    sh_int      remorts;$/;"	m	struct:pc_data
remorts	remort.c	/^    int remorts;$/;"	m	struct:remort_table	file:
remove_bounty	update.c	/^void remove_bounty(CHAR_DATA *ch)$/;"	f
remove_color	comm.c	/^char* remove_color( const char *txt )$/;"	f
remove_from_auth	auth.c	/^void remove_from_auth( char *name )$/;"	f
remove_from_box_list	simsave.c	/^bool remove_from_box_list( char *name )$/;"	f
remove_from_list	simsave.c	/^bool remove_from_list( char *name, MEMFILE **list )$/;"	f
remove_from_quit_list	simsave.c	/^bool remove_from_quit_list( char *name )$/;"	f
remove_from_save_list	simsave.c	/^bool remove_from_save_list( char *name )$/;"	f
remove_obj	act_obj.c	/^bool remove_obj( CHAR_DATA *ch, int iWear, bool fReplace )$/;"	f
remove_priest	religion.c	/^void remove_priest( CHAR_DATA *ch )$/;"	f
remove_religion	religion.c	/^void remove_religion( RELIGION_DATA *religion )$/;"	f
remove_reset	redit-ilab.c	/^static void remove_reset (ROOM_INDEX_DATA *pRoom, RESET_DATA *pReset)$/;"	f	file:
remove_smart	act_obj.c	/^bool remove_smart( CHAR_DATA *ch, OBJ_DATA *new_obj, int iWear1, int iWear2, bool fReplace )$/;"	f
remove_tattoo	tattoo.c	/^void remove_tattoo( tattoo_list tl, int loc )$/;"	f
remove_timer	timer.c	/^static void remove_timer( TIMER_NODE *tmr )$/;"	f	file:
rename	magic2.c	2001;"	d	file:
rename	magic2.c	2010;"	d	file:
rename_obj	db.c	/^void rename_obj( OBJ_DATA *obj, char *name, char *short_descr, char *description )$/;"	f
renew_affect	magic2.c	/^void renew_affect( CHAR_DATA *ch, int sn, int level )$/;"	f
repeat	merc.h	/^	int         repeat;$/;"	m	struct:descriptor_data
replacement	merc.h	/^		char    *replacement[11];$/;"	m	struct:struckdrunk
reply	merc.h	/^	CHAR_DATA *     reply;$/;"	m	struct:char_data
res	merc.h	/^	tflag    res;            \/* res bits for the race *\/$/;"	m	struct:race_type
res_flags	merc.h	/^	tflag        res_flags;$/;"	m	struct:char_data
res_flags	merc.h	/^	tflag        res_flags;$/;"	m	struct:mob_index_data_old
res_flags	merc.h	/^    tflag       res_flags;$/;"	m	struct:mob_index_data
res_flags	tables.c	/^const struct flag_type res_flags[] =$/;"	v	typeref:struct:flag_type
reserved_data	merc.h	/^struct	reserved_data$/;"	s
reset_area	db.c	/^void reset_area( AREA_DATA *pArea )$/;"	f
reset_char	handler.c	/^void reset_char(CHAR_DATA *ch)$/;"	f
reset_data	merc.h	/^struct  reset_data$/;"	s
reset_first	merc.h	/^    RESET_DATA *   reset_first;    \/* OLC *\/$/;"	m	struct:room_index_data
reset_herbs	alchemy.c	/^void reset_herbs( ROOM_INDEX_DATA *room )$/;"	f
reset_herbs_area	alchemy.c	/^void reset_herbs_area( AREA_DATA *pArea )$/;"	f
reset_herbs_world	alchemy.c	/^void reset_herbs_world()$/;"	f
reset_level	redit-ilab.c	/^static int reset_level (ROOM_INDEX_DATA *pRoom, RESET_DATA *pReset)$/;"	f	file:
reset_nr	alchemy.c	/^    int reset_nr; \/\/ for counting nr of herbs reset$/;"	m	struct:herb_type	file:
reset_num	merc.h	/^	sh_int      reset_num;$/;"	m	struct:obj_index_data
reset_pkill_expire	flags.c	/^void reset_pkill_expire( CHAR_DATA *ch)$/;"	f
reset_room	db.c	/^void reset_room( ROOM_INDEX_DATA *pRoom )$/;"	f
reset_str_dup	db.c	/^void reset_str_dup()$/;"	f
reset_time	merc.h	/^	sh_int      reset_time;$/;"	m	struct:area_data
restore_char	act_wiz.c	/^void restore_char( CHAR_DATA *victim )$/;"	f
rev_dir	act_move.c	/^const   sh_int  rev_dir     []      =$/;"	v
reverse_affect_order	olc_save.c	/^void reverse_affect_order(OBJ_INDEX_DATA *pObjIndex)$/;"	f
reverse_aprog_order	olc_save.c	/^void reverse_aprog_order(AREA_DATA *pArea)$/;"	f
reverse_char_list	fight.c	/^void reverse_char_list()$/;"	f
reverse_mprog_order	olc_save.c	/^void reverse_mprog_order(MOB_INDEX_DATA *pMobIndex)$/;"	f
reverse_oprog_order	olc_save.c	/^void reverse_oprog_order(OBJ_INDEX_DATA *pObjIndex)$/;"	f
reverse_rprog_order	olc_save.c	/^void reverse_rprog_order(ROOM_INDEX_DATA *pRoom)$/;"	f
revoke_level	grant.c	/^void revoke_level( CHAR_DATA *ch, CHAR_DATA *victim, int level, bool removeOnly )$/;"	f
reward	warfare.h	/^   int reward;$/;"	m	struct:war_data
rfprintf	buffer.c	/^int rfprintf(FILE *f, const char *fmt, ...)$/;"	f
rgFreeList	db.c	/^void *          rgFreeList  [MAX_MEM_LIST];$/;"	v
rgObjNest	bsave.c	/^static  OBJ_DATA *  rgObjNest   [MAX_NEST];$/;"	v	file:
rgSizeList	db.c	/^const int       rgSizeList  [MAX_MEM_LIST]  =$/;"	v
rgiState	db.c	/^static  int     rgiState[2+55];$/;"	v	file:
roll_dice	stats.c	/^void roll_dice (CHAR_DATA *ch, bool take_default)$/;"	f
roll_stats	nanny.c	/^bool roll_stats ( DESCRIPTOR_DATA *d, char *argument )$/;"	f
rolled	stats.c	/^    int min, max, rolled;$/;"	m	struct:min_max_rolled	file:
room_exits	merc.h	/^	int room_exits[3];      \/* {O *\/$/;"	m	struct:pc_data
room_flags	merc.h	/^    tflag       room_flags;$/;"	m	struct:room_index_data
room_flags	tables.c	/^const struct flag_type room_flags[] =$/;"	v	typeref:struct:flag_type
room_index_data	merc.h	/^struct  room_index_data$/;"	s
room_index_hash	db.c	/^ROOM_INDEX_DATA *   room_index_hash     [MAX_KEY_HASH];$/;"	v
room_is_dark	handler.c	/^bool room_is_dark( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_is_dim	handler.c	/^bool room_is_dim( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_is_private	handler.c	/^bool room_is_private( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_is_sunlit	handler.c	/^bool room_is_sunlit( ROOM_INDEX_DATA *pRoomIndex )$/;"	f
room_nr	hunt.c	/^    int       room_nr;$/;"	m	struct:room_q	file:
room_q	hunt.c	/^struct room_q$/;"	s	file:
room_title	merc.h	/^	int room_title[3];      \/* {o *\/$/;"	m	struct:pc_data
room_with_misgate	magic.c	/^ROOM_INDEX_DATA* room_with_misgate( CHAR_DATA *ch, ROOM_INDEX_DATA *to_room, int misgate_chance )$/;"	f
rot_herbs	alchemy.c	/^int rot_herbs( int vnum )$/;"	f
rp_act_trigger	room_prog.c	/^static bool rp_act_trigger($/;"	f	file:
rp_close_trigger	room_prog.c	/^bool rp_close_trigger( CHAR_DATA *ch, int door )$/;"	f
rp_command_trigger	room_prog.c	/^bool rp_command_trigger( CHAR_DATA *ch, int cmd, const char *argument )$/;"	f
rp_enter_trigger	room_prog.c	/^bool rp_enter_trigger( CHAR_DATA *ch )$/;"	f
rp_exit_trigger	room_prog.c	/^bool rp_exit_trigger( CHAR_DATA *ch )$/;"	f
rp_lock_trigger	room_prog.c	/^bool rp_lock_trigger( CHAR_DATA *ch, int door )$/;"	f
rp_look_ed_trigger	room_prog.c	/^bool rp_look_ed_trigger( CHAR_DATA *ch, const char *ed )$/;"	f
rp_look_trigger	room_prog.c	/^bool rp_look_trigger( CHAR_DATA *ch )$/;"	f
rp_move_trigger	room_prog.c	/^bool rp_move_trigger( CHAR_DATA *ch, int door )$/;"	f
rp_open_trigger	room_prog.c	/^bool rp_open_trigger( CHAR_DATA *ch, int door )$/;"	f
rp_percent_trigger	room_prog.c	/^static bool rp_percent_trigger($/;"	f	file:
rp_timer_trigger	room_prog.c	/^void rp_timer_trigger( ROOM_INDEX_DATA *room )$/;"	f
rp_try_trigger	room_prog.c	/^bool rp_try_trigger( char *argument, CHAR_DATA *ch )$/;"	f
rp_unlock_trigger	room_prog.c	/^bool rp_unlock_trigger( CHAR_DATA *ch, int door )$/;"	f
rpad	string.c	/^char *rpad( char *argument, int width, char fill )$/;"	f
rpedit	olc_rpcode.c	/^void rpedit( CHAR_DATA *ch, char *argument)$/;"	f
rpedit_code	olc.h	/^DECLARE_OLC_FUN( rpedit_code     );$/;"	v
rpedit_create	olc.h	/^DECLARE_OLC_FUN( rpedit_create   );$/;"	v
rpedit_delete	olc.h	/^DECLARE_OLC_FUN( rpedit_delete   );$/;"	v
rpedit_security	olc.h	/^DECLARE_OLC_FUN( rpedit_security );$/;"	v
rpedit_show	olc.h	/^DECLARE_OLC_FUN( rpedit_show     );$/;"	v
rpedit_table	olc_rpcode.c	/^const struct olc_cmd_type rpedit_table[] =$/;"	v	typeref:struct:olc_cmd_type
rprog_flags	merc.h	/^    tflag rprog_flags;$/;"	m	struct:room_index_data
rprog_flags	tables.c	/^const struct flag_type rprog_flags[] =$/;"	v	typeref:struct:flag_type
rprog_list	db.c	/^PROG_CODE *    rprog_list;$/;"	v
rprog_setup	room_prog.c	/^void rprog_setup( ROOM_INDEX_DATA *room )$/;"	f
rprog_timer_init	room_prog.c	/^void rprog_timer_init( ROOM_INDEX_DATA *room)$/;"	f
rprogs	merc.h	/^    PROG_LIST *rprogs;$/;"	m	struct:room_index_data
rr	merc.h	1180;"	d
rs_flags	merc.h	/^	tflag       rs_flags;   \/* OLC *\/$/;"	m	struct:exit_data
rtrig_timer	merc.h	/^    TIMER_NODE *rtrig_timer; \/* should not be touched except in timer.c *\/$/;"	m	struct:room_index_data
run_combat_action	fight.c	/^void run_combat_action( DESCRIPTOR_DATA *d )$/;"	f
run_delayed_function	lua_arclib.c	/^void run_delayed_function( TIMER_NODE *tmr )$/;"	f
run_lua_interpret	lua_main.c	/^bool run_lua_interpret( DESCRIPTOR_DATA *d)$/;"	f
run_olc_editor	olc.c	/^bool run_olc_editor( DESCRIPTOR_DATA *d )$/;"	f
run_olc_editor_lua	lua_arclib.c	/^static bool run_olc_editor_lua( CHAR_DATA *ch, char *argument )$/;"	f	file:
sAllocPerm	db.c	/^int         sAllocPerm;$/;"	v
sAllocString	db.c	/^int         sAllocString;$/;"	v
s_BackBlack	protocol.c	/^static const char s_BackBlack   [] = "\\033[1;40m"; \/* Black background *\/$/;"	v	file:
s_BackBlue	protocol.c	/^static const char s_BackBlue    [] = "\\033[1;44m"; \/* Blue background *\/$/;"	v	file:
s_BackCyan	protocol.c	/^static const char s_BackCyan    [] = "\\033[1;46m"; \/* Cyan background *\/$/;"	v	file:
s_BackGreen	protocol.c	/^static const char s_BackGreen   [] = "\\033[1;42m"; \/* Green background *\/$/;"	v	file:
s_BackMagenta	protocol.c	/^static const char s_BackMagenta [] = "\\033[1;45m"; \/* Magenta background *\/$/;"	v	file:
s_BackRed	protocol.c	/^static const char s_BackRed     [] = "\\033[1;41m"; \/* Red background *\/$/;"	v	file:
s_BackWhite	protocol.c	/^static const char s_BackWhite   [] = "\\033[1;47m"; \/* White background *\/$/;"	v	file:
s_BackYellow	protocol.c	/^static const char s_BackYellow  [] = "\\033[1;43m"; \/* Yellow background *\/$/;"	v	file:
s_BoldBlack	protocol.c	/^static const char s_BoldBlack   [] = "\\033[1;30m"; \/* Grey foreground *\/$/;"	v	file:
s_BoldBlue	protocol.c	/^static const char s_BoldBlue    [] = "\\033[1;34m"; \/* Bright blue foreground *\/$/;"	v	file:
s_BoldCyan	protocol.c	/^static const char s_BoldCyan    [] = "\\033[1;36m"; \/* Bright cyan foreground *\/$/;"	v	file:
s_BoldGreen	protocol.c	/^static const char s_BoldGreen   [] = "\\033[1;32m"; \/* Bright green foreground *\/$/;"	v	file:
s_BoldMagenta	protocol.c	/^static const char s_BoldMagenta [] = "\\033[1;35m"; \/* Bright magenta foreground *\/$/;"	v	file:
s_BoldRed	protocol.c	/^static const char s_BoldRed     [] = "\\033[1;31m"; \/* Bright red foreground *\/$/;"	v	file:
s_BoldWhite	protocol.c	/^static const char s_BoldWhite   [] = "\\033[1;37m"; \/* Bright white foreground *\/$/;"	v	file:
s_BoldYellow	protocol.c	/^static const char s_BoldYellow  [] = "\\033[1;33m"; \/* Bright yellow foreground *\/$/;"	v	file:
s_Button1	protocol.c	/^static const char s_Button1[] = "\\005\\002Help\\002help\\006";$/;"	v	file:
s_Button2	protocol.c	/^static const char s_Button2[] = "\\005\\002Look\\002look\\006";$/;"	v	file:
s_Button3	protocol.c	/^static const char s_Button3[] = "\\005\\002Score\\002help\\006";$/;"	v	file:
s_Button4	protocol.c	/^static const char s_Button4[] = "\\005\\002Equipment\\002equipment\\006";$/;"	v	file:
s_Button5	protocol.c	/^static const char s_Button5[] = "\\005\\002Inventory\\002inventory\\006";$/;"	v	file:
s_Clean	protocol.c	/^static const char s_Clean       [] = "\\033[0;00m"; \/* Remove colour *\/$/;"	v	file:
s_DarkBlack	protocol.c	/^static const char s_DarkBlack   [] = "\\033[0;30m"; \/* Black foreground *\/$/;"	v	file:
s_DarkBlue	protocol.c	/^static const char s_DarkBlue    [] = "\\033[0;34m"; \/* Blue foreground *\/$/;"	v	file:
s_DarkCyan	protocol.c	/^static const char s_DarkCyan    [] = "\\033[0;36m"; \/* Cyan foreground *\/$/;"	v	file:
s_DarkGreen	protocol.c	/^static const char s_DarkGreen   [] = "\\033[0;32m"; \/* Green foreground *\/$/;"	v	file:
s_DarkMagenta	protocol.c	/^static const char s_DarkMagenta [] = "\\033[0;35m"; \/* Magenta foreground *\/$/;"	v	file:
s_DarkRed	protocol.c	/^static const char s_DarkRed     [] = "\\033[0;31m"; \/* Red foreground *\/$/;"	v	file:
s_DarkWhite	protocol.c	/^static const char s_DarkWhite   [] = "\\033[0;37m"; \/* White foreground *\/$/;"	v	file:
s_DarkYellow	protocol.c	/^static const char s_DarkYellow  [] = "\\033[0;33m"; \/* Yellow foreground *\/$/;"	v	file:
s_Gauge1	protocol.c	/^static const char s_Gauge1[]  = "\\005\\002Health\\002red\\002HEALTH\\002HEALTH_MAX\\006";$/;"	v	file:
s_Gauge2	protocol.c	/^static const char s_Gauge2[]  = "\\005\\002Mana\\002blue\\002MANA\\002MANA_MAX\\006";$/;"	v	file:
s_Gauge3	protocol.c	/^static const char s_Gauge3[]  = "\\005\\002Movement\\002green\\002MOVEMENT\\002MOVEMENT_MAX\\006";$/;"	v	file:
s_Gauge4	protocol.c	/^static const char s_Gauge4[]  = "\\005\\002Exp TNL\\002yellow\\002EXPERIENCE\\002EXPERIENCE_MAX\\006";$/;"	v	file:
s_Gauge5	protocol.c	/^static const char s_Gauge5[]  = "\\005\\002Opponent\\002darkred\\002OPPONENT_HEALTH\\002OPPONENT_HEALTH_MAX\\006";$/;"	v	file:
s_Players	protocol.c	/^static int    s_Players = 0;$/;"	v	file:
s_Uptime	protocol.c	/^static time_t s_Uptime  = 0;$/;"	v	file:
savant_history	playback.c	/^COMM_HISTORY savant_history={0, NULL, NULL};$/;"	v
savantalk	merc.h	/^	int savantalk[3];       \/* {7 *\/$/;"	m	struct:pc_data
savantalk_text	merc.h	/^	int savantalk_text[3];  \/* {8 *\/$/;"	m	struct:pc_data
save	merc.h	/^	bool        save;$/;"	m	struct:area_data
save_area	olc_save.c	/^void save_area( AREA_DATA *pArea )$/;"	f
save_area_list	olc_save.c	/^void save_area_list()$/;"	f
save_areaprogs	olc_save.c	/^void save_areaprogs( FILE *fp, AREA_DATA *pArea )$/;"	f
save_auth_list	auth.c	/^void save_auth_list()$/;"	f
save_bans	ban.c	/^void save_bans(void)$/;"	f
save_board	board.c	/^static void save_board (BOARD_DATA *board)$/;"	f	file:
save_clanwars	clanwar.c	/^void save_clanwars()$/;"	f
save_comm_histories	playback.c	/^void save_comm_histories()$/;"	f
save_crime_list	penalty.c	/^void save_crime_list(void)$/;"	f
save_disabled	interp.c	/^void save_disabled()$/;"	f
save_door_resets	olc_save.c	/^void save_door_resets( FILE *fp, AREA_DATA *pArea )$/;"	f
save_helps	olc_save.c	/^void save_helps( FILE *fp, HELP_AREA *ha )$/;"	f
save_lboards	lua_main.c	/^void save_lboards()$/;"	f
save_luaconfig	lua_main.c	/^const char *save_luaconfig( CHAR_DATA *ch )$/;"	f
save_mobble	olc_save.c	/^void save_mobble( FILE *fp, MOB_INDEX_DATA *pMobIndex )$/;"	f
save_mobbles	olc_save.c	/^void save_mobbles( FILE *fp, AREA_DATA *pArea )$/;"	f
save_mobprogs	olc_save.c	/^void save_mobprogs( FILE *fp, AREA_DATA *pArea )$/;"	f
save_mudconfig	lua_main.c	/^void save_mudconfig()$/;"	f
save_notes	board.c	/^void save_notes ()$/;"	f
save_number	update.c	/^int save_number = 0;$/;"	v
save_object	olc_save.c	/^void save_object( FILE *fp, OBJ_INDEX_DATA *pObjIndex )$/;"	f
save_objects	olc_save.c	/^void save_objects( FILE *fp, AREA_DATA *pArea )$/;"	f
save_objprogs	olc_save.c	/^void save_objprogs( FILE *fp, AREA_DATA *pArea )$/;"	f
save_other_helps	olc_save.c	/^void save_other_helps( void )$/;"	f
save_penalties	penalty.c	/^void save_penalties()$/;"	f
save_portal_list	act_enter.c	/^void save_portal_list()$/;"	f
save_quest	bsave.c	/^void save_quest( CHAR_DATA *ch, DBUFFER *buf )$/;"	f
save_religions	religion.c	/^MEMFILE* save_religions()$/;"	f
save_reserved	act_wiz.c	/^void save_reserved(void)$/;"	f
save_resets	olc_save.c	/^void save_resets( FILE *fp, AREA_DATA *pArea )$/;"	f
save_roomprogs	olc_save.c	/^void save_roomprogs( FILE *fp, AREA_DATA *pArea )$/;"	f
save_rooms	olc_save.c	/^void save_rooms( FILE *fp, AREA_DATA *pArea )$/;"	f
save_shops	olc_save.c	/^void save_shops( FILE *fp, AREA_DATA *pArea )$/;"	f
save_skill	skills.c	/^void save_skill(FILE *f, int sn)$/;"	f
save_skills	skills.c	/^void save_skills()$/;"	f
save_social	social-edit.c	/^void save_social (const struct social_type *s, FILE *fp)$/;"	f
save_social_table	social-edit.c	/^void save_social_table()$/;"	f
save_specials	olc_save.c	/^void save_specials( FILE *fp, AREA_DATA *pArea )$/;"	f
save_to_dir	buffer_util.c	/^bool save_to_dir( MEMFILE *mf, char *dir )$/;"	f
save_wizlist	wizlist.c	/^void save_wizlist(void)$/;"	f
saves_dispel	magic.c	/^bool saves_dispel( int dis_level, int spell_level, int duration )$/;"	f
saves_percent	merc.h	/^    sh_int      saves_percent;$/;"	m	struct:mob_index_data
saves_physical	magic.c	/^bool saves_physical( CHAR_DATA *victim, CHAR_DATA *ch, int level, int dam_type )$/;"	f
saves_spell	magic.c	/^bool saves_spell( CHAR_DATA *victim, CHAR_DATA *ch, int level, int dam_type )$/;"	f
saving_throw	merc.h	/^	sh_int      saving_throw;$/;"	m	struct:char_data
say	merc.h	/^	int say[3];             \/* {s *\/$/;"	m	struct:pc_data
say_basic_obj_data	act_info.c	/^void say_basic_obj_data( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
say_basic_obj_index_data	act_info.c	/^void say_basic_obj_index_data( CHAR_DATA *ch, OBJ_INDEX_DATA *obj )$/;"	f
say_spell	magic.c	/^void say_spell( CHAR_DATA *ch, int sn )$/;"	f
say_text	merc.h	/^	int say_text[3];        \/* {S *\/$/;"	m	struct:pc_data
scan_char	scan.c	/^void scan_char(CHAR_DATA *victim, CHAR_DATA *ch, sh_int depth, sh_int door)$/;"	f
scan_list	scan.c	/^void scan_list(ROOM_INDEX_DATA *scan_room, CHAR_DATA *ch, sh_int depth,$/;"	f
score	merc.h	/^	int         score;$/;"	m	struct:sort_table
script	merc.h	/^    PROG_CODE *    script;$/;"	m	struct:prog_list
second	interp.h	/^    char * const       second;$/;"	m	struct:pair_type
second_color	merc.h	/^	char second_color;$/;"	m	struct:channel_type
sector	alchemy.c	/^    int sector;$/;"	m	struct:herb_type	file:
sector_flags	tables.c	/^const struct flag_type sector_flags[] =$/;"	v	typeref:struct:flag_type
sector_type	merc.h	/^    sh_int      sector_type;$/;"	m	struct:room_index_data
security	lua_arclib.c	/^    int security; \/* if SEC_NOSCRIPT then not available in prog scripts *\/$/;"	m	struct:glob_type	file:
security	lua_arclib.c	/^    int security;$/;"	m	struct:lua_prop_type	file:
security	merc.h	/^	int         security;   \/* OLC *\/ \/* Value 1-9  *\/$/;"	m	struct:area_data
security	merc.h	/^    int         security;$/;"	m	struct:pc_data
security	merc.h	/^    int         security;$/;"	m	struct:prog_code
sell_quest_item	quest.c	/^bool sell_quest_item( CHAR_DATA *ch, OBJ_DATA *obj, CHAR_DATA *quest_man )$/;"	f
send_position_message	interp.c	/^void send_position_message( CHAR_DATA *ch )$/;"	f
send_to_char	comm.c	/^void send_to_char( const char *txt, CHAR_DATA *ch )$/;"	f
send_to_char_bw	comm.c	/^void send_to_char_bw( const char *txt, CHAR_DATA *ch )$/;"	f
send_to_char_new	comm.c	/^void send_to_char_new( const char *txt, CHAR_DATA *ch, bool raw)$/;"	f
sender	merc.h	/^	char *  sender;$/;"	m	struct:note_data
set	merc.h	/^	int set;$/;"	m	struct:exploration_data
set_affect_flag	stats.c	/^void set_affect_flag( CHAR_DATA *ch, AFFECT_DATA *paf )$/;"	f
set_con_state	nanny.c	/^void set_con_state(DESCRIPTOR_DATA *d, int cstate)$/;"	f
set_creation_state	nanny.c	/^void set_creation_state(DESCRIPTOR_DATA *d, int cmode)$/;"	f
set_fighting	fight.c	/^void set_fighting( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
set_fighting_new	fight.c	/^void set_fighting_new( CHAR_DATA *ch, CHAR_DATA *victim, bool kill_trigger )$/;"	f
set_flag	lua_arclib.c	/^static int set_flag( lua_State *LS,$/;"	f	file:
set_group_skill_costs	skills.c	/^static void set_group_skill_costs( int gn, int class, int *skill_costs )$/;"	f	file:
set_hunting	hunt.c	/^void set_hunting(CHAR_DATA *ch, CHAR_DATA *victim)$/;"	f
set_level_exp	skills.c	/^void set_level_exp( CHAR_DATA *ch )$/;"	f
set_luaval	lua_arclib.c	/^static int set_luaval( lua_State *LS, LUA_EXTRA_VAL **luavals )$/;"	f	file:
set_mob_level	olc_act.c	/^void set_mob_level( CHAR_DATA *mob, int level )$/;"	f
set_mob_race	stats.c	/^void set_mob_race( CHAR_DATA *ch, int race )$/;"	f
set_obj_values	olc_act.c	/^bool set_obj_values( CHAR_DATA *ch, OBJ_INDEX_DATA *pObj, int value_num, char *argument)$/;"	f
set_pos	fight.c	/^void set_pos( CHAR_DATA *ch, int position )$/;"	f
set_pre_title	quest.c	/^void set_pre_title( CHAR_DATA * ch, char *argument, CHAR_DATA * victim)$/;"	f
set_quest_status	quest.c	/^void set_quest_status( CHAR_DATA *ch, int id, int status, int timer, int limit )$/;"	f
set_table	lua_arclib.h	/^    struct lua_prop_type * const set_table;$/;"	m	struct:lua_obj_type
set_title	act_info.c	/^void set_title( CHAR_DATA *ch, char *title )$/;"	f
set_value	olc_act.c	/^bool set_value( CHAR_DATA *ch, OBJ_INDEX_DATA *pObj, char *argument, int value )$/;"	f
set_weapon_dam	olc_act.c	/^void set_weapon_dam( OBJ_DATA *pObj, int dam )$/;"	f
set_weapon_index_dam	olc_act.c	/^void set_weapon_index_dam( OBJ_INDEX_DATA *pObj, int dam )$/;"	f
setskill_syntax	skills.c	/^static void setskill_syntax( CHAR_DATA *ch )$/;"	f	file:
settable	tables.h	/^    bool settable;$/;"	m	struct:flag_type
setup_fun	lua_scripting.c	/^    const char *setup_fun;$/;"	m	struct:lua_scripter	file:
sev_duration	tables.h	/^    long sev_duration[MAX_PENALTY_SEVERITY];   \/* duration of penalty at each severity (-1 = specify, -2 = infinite)*\/$/;"	m	struct:penalty_type
sev_level	tables.h	/^    sh_int sev_level[MAX_PENALTY_SEVERITY];    \/* minimum level to impose this severity *\/$/;"	m	struct:penalty_type
sev_points	tables.h	/^    sh_int sev_points[MAX_PENALTY_SEVERITY];   \/* demerit points assigned for various severities (-1 = specify) *\/$/;"	m	struct:penalty_type
severity	merc.h	/^    sh_int severity;              \/* Severity level *\/$/;"	m	struct:penalty_data
sex	merc.h	/^	sh_int      sex;$/;"	m	struct:char_data
sex	merc.h	/^	sh_int      sex;$/;"	m	struct:mob_index_data_old
sex	merc.h	/^    sh_int      sex;$/;"	m	struct:mob_index_data
sex_flags	tables.c	/^const struct flag_type sex_flags[] =$/;"	v	typeref:struct:flag_type
sex_lookup	lookup.c	/^int sex_lookup (const char *name)$/;"	f
sex_table	tables.c	/^const struct sex_type sex_table[] =$/;"	v	typeref:struct:sex_type
sex_type	tables.h	/^struct sex_type$/;"	s
sh_int	merc.h	/^typedef short   int         sh_int;$/;"	t
shield_block_chance	fight.c	/^int shield_block_chance( CHAR_DATA *ch, bool improve )$/;"	f
shift	vshift.c	/^int shift( int vnum )$/;"	f
shift_area	vshift.c	/^void shift_area( AREA_DATA *area, int shift, bool area_only )$/;"	f
shift_area_data	vshift.c	/^void shift_area_data( AREA_DATA *area )$/;"	f
shift_exit	vshift.c	/^void shift_exit( EXIT_DATA *exit )$/;"	f
shift_mob	vshift.c	/^void shift_mob( MOB_INDEX_DATA *mob )$/;"	f
shift_obj	vshift.c	/^void shift_obj( OBJ_INDEX_DATA *obj )$/;"	f
shift_prog_code	vshift.c	/^void shift_prog_code( PROG_CODE *prog )$/;"	f
shift_prog_list	vshift.c	/^void shift_prog_list( PROG_LIST *list )$/;"	f
shift_reset_list	vshift.c	/^void shift_reset_list( RESET_DATA *reset )$/;"	f
shift_room	vshift.c	/^void shift_room( ROOM_INDEX_DATA *room )$/;"	f
shift_shop	vshift.c	/^void shift_shop( SHOP_DATA *shop )$/;"	f
shock_effect	effects.c	/^void shock_effect(void *vo,int level, int dam, int target)$/;"	f
shop_data	merc.h	/^struct  shop_data$/;"	s
shop_first	db.c	/^SHOP_DATA *     shop_first;$/;"	v
shop_last	db.c	/^SHOP_DATA *     shop_last;$/;"	v
short_descr	merc.h	/^	char *      short_descr;$/;"	m	struct:char_data
short_descr	merc.h	/^	char *      short_descr;$/;"	m	struct:mob_index_data_old
short_descr	merc.h	/^	char *      short_descr;$/;"	m	struct:obj_data
short_descr	merc.h	/^	char *      short_descr;$/;"	m	struct:obj_index_data
short_descr	merc.h	/^    char*       short_descr;$/;"	m	struct:mob_index_data
short_name	merc.h	/^	char *short_name;      \/* Max 8 chars *\/$/;"	m	struct:board_data
short_name	tables.h	/^    char *short_name;$/;"	m	struct:position_type
shouts	merc.h	/^	int shouts[3];          \/* {u *\/$/;"	m	struct:pc_data
shouts_text	merc.h	/^	int shouts_text[3];     \/* {U *\/$/;"	m	struct:pc_data
show	interp.h	/^	sh_int      show;$/;"	m	struct:cmd_type
show_affect	act_info.c	/^void show_affect( CHAR_DATA *ch, AFFECT_DATA *paf, bool say_it )$/;"	f
show_affects	act_info.c	/^void show_affects(CHAR_DATA *ch, CHAR_DATA *to_ch, bool show_long, bool show_all)$/;"	f
show_char_to_char	act_info.c	/^void show_char_to_char( CHAR_DATA *list, CHAR_DATA *ch )$/;"	f
show_char_to_char_0	act_info.c	/^void show_char_to_char_0( CHAR_DATA *victim, CHAR_DATA *ch )$/;"	f
show_char_to_char_1	act_info.c	/^void show_char_to_char_1( CHAR_DATA *victim, CHAR_DATA *ch, bool glance )$/;"	f
show_class_skills	skills.c	/^void show_class_skills( CHAR_DATA *ch, char *argument )$/;"	f
show_commands	olc.c	/^bool show_commands( CHAR_DATA *ch, char *argument )$/;"	f
show_damlist	olc_act.c	/^void show_damlist(CHAR_DATA *ch)$/;"	f
show_dependants	redit-ilab.c	/^static bool show_dependants (CHAR_DATA *ch, const RESET_DATA *p, bool fInside, bool fLevelChange)$/;"	f	file:
show_dice	stats.c	/^void show_dice(CHAR_DATA *ch)$/;"	f
show_disguise_list	act_info.c	/^void show_disguise_list( CHAR_DATA *ch )$/;"	f
show_flag_cmds	olc_act.c	/^void show_flag_cmds( CHAR_DATA *ch, const struct flag_type *flag_table )$/;"	f
show_ftag_status	freeze.c	/^void show_ftag_status( CHAR_DATA *ch, bool final )$/;"	f
show_god_syntax	religion.c	/^void show_god_syntax( CHAR_DATA *ch )$/;"	f
show_grep_syntax	grep.c	/^void show_grep_syntax( CHAR_DATA *ch )$/;"	f
show_group_member	act_comm.c	/^void show_group_member( CHAR_DATA *ch, CHAR_DATA *gch )$/;"	f
show_groups	skills.c	/^void show_groups( int skill, BUFFER *buffer )$/;"	f
show_help	olc_act.c	/^bool show_help( CHAR_DATA *ch, char *argument )$/;"	f
show_liqlist	olc_act.c	/^void show_liqlist(CHAR_DATA *ch)$/;"	f
show_list_to_char	act_info.c	/^void show_list_to_char( OBJ_DATA *list, CHAR_DATA *ch, bool fShort, bool fShowNothing )$/;"	f
show_luavals	quest.c	/^void show_luavals( CHAR_DATA *ch, CHAR_DATA *to_ch )$/;"	f
show_master_list	skills.c	/^static void show_master_list( CHAR_DATA *ch )$/;"	f	file:
show_master_syntax	skills.c	/^static void show_master_syntax( CHAR_DATA *ch )$/;"	f	file:
show_mastery_groups	skills.c	/^void show_mastery_groups( int skill, BUFFER *buffer )$/;"	f
show_note_to_char	board.c	/^static void show_note_to_char (CHAR_DATA *ch, NOTE_DATA *note, int num)$/;"	f	file:
show_obj_values	olc_act.c	/^void show_obj_values( CHAR_DATA *ch, OBJ_INDEX_DATA *obj )$/;"	f
show_olc_cmds	olc.c	/^void show_olc_cmds( CHAR_DATA *ch, const struct olc_cmd_type *olc_table )$/;"	f
show_pc_race_ratings	stats.c	/^void show_pc_race_ratings( CHAR_DATA *ch, int race )$/;"	f
show_penalties_by_player	penalty.c	/^int show_penalties_by_player(CHAR_DATA *ch, char *victim_name, int victim_played, int format)$/;"	f
show_penalty_type	penalty.c	/^void show_penalty_type(CHAR_DATA *ch, char *penname)$/;"	f
show_portal_names	act_enter.c	/^void show_portal_names( CHAR_DATA *ch )$/;"	f
show_pray_syntax	religion.c	/^void show_pray_syntax( CHAR_DATA *ch )$/;"	f
show_quests	quest.c	/^void show_quests( CHAR_DATA *ch, CHAR_DATA *to_ch )$/;"	f
show_races	skills.c	/^void show_races( int skill, BUFFER *buffer )$/;"	f
show_races_to_d	nanny.c	/^void show_races_to_d( DESCRIPTOR_DATA *d )$/;"	f
show_ratings	olc_act.c	/^void show_ratings( CHAR_DATA *ch )$/;"	f
show_religion_info	religion.c	/^void show_religion_info( RELIGION_DATA *rel, CHAR_DATA *ch )$/;"	f
show_religion_syntax	religion.c	/^void show_religion_syntax( CHAR_DATA *ch )$/;"	f
show_remort_bonus	stats.c	/^void show_remort_bonus( CHAR_DATA *ch, int race )$/;"	f
show_reset	redit-ilab.c	/^static void show_reset (CHAR_DATA *ch, int number, RESET_DATA *pReset, int nesting, int last_level)$/;"	f	file:
show_skill	skills.c	/^void show_skill(char *argument, BUFFER *buffer, CHAR_DATA *ch)$/;"	f
show_skill_all	skills.c	/^void show_skill_all(BUFFER *buffer)$/;"	f
show_skill_cmds	olc_act.c	/^void show_skill_cmds( CHAR_DATA *ch, int tar )$/;"	f
show_skill_points	skills.c	/^void show_skill_points(BUFFER *buffer)$/;"	f
show_smith_obj_to_char	smith.c	/^void show_smith_obj_to_char( OBJ_DATA *obj, CHAR_DATA *ch )$/;"	f
show_spec_cmds	olc_act.c	/^void show_spec_cmds( CHAR_DATA *ch )$/;"	f
show_string	comm.c	/^void show_string(struct descriptor_data *d, char *input)$/;"	f
show_tattoo_loc	tattoo.c	/^void show_tattoo_loc( CHAR_DATA *ch )$/;"	f
show_tattoo_syntax	tattoo.c	/^void show_tattoo_syntax( CHAR_DATA *ch )$/;"	f
show_tattoos	tattoo.c	/^void show_tattoos( CHAR_DATA *ch )$/;"	f
show_version	olc_act.c	/^bool show_version( CHAR_DATA *ch, char *argument )$/;"	f
showstr_head	merc.h	/^	char *      showstr_head;$/;"	m	struct:descriptor_data
showstr_point	merc.h	/^	char *      showstr_point;$/;"	m	struct:descriptor_data
signup	remort.c	/^    time_t signup;$/;"	m	struct:remort_table	file:
silver	merc.h	/^	long        silver;$/;"	m	struct:char_data
sim_save_other	simsave.c	/^void sim_save_other()$/;"	f
sim_save_to_mem	simsave.c	/^void sim_save_to_mem()$/;"	f
size	merc.h	/^	int size;	\/* The allocated size of data *\/$/;"	m	struct:buffer_type
size	merc.h	/^	sh_int      size;   \/* size in k *\/$/;"	m	struct:buf_type
size	merc.h	/^	sh_int      size;$/;"	m	struct:char_data
size	merc.h	/^	sh_int      size;$/;"	m	struct:mob_index_data_old
size	merc.h	/^	sh_int  size;$/;"	m	struct:pc_race_type
size	merc.h	/^	sh_int size;$/;"	m	struct:pers_comm_history
size	merc.h	/^    sh_int      size;$/;"	m	struct:mob_index_data
size	merc.h	/^    sh_int size;$/;"	m	struct:comm_history_type
size_flags	tables.c	/^const struct flag_type size_flags[] =$/;"	v	typeref:struct:flag_type
size_lookup	lookup.c	/^int size_lookup (const char *name)$/;"	f
size_table	tables.c	/^const struct size_type size_table[] =$/;"	v	typeref:struct:size_type
size_type	tables.h	/^struct size_type$/;"	s
skill_adept	merc.h	/^    sh_int  skill_adept;        \/* Maximum skill level      *\/$/;"	m	struct:class_type
skill_chosen	merc.h	/^	bool    skill_chosen[MAX_SKILL];$/;"	m	struct:gen_data
skill_gsns	merc.h	/^	sh_int  skill_gsns[5];      \/* bonus skills for the race *\/$/;"	m	struct:pc_race_type
skill_level	merc.h	/^	sh_int  skill_level[5];$/;"	m	struct:pc_race_type
skill_level	merc.h	/^	sh_int  skill_level[MAX_CLASS]; \/* Level needed by class    *\/$/;"	m	struct:skill_type
skill_lookup	magic.c	/^int skill_lookup( const char *name )$/;"	f
skill_lookup_exact	magic.c	/^int skill_lookup_exact( const char *name )$/;"	f
skill_percent	merc.h	/^	sh_int  skill_percent[5];$/;"	m	struct:pc_race_type
skill_table	const.c	/^struct  skill_type  skill_table [MAX_SKILL] =$/;"	v	typeref:struct:skill_type
skill_type	merc.h	/^struct  skill_type$/;"	s
skills	merc.h	/^	char *  skills[5];$/;"	m	struct:pc_race_type
skills	merc.h	/^    char *  skills[MAX_IN_MASTERY];$/;"	m	struct:mastery_group_type
sky	merc.h	/^	int     sky;$/;"	m	struct:weather_data
slow	lua_arclib.c	/^GODLIBHELP_DURATION( slow );$/;"	v
slow_effect	breath.c	/^void slow_effect( void *vo, int level, int dam, int target )$/;"	f
slow_move	merc.h	/^	sh_int      slow_move;$/;"	m	struct:char_data
smash_beep_n_blink	act_info.c	/^void smash_beep_n_blink( char *str )$/;"	f
smash_reserved_colcodes	act_info.c	/^void smash_reserved_colcodes( char *str )$/;"	f
smash_tilde	db.c	/^void smash_tilde( char *str )$/;"	f
smc_grandmastered	merc.h	/^    int smc_grandmastered;$/;"	m	struct:pc_data
smc_mastered	merc.h	/^    int smc_mastered;$/;"	m	struct:pc_data
smc_retrained	merc.h	/^    int smc_retrained;$/;"	m	struct:pc_data
smith	merc.h	/^    SMITH_DATA  *smith;$/;"	m	struct:pc_data
smith_arg	smith.c	/^struct smith_arg$/;"	s	file:
smith_arg_table	smith.c	/^const struct smith_arg smith_arg_table[] =$/;"	v	typeref:struct:smith_arg
smith_cancel	smith.c	/^SM_FUN( smith_cancel);$/;"	v
smith_data	merc.h	/^typedef struct smith_data $/;"	s
smith_finish	smith.c	/^SM_FUN( smith_finish);$/;"	v
smith_free	smith.c	/^void smith_free( SMITH_DATA *sm )$/;"	f
smith_give	smith.c	/^SM_FUN( smith_give );$/;"	v
smith_new	smith.c	/^SMITH_DATA *smith_new( OBJ_DATA *obj )$/;"	f
smith_set	smith.c	/^SM_FUN( smith_set);$/;"	v
smith_set_arg	smith.c	/^struct smith_set_arg$/;"	s	file:
smith_set_description	smith.c	/^SM_SET_FUN( smith_set_description);$/;"	v
smith_set_name	smith.c	/^SM_SET_FUN( smith_set_name);$/;"	v
smith_set_name_price	smith.c	/^SM_PRICE_FUN( smith_set_name_price );$/;"	v
smith_set_short_descr	smith.c	/^SM_SET_FUN( smith_set_short_descr);$/;"	v
smith_set_sticky	smith.c	/^SM_SET_FUN( smith_set_sticky);$/;"	v
smith_set_sticky_price	smith.c	/^SM_PRICE_FUN( smith_set_sticky_price);$/;"	v
smith_set_table	smith.c	/^const struct smith_set_arg smith_set_table[] =$/;"	v	typeref:struct:smith_set_arg
smith_status	smith.c	/^SM_FUN( smith_status);$/;"	v
sn_answer	db.c	/^sh_int sn_answer;$/;"	v
sn_auction	db.c	/^sh_int sn_auction;$/;"	v
sn_bitch	db.c	/^sh_int sn_bitch;$/;"	v
sn_gametalk	db.c	/^sh_int sn_gametalk;$/;"	v
sn_gossip	db.c	/^sh_int sn_gossip;$/;"	v
sn_gratz	db.c	/^sh_int sn_gratz;$/;"	v
sn_immtalk	db.c	/^sh_int sn_immtalk;$/;"	v
sn_music	db.c	/^sh_int sn_music;$/;"	v
sn_newbie	db.c	/^sh_int sn_newbie;$/;"	v
sn_question	db.c	/^sh_int sn_question;$/;"	v
sn_quote	db.c	/^sh_int sn_quote;$/;"	v
sn_savantalk	db.c	/^sh_int sn_savantalk;$/;"	v
snoop_by	merc.h	/^	DESCRIPTOR_DATA *   snoop_by;$/;"	m	struct:descriptor_data
social_lookup	social-edit.c	/^int social_lookup (const char *name)$/;"	f
social_table	social-edit.c	/^struct social_type *social_table;	   \/* and social table *\/$/;"	v	typeref:struct:social_type
social_type	merc.h	/^struct  social_type$/;"	s
sort_bounty	update.c	/^void sort_bounty(SORT_TABLE * sort)$/;"	f
sort_free	recycle.c	/^SORT_TABLE *sort_free;$/;"	v
sort_reserved	db.c	/^void sort_reserved( RESERVED_DATA *pRes )$/;"	f
sort_table	merc.h	/^struct sort_table$/;"	s
sorted_ctable	lua_main.c	/^struct sorted_ctable $/;"	s	file:
sorted_ctable_init	lua_main.c	/^void sorted_ctable_init( lua_State *LS )$/;"	f
sorted_ctable_table	lua_main.c	/^struct sorted_ctable sorted_ctable_table [] =$/;"	v	typeref:struct:sorted_ctable
sorted_group_table	lua_main.c	/^struct sorted_ctable *sorted_group_table;$/;"	v	typeref:struct:sorted_ctable
sorted_skill_table	lua_main.c	/^struct sorted_ctable *sorted_skill_table;$/;"	v	typeref:struct:sorted_ctable
sorted_table_seq_lookup	lua_main.c	/^static int sorted_table_seq_lookup( struct sorted_ctable *tbl, int sequence )$/;"	f	file:
sortfun	lua_main.c	/^    const char *sortfun;$/;"	m	struct:sorted_ctable	file:
spec_bounty_hunter	special.c	/^bool spec_bounty_hunter (CHAR_DATA *ch)$/;"	f
spec_bounty_hunter	special.h	/^DECLARE_SPEC_FUN( spec_bounty_hunter    );$/;"	v
spec_breath_acid	special.c	/^bool spec_breath_acid( CHAR_DATA *ch )$/;"	f
spec_breath_acid	special.h	/^DECLARE_SPEC_FUN( spec_breath_acid      );$/;"	v
spec_breath_any	special.c	/^bool spec_breath_any( CHAR_DATA *ch )$/;"	f
spec_breath_any	special.h	/^DECLARE_SPEC_FUN( spec_breath_any       );$/;"	v
spec_breath_fire	special.c	/^bool spec_breath_fire( CHAR_DATA *ch )$/;"	f
spec_breath_fire	special.h	/^DECLARE_SPEC_FUN( spec_breath_fire      );$/;"	v
spec_breath_frost	special.c	/^bool spec_breath_frost( CHAR_DATA *ch )$/;"	f
spec_breath_frost	special.h	/^DECLARE_SPEC_FUN( spec_breath_frost     );$/;"	v
spec_breath_gas	special.c	/^bool spec_breath_gas( CHAR_DATA *ch )$/;"	f
spec_breath_gas	special.h	/^DECLARE_SPEC_FUN( spec_breath_gas       );$/;"	v
spec_breath_lightning	special.c	/^bool spec_breath_lightning( CHAR_DATA *ch )$/;"	f
spec_breath_lightning	special.h	/^DECLARE_SPEC_FUN( spec_breath_lightning );$/;"	v
spec_cast_adept	special.c	/^bool spec_cast_adept( CHAR_DATA *ch )$/;"	f
spec_cast_adept	special.h	/^DECLARE_SPEC_FUN( spec_cast_adept       );$/;"	v
spec_cast_any	special.c	/^bool spec_cast_any( CHAR_DATA *ch )$/;"	f
spec_cast_cleric	special.c	/^bool spec_cast_cleric( CHAR_DATA *ch )$/;"	f
spec_cast_cleric	special.h	/^DECLARE_SPEC_FUN( spec_cast_cleric      );$/;"	v
spec_cast_judge	special.c	/^bool spec_cast_judge( CHAR_DATA *ch )$/;"	f
spec_cast_judge	special.h	/^DECLARE_SPEC_FUN( spec_cast_judge       );$/;"	v
spec_cast_mage	special.c	/^bool spec_cast_mage( CHAR_DATA *ch )$/;"	f
spec_cast_mage	special.h	/^DECLARE_SPEC_FUN( spec_cast_mage        );$/;"	v
spec_cast_undead	special.c	/^bool spec_cast_undead( CHAR_DATA *ch )$/;"	f
spec_cast_undead	special.h	/^DECLARE_SPEC_FUN( spec_cast_undead      );$/;"	v
spec_executioner	fight.c	/^DECLARE_SPEC_FUN(   spec_executioner    );$/;"	v
spec_executioner	special.c	/^bool spec_executioner( CHAR_DATA *ch )$/;"	f
spec_executioner	special.h	/^DECLARE_SPEC_FUN( spec_executioner      );$/;"	v
spec_fido	special.c	/^bool spec_fido( CHAR_DATA *ch )$/;"	f
spec_fido	special.h	/^DECLARE_SPEC_FUN( spec_fido             );$/;"	v
spec_fun	merc.h	/^	SPEC_FUN *      spec_fun;$/;"	m	struct:char_data
spec_fun	merc.h	/^	SPEC_FUN *      spec_fun;$/;"	m	struct:mob_index_data_old
spec_fun	merc.h	/^    SPEC_FUN*   spec_fun;$/;"	m	struct:mob_index_data
spec_guard	fight.c	/^DECLARE_SPEC_FUN(   spec_guard          );$/;"	v
spec_guard	special.c	/^bool spec_guard( CHAR_DATA *ch )$/;"	f
spec_guard	special.h	/^DECLARE_SPEC_FUN( spec_guard            );$/;"	v
spec_janitor	special.c	/^bool spec_janitor( CHAR_DATA *ch )$/;"	f
spec_janitor	special.h	/^DECLARE_SPEC_FUN( spec_janitor          );$/;"	v
spec_lookup	special.c	/^SPEC_FUN *spec_lookup( const char *name )$/;"	f
spec_mayor	special.c	/^bool spec_mayor( CHAR_DATA *ch )$/;"	f
spec_mayor	special.h	/^DECLARE_SPEC_FUN( spec_mayor            );$/;"	v
spec_name_lookup	special.c	/^char *spec_name_lookup( SPEC_FUN *function)$/;"	f
spec_nasty	special.c	/^bool spec_nasty( CHAR_DATA *ch )$/;"	f
spec_nasty	special.h	/^DECLARE_SPEC_FUN( spec_nasty            );$/;"	v
spec_ogre_member	special.c	/^bool spec_ogre_member( CHAR_DATA *ch)$/;"	f
spec_ogre_member	special.h	/^DECLARE_SPEC_FUN( spec_ogre_member      );$/;"	v
spec_patrolman	special.c	/^bool spec_patrolman(CHAR_DATA *ch)$/;"	f
spec_patrolman	special.h	/^DECLARE_SPEC_FUN( spec_patrolman        );$/;"	v
spec_poison	special.c	/^bool spec_poison( CHAR_DATA *ch )$/;"	f
spec_poison	special.h	/^DECLARE_SPEC_FUN( spec_poison           );$/;"	v
spec_questmaster	special.c	/^bool spec_questmaster (CHAR_DATA *ch)$/;"	f
spec_questmaster	special.h	/^DECLARE_SPEC_FUN( spec_questmaster      );$/;"	v
spec_remort	special.c	/^bool spec_remort (CHAR_DATA *ch)$/;"	f
spec_remort	special.h	/^DECLARE_SPEC_FUN( spec_remort           );$/;"	v
spec_table	special.c	/^const   struct  spec_type    spec_table[] =$/;"	v	typeref:struct:spec_type
spec_temple_guard	special.c	/^bool spec_temple_guard ( CHAR_DATA *ch )$/;"	f
spec_temple_guard	special.h	/^DECLARE_SPEC_FUN( spec_temple_guard     );$/;"	v
spec_temple_guard	update.c	/^DECLARE_SPEC_FUN(   spec_temple_guard   );$/;"	v
spec_thief	special.c	/^bool spec_thief( CHAR_DATA *ch )$/;"	f
spec_thief	special.h	/^DECLARE_SPEC_FUN( spec_thief            );$/;"	v
spec_troll_member	special.c	/^bool spec_troll_member( CHAR_DATA *ch)$/;"	f
spec_troll_member	special.h	/^DECLARE_SPEC_FUN( spec_troll_member     );$/;"	v
spec_type	merc.h	/^struct spec_type$/;"	s
special_access	merc.h	/^    int special_access;    \/* Special access restrictions *\/$/;"	m	struct:board_data
special_affect_update	fight.c	/^void special_affect_update(CHAR_DATA *ch)$/;"	f
speed	lua_arclib.c	/^GODLIBHELP_DURATION( speed );$/;"	v
speed	remort.c	/^    bool speed;$/;"	m	struct:remort_chamber	file:
spell	merc.h	/^   sh_int spell;                   \/* will be 1 if spell, 0 otherwise *\/$/;"	m	struct:disabled_data
spell	special.c	/^    char    *spell;$/;"	m	struct:spell_type	file:
spell_absolute_zero	magic.h	/^DECLARE_SPELL_FUN(      spell_absolute_zero     );  $/;"	v
spell_absolute_zero	magic2.c	/^void spell_absolute_zero(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_acid_blast	magic.c	/^void spell_acid_blast( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_acid_blast	magic.h	/^DECLARE_SPELL_FUN(  spell_acid_blast    );$/;"	v
spell_acid_breath	breath.c	/^void spell_acid_breath( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_acid_breath	magic.h	/^DECLARE_SPELL_FUN(  spell_acid_breath   );$/;"	v
spell_angel_smite	magic.c	/^void spell_angel_smite(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_angel_smite	magic.h	/^DECLARE_SPELL_FUN(      spell_angel_smite       );$/;"	v
spell_animate_dead	magic.h	/^DECLARE_SPELL_FUN( spell_animate_dead   );$/;"	v
spell_animate_dead	magic2.c	/^void spell_animate_dead( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_armor	magic.c	/^void spell_armor( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_armor	magic.h	/^DECLARE_SPELL_FUN(  spell_armor     );$/;"	v
spell_astarks_rejuvenation	magic.h	/^DECLARE_SPELL_FUN(  spell_astarks_rejuvenation  );$/;"	v
spell_astarks_rejuvenation	magic2.c	/^void spell_astarks_rejuvenation( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_astral	magic.h	/^DECLARE_SPELL_FUN(  spell_astral     );$/;"	v
spell_astral	magic2.c	/^void spell_astral( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_base_cost	db.c	/^int spell_base_cost( int sn )$/;"	f
spell_basic_apparition	magic.h	/^DECLARE_SPELL_FUN( spell_basic_apparition);$/;"	v
spell_basic_apparition	magic2.c	/^void spell_basic_apparition( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_betray	magic.h	/^DECLARE_SPELL_FUN(  spell_betray    );$/;"	v
spell_betray	magic2.c	/^void spell_betray( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_bless	magic.c	/^void spell_bless( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_bless	magic.h	/^DECLARE_SPELL_FUN(  spell_bless     );$/;"	v
spell_blessed_darkness	magic.h	/^DECLARE_SPELL_FUN(      spell_blessed_darkness         );$/;"	v
spell_blessed_darkness	magic2.c	/^void spell_blessed_darkness( int sn, int level, CHAR_DATA *ch, void *vo, int target)   $/;"	f
spell_blindness	magic.c	/^void spell_blindness( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_blindness	magic.h	/^DECLARE_SPELL_FUN(  spell_blindness     );$/;"	v
spell_breath_of_god	magic.h	/^DECLARE_SPELL_FUN(  spell_breath_of_god );$/;"	v
spell_breath_of_god	magic2.c	/^void spell_breath_of_god(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_breathe_water	magic.h	/^DECLARE_SPELL_FUN(	spell_breathe_water );$/;"	v
spell_breathe_water	magic2.c	/^void spell_breathe_water(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_burning_hands	magic.c	/^void spell_burning_hands(int sn,int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_burning_hands	magic.h	/^DECLARE_SPELL_FUN(  spell_burning_hands );$/;"	v
spell_call_lightning	fight.c	/^DECLARE_SPELL_FUN( spell_call_lightning );$/;"	v
spell_call_lightning	magic.c	/^void spell_call_lightning( int sn, int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_call_lightning	magic.h	/^DECLARE_SPELL_FUN(  spell_call_lightning    );$/;"	v
spell_call_sidekick	magic.h	/^DECLARE_SPELL_FUN(      spell_call_sidekick     );  $/;"	v
spell_call_sidekick	magic2.c	/^void spell_call_sidekick( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_calm	magic.c	/^void spell_calm( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_calm	magic.h	/^DECLARE_SPELL_FUN(  spell_calm      );$/;"	v
spell_cancellation	magic.c	/^void spell_cancellation( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_cancellation	magic.h	/^DECLARE_SPELL_FUN(  spell_cancellation  );$/;"	v
spell_cannibalism	magic.h	/^DECLARE_SPELL_FUN( spell_cannibalism    );$/;"	v
spell_cannibalism	magic2.c	/^void spell_cannibalism( int sn, int level, CHAR_DATA *ch, void *vo ,int target)$/;"	f
spell_cause_harm	magic.c	/^void spell_cause_harm( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_cause_harm	magic.h	/^DECLARE_SPELL_FUN(  spell_cause_harm    );$/;"	v
spell_chain_lightning	magic.c	/^void spell_chain_lightning(int sn,int level,CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_chain_lightning	magic.h	/^DECLARE_SPELL_FUN(  spell_chain_lightning   );$/;"	v
spell_change_sex	magic.c	/^void spell_change_sex( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_change_sex	magic.h	/^DECLARE_SPELL_FUN(  spell_change_sex    );$/;"	v
spell_charm_person	magic.c	/^void spell_charm_person( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_charm_person	magic.h	/^DECLARE_SPELL_FUN(  spell_charm_person  );$/;"	v
spell_chill_touch	magic.c	/^void spell_chill_touch( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_chill_touch	magic.h	/^DECLARE_SPELL_FUN(  spell_chill_touch   );$/;"	v
spell_colour_spray	magic.c	/^void spell_colour_spray( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_colour_spray	magic.h	/^DECLARE_SPELL_FUN(  spell_colour_spray  );$/;"	v
spell_cone_of_exhaustion	breath.c	/^void spell_cone_of_exhaustion( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_cone_of_exhaustion	magic.h	/^DECLARE_SPELL_FUN(  spell_cone_of_exhaustion );$/;"	v
spell_confusion	fight.c	/^DECLARE_SPELL_FUN( spell_confusion      );$/;"	v
spell_confusion	magic.c	/^void spell_confusion( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_confusion	magic.h	/^DECLARE_SPELL_FUN(      spell_confusion               );$/;"	v
spell_continual_light	magic.c	/^void spell_continual_light(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_continual_light	magic.h	/^DECLARE_SPELL_FUN(  spell_continual_light   );$/;"	v
spell_control_weather	magic.c	/^void spell_control_weather(int sn,int level,CHAR_DATA *ch,void *vo,int target) $/;"	f
spell_control_weather	magic.h	/^DECLARE_SPELL_FUN(  spell_control_weather   );$/;"	v
spell_conviction	magic.h	/^DECLARE_SPELL_FUN( spell_conviction );$/;"	v
spell_conviction	magic2.c	/^void spell_conviction (int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_cost	healer.c	/^struct spell_cost$/;"	s	file:
spell_create_bomb	magic.c	/^void spell_create_bomb( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_create_bomb	magic.h	/^DECLARE_SPELL_FUN(  spell_create_bomb   );$/;"	v
spell_create_food	magic.c	/^void spell_create_food( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_create_food	magic.h	/^DECLARE_SPELL_FUN(  spell_create_food   );$/;"	v
spell_create_rose	magic.c	/^void spell_create_rose( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_create_rose	magic.h	/^DECLARE_SPELL_FUN(  spell_create_rose   );$/;"	v
spell_create_spring	magic.c	/^void spell_create_spring(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_create_spring	magic.h	/^DECLARE_SPELL_FUN(  spell_create_spring );$/;"	v
spell_create_water	magic.c	/^void spell_create_water( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_create_water	magic.h	/^DECLARE_SPELL_FUN(  spell_create_water  );$/;"	v
spell_cure_blindness	magic.c	/^void spell_cure_blindness(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_cure_blindness	magic.h	/^DECLARE_SPELL_FUN(  spell_cure_blindness    );$/;"	v
spell_cure_critical	magic.h	/^DECLARE_SPELL_FUN(      spell_cure_critical     );$/;"	v
spell_cure_critical	magic.h	/^DECLARE_SPELL_FUN(  spell_cure_critical );$/;"	v
spell_cure_critical	magic2.c	/^void spell_cure_critical( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_cure_disease	magic.c	/^void spell_cure_disease( int sn, int level, CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_cure_disease	magic.h	/^DECLARE_SPELL_FUN(  spell_cure_disease  );$/;"	v
spell_cure_light	magic.h	/^DECLARE_SPELL_FUN(      spell_cure_light        );$/;"	v
spell_cure_light	magic.h	/^DECLARE_SPELL_FUN(  spell_cure_light    );$/;"	v
spell_cure_light	magic2.c	/^void spell_cure_light( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_cure_mental	magic.c	/^void spell_cure_mental( int sn, int level, CHAR_DATA *ch,void *vo, int target )$/;"	f
spell_cure_mental	magic.h	/^DECLARE_SPELL_FUN(  spell_cure_mental   );$/;"	v
spell_cure_mortal	magic.h	/^DECLARE_SPELL_FUN(      spell_cure_mortal       );$/;"	v
spell_cure_mortal	magic2.c	/^void spell_cure_mortal( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_cure_poison	magic.c	/^void spell_cure_poison( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_cure_poison	magic.h	/^DECLARE_SPELL_FUN(  spell_cure_poison   );$/;"	v
spell_cure_serious	magic.h	/^DECLARE_SPELL_FUN(      spell_cure_serious      );$/;"	v
spell_cure_serious	magic.h	/^DECLARE_SPELL_FUN(  spell_cure_serious  );$/;"	v
spell_cure_serious	magic2.c	/^void spell_cure_serious( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_curse	magic.c	/^void spell_curse( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_curse	magic.h	/^DECLARE_SPELL_FUN(  spell_curse     );$/;"	v
spell_damned_blade	magic.h	/^DECLARE_SPELL_FUN( spell_damned_blade   );$/;"	v
spell_damned_blade	magic2.c	/^void spell_damned_blade( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_dancing_bones	magic.h	/^DECLARE_SPELL_FUN(  spell_dancing_bones );$/;"	v
spell_dancing_bones	magic2.c	/^void spell_dancing_bones( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_deaths_door	magic.h	/^DECLARE_SPELL_FUN(      spell_deaths_door             );$/;"	v
spell_deaths_door	magic2.c	/^void spell_deaths_door( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_decompose	magic.h	/^DECLARE_SPELL_FUN(  spell_decompose     );$/;"	v
spell_decompose	magic2.c	/^void spell_decompose(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_demonfire	magic.c	/^void spell_demonfire(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_demonfire	magic.h	/^DECLARE_SPELL_FUN(  spell_demonfire     );$/;"	v
spell_detect_astral	magic.h	/^DECLARE_SPELL_FUN(  spell_detect_astral     );$/;"	v
spell_detect_astral	magic2.c	/^void spell_detect_astral( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_detect_evil	magic.c	/^void spell_detect_evil( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_detect_evil	magic.h	/^DECLARE_SPELL_FUN(  spell_detect_evil   );$/;"	v
spell_detect_good	magic.c	/^void spell_detect_good( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_detect_good	magic.h	/^DECLARE_SPELL_FUN(  spell_detect_good   );$/;"	v
spell_detect_hidden	magic.c	/^void spell_detect_hidden(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_detect_hidden	magic.h	/^DECLARE_SPELL_FUN(  spell_detect_hidden );$/;"	v
spell_detect_invis	magic.c	/^void spell_detect_invis( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_detect_invis	magic.h	/^DECLARE_SPELL_FUN(  spell_detect_invis  );$/;"	v
spell_detect_magic	magic.c	/^void spell_detect_magic( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_detect_magic	magic.h	/^DECLARE_SPELL_FUN(  spell_detect_magic  );$/;"	v
spell_detect_poison	magic.c	/^void spell_detect_poison( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_detect_poison	magic.h	/^DECLARE_SPELL_FUN(  spell_detect_poison );$/;"	v
spell_dispel_evil	magic.c	/^void spell_dispel_evil( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_dispel_evil	magic.h	/^DECLARE_SPELL_FUN(  spell_dispel_evil   );$/;"	v
spell_dispel_good	magic.c	/^void spell_dispel_good( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_dispel_good	magic.h	/^DECLARE_SPELL_FUN(  spell_dispel_good   );$/;"	v
spell_dispel_magic	magic.c	/^void spell_dispel_magic( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_dispel_magic	magic.h	/^DECLARE_SPELL_FUN(  spell_dispel_magic  );$/;"	v
spell_divine_light	magic.h	/^DECLARE_SPELL_FUN(  spell_divine_light  );$/;"	v
spell_divine_light	magic2.c	/^void spell_divine_light(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_dominate_soul	magic.h	/^DECLARE_SPELL_FUN( spell_dominate_soul  );$/;"	v
spell_dominate_soul	magic2.c	/^void spell_dominate_soul( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_dowsing	magic.h	/^DECLARE_SPELL_FUN(  spell_dowsing    );$/;"	v
spell_duration_names	tables.c	/^const char* spell_duration_names[] =$/;"	v
spell_earthquake	magic.c	/^void spell_earthquake( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_earthquake	magic.h	/^DECLARE_SPELL_FUN(  spell_earthquake    );$/;"	v
spell_electrocution	magic.h	/^DECLARE_SPELL_FUN(      spell_electrocution     );  $/;"	v
spell_electrocution	magic2.c	/^void spell_electrocution(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_enchant_armor	magic.c	/^void spell_enchant_armor( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_enchant_armor	magic.h	/^DECLARE_SPELL_FUN(  spell_enchant_armor );$/;"	v
spell_enchant_arrow	magic.c	/^void spell_enchant_arrow( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_enchant_arrow	magic.h	/^DECLARE_SPELL_FUN(  spell_enchant_arrow );$/;"	v
spell_enchant_weapon	magic.c	/^void spell_enchant_weapon( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_enchant_weapon	magic.h	/^DECLARE_SPELL_FUN(  spell_enchant_weapon    );$/;"	v
spell_energy_drain	magic.c	/^void spell_energy_drain( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_energy_drain	magic.h	/^DECLARE_SPELL_FUN(  spell_energy_drain  );$/;"	v
spell_entangle	magic.h	/^DECLARE_SPELL_FUN(      spell_entangle               );$/;"	v
spell_entangle	magic2.c	/^void spell_entangle ( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_epidemic	magic.h	/^DECLARE_SPELL_FUN(      spell_epidemic     );  $/;"	v
spell_epidemic	magic2.c	/^void spell_epidemic(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_extinguish	magic.h	/^DECLARE_SPELL_FUN(  spell_extinguish    );$/;"	v
spell_extinguish	magic2.c	/^void spell_extinguish(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_fade	magic.h	/^DECLARE_SPELL_FUN(      spell_fade     );  $/;"	v
spell_fade	magic2.c	/^void spell_fade(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_faerie_fire	magic.c	/^void spell_faerie_fire( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_faerie_fire	magic.h	/^DECLARE_SPELL_FUN(  spell_faerie_fire   );$/;"	v
spell_faerie_fog	magic.c	/^void spell_faerie_fog( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_faerie_fog	magic.h	/^DECLARE_SPELL_FUN(  spell_faerie_fog    );$/;"	v
spell_farsight	magic.h	/^DECLARE_SPELL_FUN(  spell_farsight      );$/;"	v
spell_farsight	magic2.c	/^void spell_farsight( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_fear	magic.h	/^DECLARE_SPELL_FUN(  spell_fear  );$/;"	v
spell_fear	magic2.c	/^void spell_fear( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_feeblemind	magic.h	/^DECLARE_SPELL_FUN(  spell_feeblemind    );$/;"	v
spell_feeblemind	magic2.c	/^void spell_feeblemind ( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_fire_breath	breath.c	/^void spell_fire_breath( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_fire_breath	magic.h	/^DECLARE_SPELL_FUN(  spell_fire_breath   );$/;"	v
spell_fireball	magic.c	/^void spell_fireball( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_fireball	magic.h	/^DECLARE_SPELL_FUN(  spell_fireball      );$/;"	v
spell_fireproof	magic.c	/^void spell_fireproof(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_fireproof	magic.h	/^DECLARE_SPELL_FUN(  spell_fireproof     );$/;"	v
spell_flamestrike	magic.c	/^void spell_flamestrike( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_flamestrike	magic.h	/^DECLARE_SPELL_FUN(  spell_flamestrike   );$/;"	v
spell_floating_disc	magic.c	/^void spell_floating_disc( int sn, int level,CHAR_DATA *ch,void *vo,int target )$/;"	f
spell_floating_disc	magic.h	/^DECLARE_SPELL_FUN(  spell_floating_disc );$/;"	v
spell_fly	magic.c	/^void spell_fly( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_fly	magic.h	/^DECLARE_SPELL_FUN(  spell_fly       );$/;"	v
spell_forboding_ooze	breath.c	/^void spell_forboding_ooze(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_forboding_ooze	magic.h	/^DECLARE_SPELL_FUN(  spell_forboding_ooze     );$/;"	v
spell_frenzy	magic.c	/^void spell_frenzy(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_frenzy	magic.h	/^DECLARE_SPELL_FUN(      spell_frenzy        );$/;"	v
spell_frost_breath	breath.c	/^void spell_frost_breath( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_frost_breath	magic.h	/^DECLARE_SPELL_FUN(  spell_frost_breath  );$/;"	v
spell_fun	merc.h	/^	SPELL_FUN * spell_fun;      \/* Spell pointer (for spells)   *\/$/;"	m	struct:skill_type
spell_fun	merc.h	/^   SPELL_FUN *spell_fun;           \/* NULL if command is not a spell *\/$/;"	m	struct:disabled_data
spell_gas_breath	breath.c	/^void spell_gas_breath( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_gas_breath	magic.h	/^DECLARE_SPELL_FUN(  spell_gas_breath    );$/;"	v
spell_gate	magic.c	/^void spell_gate( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_gate	magic.h	/^DECLARE_SPELL_FUN(  spell_gate      );$/;"	v
spell_general_purpose	magic.c	/^void spell_general_purpose(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_general_purpose	magic.h	/^DECLARE_SPELL_FUN(  spell_general_purpose   );$/;"	v
spell_ghost_chant	magic.h	/^DECLARE_SPELL_FUN( spell_ghost_chant    );$/;"	v
spell_ghost_chant	magic2.c	/^void spell_ghost_chant( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_giant_strength	magic.c	/^void spell_giant_strength(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_giant_strength	magic.h	/^DECLARE_SPELL_FUN(  spell_giant_strength    );$/;"	v
spell_glyph_of_evil	magic.h	/^DECLARE_SPELL_FUN(      spell_glyph_of_evil            );$/;"	v
spell_glyph_of_evil	magic2.c	/^void spell_glyph_of_evil(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_goodberry	magic.h	/^DECLARE_SPELL_FUN(      spell_goodberry     );  $/;"	v
spell_goodberry	magic2.c	/^void spell_goodberry( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_group_heal	magic.h	/^DECLARE_SPELL_FUN(      spell_group_heal        );$/;"	v
spell_group_heal	magic2.c	/^void spell_group_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_hailstorm	magic.h	/^DECLARE_SPELL_FUN(  spell_hailstorm );$/;"	v
spell_hailstorm	magic2.c	/^void spell_hailstorm( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_hallow	magic.h	/^DECLARE_SPELL_FUN(  spell_hallow        );$/;"	v
spell_hallow	magic2.c	/^void spell_hallow(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_hand_of_god	magic.h	/^DECLARE_SPELL_FUN(      spell_hand_of_god            );$/;"	v
spell_hand_of_god	magic2.c	/^void spell_hand_of_god(int sn,int level,CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_hand_of_siva	magic.h	/^DECLARE_SPELL_FUN(      spell_hand_of_siva     );  $/;"	v
spell_hand_of_siva	magic2.c	/^void spell_hand_of_siva( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_haste	magic.c	/^void spell_haste( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_haste	magic.h	/^DECLARE_SPELL_FUN(      spell_haste     );$/;"	v
spell_haunt	magic.h	/^DECLARE_SPELL_FUN(  spell_haunt         );$/;"	v
spell_haunt	magic2.c	/^void spell_haunt(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_heal	magic.c	/^void spell_heal( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_heal	magic.h	/^DECLARE_SPELL_FUN(  spell_heal          );$/;"	v
spell_heal_all	magic.h	/^DECLARE_SPELL_FUN(  spell_heal_all      );$/;"	v
spell_heal_all	magic2.c	/^void spell_heal_all( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_heal_mind	magic.h	/^DECLARE_SPELL_FUN(  spell_heal_mind     );$/;"	v
spell_heal_mind	magic2.c	/^void spell_heal_mind( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_heat_metal	magic.c	/^void spell_heat_metal( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_heat_metal	magic.h	/^DECLARE_SPELL_FUN(  spell_heat_metal    );$/;"	v
spell_heroism	magic.h	/^DECLARE_SPELL_FUN(      spell_heroism                 );$/;"	v
spell_heroism	magic2.c	/^void spell_heroism( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_high_explosive	magic.c	/^void spell_high_explosive(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_high_explosive	magic.h	/^DECLARE_SPELL_FUN(  spell_high_explosive    );$/;"	v
spell_holy_apparition	magic.h	/^DECLARE_SPELL_FUN( spell_holy_apparition);$/;"	v
spell_holy_apparition	magic2.c	/^void spell_holy_apparition( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_holy_binding	magic.h	/^DECLARE_SPELL_FUN(  spell_holy_binding  );$/;"	v
spell_holy_binding	magic2.c	/^void spell_holy_binding ( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_holy_word	magic.c	/^void spell_holy_word(int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_holy_word	magic.h	/^DECLARE_SPELL_FUN(      spell_holy_word     );$/;"	v
spell_identify	magic.c	/^void spell_identify( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_identify	magic.h	/^DECLARE_SPELL_FUN(  spell_identify      );$/;"	v
spell_immolation	magic.h	/^DECLARE_SPELL_FUN(      spell_immolation     );  $/;"	v
spell_immolation	magic2.c	/^void spell_immolation(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_infravision	magic.c	/^void spell_infravision( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_infravision	magic.h	/^DECLARE_SPELL_FUN(  spell_infravision   );$/;"	v
spell_intimidation	magic.h	/^DECLARE_SPELL_FUN(      spell_intimidation      ); $/;"	v
spell_invis	magic.c	/^void spell_invis( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_invis	magic.h	/^DECLARE_SPELL_FUN(  spell_invis     );$/;"	v
spell_iron_maiden	magic.h	/^DECLARE_SPELL_FUN( spell_iron_maiden );$/;"	v
spell_iron_maiden	magic2.c	/^void spell_iron_maiden( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_know_alignment	magic.c	/^void spell_know_alignment(int sn,int level,CHAR_DATA *ch,void *vo,int target )$/;"	f
spell_know_alignment	magic.h	/^DECLARE_SPELL_FUN(  spell_know_alignment    );$/;"	v
spell_laughing_fit	fight.c	/^DECLARE_SPELL_FUN( spell_laughing_fit   );$/;"	v
spell_laughing_fit	magic.h	/^DECLARE_SPELL_FUN(      spell_laughing_fit            );$/;"	v
spell_laughing_fit	magic2.c	/^void spell_laughing_fit( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_life_force	magic.h	/^DECLARE_SPELL_FUN(  spell_life_force    );$/;"	v
spell_life_force	magic2.c	/^void spell_life_force ( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_lightning_bolt	fight.c	/^DECLARE_SPELL_FUN( spell_lightning_bolt );$/;"	v
spell_lightning_bolt	magic.c	/^void spell_lightning_bolt(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_lightning_bolt	magic.h	/^DECLARE_SPELL_FUN(  spell_lightning_bolt    );$/;"	v
spell_lightning_breath	breath.c	/^void spell_lightning_breath(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_lightning_breath	magic.h	/^DECLARE_SPELL_FUN(  spell_lightning_breath  );$/;"	v
spell_list_cleric	special.c	/^const struct spell_type spell_list_cleric[] =$/;"	v	typeref:struct:spell_type
spell_list_mage	special.c	/^const struct spell_type spell_list_mage[] = {$/;"	v	typeref:struct:spell_type
spell_list_undead	special.c	/^const struct spell_type spell_list_undead[] = {$/;"	v	typeref:struct:spell_type
spell_locate_object	magic.c	/^void spell_locate_object( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_locate_object	magic.h	/^DECLARE_SPELL_FUN(  spell_locate_object );$/;"	v
spell_lookup	magic.c	/^int spell_lookup( const char *name )$/;"	f
spell_magic_missile	magic.c	/^void spell_magic_missile( int sn, int level, CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_magic_missile	magic.h	/^DECLARE_SPELL_FUN(  spell_magic_missile );$/;"	v
spell_major_group_heal	magic.h	/^DECLARE_SPELL_FUN(      spell_major_group_heal  );$/;"	v
spell_major_group_heal	magic2.c	/^void spell_major_group_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mana_burn	magic.h	/^DECLARE_SPELL_FUN( spell_mana_burn );$/;"	v
spell_mana_burn	magic2.c	/^void spell_mana_burn( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mana_heal	magic.h	/^DECLARE_SPELL_FUN(      spell_mana_heal               );$/;"	v
spell_mana_heal	magic2.c	/^void spell_mana_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mana_shield	magic.h	/^DECLARE_SPELL_FUN(  spell_mana_shield );$/;"	v
spell_mana_shield	magic2.c	/^void spell_mana_shield( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_mantra	magic.h	/^DECLARE_SPELL_FUN(  spell_mantra );$/;"	v
spell_mantra	magic2.c	/^void spell_mantra( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_mass_confusion	magic.h	/^DECLARE_SPELL_FUN(      spell_mass_confusion          );$/;"	v
spell_mass_confusion	magic2.c	/^void spell_mass_confusion( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mass_healing	magic.c	/^void spell_mass_healing(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_mass_healing	magic.h	/^DECLARE_SPELL_FUN(      spell_mass_healing  );$/;"	v
spell_mass_invis	magic.c	/^void spell_mass_invis( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mass_invis	magic.h	/^DECLARE_SPELL_FUN(  spell_mass_invis    );$/;"	v
spell_mephistons_scrutiny	magic.h	/^DECLARE_SPELL_FUN(	spell_mephistons_scrutiny	); $/;"	v
spell_mephistons_scrutiny	magic2.c	/^void spell_mephistons_scrutiny(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_meteor_swarm	magic.h	/^DECLARE_SPELL_FUN(  spell_meteor_swarm );$/;"	v
spell_meteor_swarm	magic2.c	/^void spell_meteor_swarm( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_mimic	magic.h	/^DECLARE_SPELL_FUN( spell_mimic );$/;"	v
spell_mimic	magic2.c	/^void spell_mimic( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_minor_fade	magic.h	/^DECLARE_SPELL_FUN( spell_minor_fade     );  $/;"	v
spell_minor_fade	magic2.c	/^void spell_minor_fade(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_minor_group_heal	magic.h	/^DECLARE_SPELL_FUN(      spell_minor_group_heal  );$/;"	v
spell_minor_group_heal	magic2.c	/^void spell_minor_group_heal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_mirror_image	magic.h	/^DECLARE_SPELL_FUN( spell_mirror_image );$/;"	v
spell_mirror_image	magic2.c	/^void spell_mirror_image( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_monsoon	fight.c	/^DECLARE_SPELL_FUN( spell_monsoon        );$/;"	v
spell_monsoon	magic.h	/^DECLARE_SPELL_FUN(      spell_monsoon   );$/;"	v
spell_monsoon	magic2.c	/^void spell_monsoon( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_necrosis	magic.h	/^DECLARE_SPELL_FUN( spell_necrosis       );$/;"	v
spell_necrosis	magic2.c	/^void spell_necrosis ( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_nexus	magic.h	/^DECLARE_SPELL_FUN(  spell_nexus     );$/;"	v
spell_nexus	magic2.c	/^void spell_nexus( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_null	magic.c	/^void spell_null( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_null	magic.h	/^DECLARE_SPELL_FUN(  spell_null      );$/;"	v
spell_null	olc.h	/^DECLARE_SPELL_FUN( spell_null );$/;"	v
spell_obj_cost	db.c	/^int spell_obj_cost( int level, int base_cost )$/;"	f
spell_overcharge	magic.h	/^DECLARE_SPELL_FUN( spell_overcharge );$/;"	v
spell_overcharge	magic2.c	/^void spell_overcharge( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_pacify	magic.h	/^DECLARE_SPELL_FUN(  spell_pacify    );$/;"	v
spell_pacify	magic2.c	/^void spell_pacify(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_paralysis_poison	magic2.c	/^void spell_paralysis_poison( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_pass_door	magic.c	/^void spell_pass_door( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_pass_door	magic.h	/^DECLARE_SPELL_FUN(  spell_pass_door     );$/;"	v
spell_pass_without_trace	magic.h	/^DECLARE_SPELL_FUN(      spell_pass_without_trace     );$/;"	v
spell_pass_without_trace	magic2.c	/^void spell_pass_without_trace( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_phantasmal_image	magic.h	/^DECLARE_SPELL_FUN( spell_phantasmal_image );$/;"	v
spell_phantasmal_image	magic2.c	/^void spell_phantasmal_image( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_phase	magic.h	/^DECLARE_SPELL_FUN( spell_phase );$/;"	v
spell_phase	magic2.c	/^void spell_phase(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_plague	magic.c	/^void spell_plague( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_plague	magic.h	/^DECLARE_SPELL_FUN(      spell_plague        );$/;"	v
spell_poison	magic.c	/^void spell_poison( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_poison	magic.h	/^DECLARE_SPELL_FUN(  spell_poison        );$/;"	v
spell_portal	magic.h	/^DECLARE_SPELL_FUN(  spell_portal        );$/;"	v
spell_portal	magic2.c	/^void spell_portal( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_prayer	magic.h	/^DECLARE_SPELL_FUN(	spell_prayer		);$/;"	v
spell_prayer	magic2.c	/^void spell_prayer(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_protection_evil	magic.c	/^void spell_protection_evil(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_protection_evil	magic.h	/^DECLARE_SPELL_FUN(  spell_protection_evil   );$/;"	v
spell_protection_good	magic.c	/^void spell_protection_good(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_protection_good	magic.h	/^DECLARE_SPELL_FUN(  spell_protection_good   );$/;"	v
spell_protection_magic	magic.h	/^DECLARE_SPELL_FUN(      spell_protection_magic     );  $/;"	v
spell_protection_magic	magic2.c	/^void spell_protection_magic(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_quirkys_insanity	magic.h	/^DECLARE_SPELL_FUN(	spell_quirkys_insanity		);$/;"	v
spell_quirkys_insanity	magic2.c	/^void spell_quirkys_insanity(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_ray_of_truth	magic.c	/^void spell_ray_of_truth (int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_ray_of_truth	magic.h	/^DECLARE_SPELL_FUN(  spell_ray_of_truth  );$/;"	v
spell_recharge	magic.c	/^void spell_recharge( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_recharge	magic.h	/^DECLARE_SPELL_FUN(  spell_recharge      );$/;"	v
spell_reflection	magic.h	/^DECLARE_SPELL_FUN(  spell_reflection    );$/;"	v
spell_reflection	magic2.c	/^void spell_reflection( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_refresh	magic.c	/^void spell_refresh( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_refresh	magic.h	/^DECLARE_SPELL_FUN(  spell_refresh       );$/;"	v
spell_remove_curse	magic.c	/^void spell_remove_curse( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_remove_curse	magic.h	/^DECLARE_SPELL_FUN(  spell_remove_curse  );$/;"	v
spell_renewal	magic.h	/^DECLARE_SPELL_FUN(  spell_renewal       );$/;"	v
spell_renewal	magic2.c	/^void spell_renewal( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_replenish	magic.h	/^DECLARE_SPELL_FUN(  spell_replenish     );$/;"	v
spell_replenish	magic2.c	/^void spell_replenish( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_restoration	magic.h	/^DECLARE_SPELL_FUN(      spell_restoration       );$/;"	v
spell_restoration	magic2.c	/^void spell_restoration ( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_rimbols_invocation	magic.h	/^DECLARE_SPELL_FUN(	spell_rimbols_invocation	);$/;"	v
spell_rimbols_invocation	magic2.c	/^void spell_rimbols_invocation(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_ritual_sacrifice	magic.h	/^DECLARE_SPELL_FUN( spell_ritual_sacrifice   );$/;"	v
spell_ritual_sacrifice	magic2.c	/^void spell_ritual_sacrifice ( int sn, int level, CHAR_DATA *ch, void *vo ,int target)$/;"	f
spell_rustle_grub	magic.h	/^DECLARE_SPELL_FUN(  spell_rustle_grub    );$/;"	v
spell_sanctuary	magic.c	/^void spell_sanctuary( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_sanctuary	magic.h	/^DECLARE_SPELL_FUN(  spell_sanctuary     );$/;"	v
spell_shadow_shroud	magic.h	/^DECLARE_SPELL_FUN( spell_shadow_shroud );$/;"	v
spell_shadow_shroud	magic2.c	/^void spell_shadow_shroud(int sn,int level,CHAR_DATA *ch,void *vo, int target)$/;"	f
spell_shield	magic.c	/^void spell_shield( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_shield	magic.h	/^DECLARE_SPELL_FUN(  spell_shield        );$/;"	v
spell_shocking_grasp	magic.c	/^void spell_shocking_grasp(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_shocking_grasp	magic.h	/^DECLARE_SPELL_FUN(  spell_shocking_grasp    );$/;"	v
spell_shroud_of_darkness	magic.h	/^DECLARE_SPELL_FUN( spell_shroud_of_darkness );$/;"	v
spell_shroud_of_darkness	magic2.c	/^void spell_shroud_of_darkness( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_sivas_sacrifice	magic.h	/^DECLARE_SPELL_FUN(	spell_sivas_sacrifice		);$/;"	v
spell_sivas_sacrifice	magic2.c	/^void spell_sivas_sacrifice( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_sleep	magic.c	/^void spell_sleep( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_sleep	magic.h	/^DECLARE_SPELL_FUN(  spell_sleep         );$/;"	v
spell_slow	magic.c	/^void spell_slow( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_slow	magic.h	/^DECLARE_SPELL_FUN(  spell_slow          );$/;"	v
spell_smotes_anachronism	magic.h	/^DECLARE_SPELL_FUN(	spell_smotes_anachronism 	);$/;"	v
spell_smotes_anachronism	magic2.c	/^void spell_smotes_anachronism( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_solar_flare	magic.h	/^DECLARE_SPELL_FUN( spell_solar_flare );$/;"	v
spell_solar_flare	magic2.c	/^void spell_solar_flare( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_soreness	magic.h	/^DECLARE_SPELL_FUN(      spell_soreness                 );$/;"	v
spell_soreness	magic2.c	/^void spell_soreness( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_sticks_to_snakes	magic.h	/^DECLARE_SPELL_FUN(      spell_sticks_to_snakes       );$/;"	v
spell_sticks_to_snakes	magic2.c	/^void spell_sticks_to_snakes( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_stone_skin	magic.c	/^void spell_stone_skin( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_stone_skin	magic.h	/^DECLARE_SPELL_FUN(  spell_stone_skin    );$/;"	v
spell_stop	magic.h	/^DECLARE_SPELL_FUN(	spell_stop );$/;"	v
spell_stop	magic2.c	/^void spell_stop(int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_summon	magic.c	/^void spell_summon( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_summon	magic.h	/^DECLARE_SPELL_FUN(  spell_summon        );$/;"	v
spell_target_names	tables.c	/^const char* spell_target_names[] =$/;"	v
spell_teleport	magic.c	/^void spell_teleport( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_teleport	magic.h	/^DECLARE_SPELL_FUN(  spell_teleport      );$/;"	v
spell_tomb_rot	magic.h	/^DECLARE_SPELL_FUN(      spell_tomb_rot                 );$/;"	v
spell_tomb_rot	magic2.c	/^void spell_tomb_rot( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_tomb_stench	breath.c	/^void spell_tomb_stench(int sn,int level,CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_tomb_stench	magic.h	/^DECLARE_SPELL_FUN(  spell_tomb_stench        );$/;"	v
spell_tree_golem	magic.h	/^DECLARE_SPELL_FUN(      spell_tree_golem             );     $/;"	v
spell_tree_golem	magic2.c	/^void spell_tree_golem( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_turn_undead	magic.h	/^DECLARE_SPELL_FUN( spell_turn_undead    );$/;"	v
spell_turn_undead	magic2.c	/^void spell_turn_undead( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_type	special.c	/^struct spell_type$/;"	s	file:
spell_unearth	magic.h	/^DECLARE_SPELL_FUN( spell_unearth );$/;"	v
spell_unearth	magic2.c	/^void spell_unearth( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_ventriloquate	magic.c	/^void spell_ventriloquate( int sn, int level, CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_ventriloquate	magic.h	/^DECLARE_SPELL_FUN(  spell_ventriloquate );$/;"	v
spell_water_elemental	magic.h	/^DECLARE_SPELL_FUN(      spell_water_elemental        );     $/;"	v
spell_water_elemental	magic2.c	/^void spell_water_elemental( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_weaken	magic.c	/^void spell_weaken( int sn, int level, CHAR_DATA *ch, void *vo,int target)$/;"	f
spell_weaken	magic.h	/^DECLARE_SPELL_FUN(  spell_weaken        );$/;"	v
spell_windwar	fight.c	/^DECLARE_SPELL_FUN( spell_windwar        );$/;"	v
spell_windwar	magic.h	/^DECLARE_SPELL_FUN(      spell_windwar                );   $/;"	v
spell_windwar	magic2.c	/^void spell_windwar( int sn, int level, CHAR_DATA *ch, void *vo, int target)$/;"	f
spell_word_of_recall	magic.c	/^void spell_word_of_recall( int sn, int level, CHAR_DATA *ch,void *vo,int target)$/;"	f
spell_word_of_recall	magic.h	/^DECLARE_SPELL_FUN(  spell_word_of_recall    );$/;"	v
spell_zombie_breath	breath.c	/^void spell_zombie_breath( int sn, int level, CHAR_DATA *ch, void *vo, int target )$/;"	f
spell_zombie_breath	magic.h	/^DECLARE_SPELL_FUN(  spell_zombie_breath      );$/;"	v
spell_zone_of_damnation	breath.c	/^void spell_zone_of_damnation( int sn, int level, CHAR_DATA *ch, void *vo,int target )$/;"	f
spell_zone_of_damnation	magic.h	/^DECLARE_SPELL_FUN(  spell_zone_of_damnation  );$/;"	v
spells	merc.h	/^	char *  spells[MAX_IN_GROUP];$/;"	m	struct:group_type
split_attack	fight2.c	/^void split_attack ( CHAR_DATA *ch, int dt )$/;"	f
spouse	merc.h	/^    char *      spouse;$/;"	m	struct:pc_data
spray_attack	fight2.c	/^void spray_attack( CHAR_DATA *ch, char *argument, int sn )$/;"	f
ss	merc.h	1181;"	d
stackDump	lua_main.c	/^void stackDump (lua_State *LS) {$/;"	f
stance	merc.h	/^	sh_int  stance;$/;"	m	struct:char_data
stance	merc.h	/^    sh_int      stance;$/;"	m	struct:mob_index_data
stance	merc.h	/^    sh_int      stance;$/;"	m	struct:mob_index_data_old
stance_after_hit	fight.c	/^void stance_after_hit( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield )$/;"	f
stance_cost	fight.c	/^int stance_cost( CHAR_DATA *ch, int stance )$/;"	f
stance_hit	fight.c	/^void stance_hit( CHAR_DATA *ch, CHAR_DATA *victim, int dt )$/;"	f
stance_lookup	lookup.c	/^int stance_lookup(const char *name)$/;"	f
stance_type	merc.h	/^struct stance_type$/;"	s
stances	tables.c	/^const struct stance_type stances [] =$/;"	v	typeref:struct:stance_type
start_combat	fight.c	/^bool start_combat( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
start_pos	merc.h	/^	sh_int      start_pos;$/;"	m	struct:char_data
start_pos	merc.h	/^	sh_int      start_pos;$/;"	m	struct:mob_index_data_old
start_pos	merc.h	/^    sh_int      start_pos;$/;"	m	struct:mob_index_data
start_time	merc.h	/^    long start_time;              \/* Start time for character to begin penalty (ch->played) *\/$/;"	m	struct:penalty_data
started	warfare.h	/^   bool started;$/;"	m	struct:war_data
stat	bit.c	/^    bool stat;$/;"	m	struct:flag_stat_type	file:
stat	grep.c	/^    sh_int stat;$/;"	m	struct:grep_data	file:
stat	tables.h	/^	int stat;$/;"	m	struct:stat_type
stat_gain	stats.c	/^int stat_gain(CHAR_DATA *ch, int stat)$/;"	f
stat_lookup	stats.c	/^int stat_lookup(char *stat)$/;"	f
stat_prime	merc.h	/^	sh_int	stat_prime, stat_second, stat_third;$/;"	m	struct:skill_type
stat_second	merc.h	/^	sh_int	stat_prime, stat_second, stat_third;$/;"	m	struct:skill_type
stat_table	tables.c	/^const struct stat_type stat_table[] =$/;"	v	typeref:struct:stat_type
stat_third	merc.h	/^	sh_int	stat_prime, stat_second, stat_third;$/;"	m	struct:skill_type
stat_type	tables.h	/^struct stat_type$/;"	s
stat_weights	merc.h	/^    sh_int  stat_weights[MAX_STATS]; \/* weights for default roll assignment *\/$/;"	m	struct:class_type
state	merc.h	/^	sh_int      state;  \/* error state of the buffer *\/$/;"	m	struct:buf_type
state	merc.h	/^   int   state;            \/* Current state of authed *\/$/;"	m	struct:auth_list
status	buildutil.c	/^    int status;$/;"	m	struct:__anon2	file:
status	lua_arclib.c	/^    int status; $/;"	m	struct:lua_prop_type	file:
status	lua_arclib.c	/^    int status;$/;"	m	struct:glob_type	file:
status	merc.h	/^    int status;$/;"	m	struct:quest_data
status	merc.h	/^    sh_int status;                \/* Pending, serving, paroled, pardoned, complete *\/$/;"	m	struct:penalty_data
status	merc.h	/^   sh_int status;         \/* Status of war                             *\/$/;"	m	struct:clanwar_data
stc	merc.h	4132;"	d
stop	merc.h	/^	sh_int	    stop;$/;"	m	struct:char_data
stop_attack	fight.c	/^bool stop_attack( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
stop_fighting	fight.c	/^void stop_fighting( CHAR_DATA *ch, bool fBoth )$/;"	f
stop_follower	act_comm.c	/^void stop_follower( CHAR_DATA *ch )$/;"	f
stop_hunting	hunt.c	/^void stop_hunting(CHAR_DATA *ch)$/;"	f
stop_idling	comm.c	/^void stop_idling( CHAR_DATA *ch )$/;"	f
storage_boxes	merc.h	/^    sh_int	    storage_boxes; \/*Number of storage boxes the player has*\/$/;"	m	struct:pc_data
strArea	db.c	/^char            strArea[MAX_INPUT_LENGTH];$/;"	v
str_app_carry	stats.c	/^int str_app_carry(int x)$/;"	f
str_app_todam	stats.c	/^int str_app_todam(int x)$/;"	f
str_app_wield	stats.c	/^int str_app_wield(int x)$/;"	f
str_boot_time	comm.c	/^char            str_boot_time[MAX_INPUT_LENGTH];$/;"	v
str_cmp	db.c	/^bool str_cmp( const char *astr, const char *bstr )$/;"	f
str_dup	db.c	/^char *str_dup( const char *str )$/;"	f
str_dup_hash	db.c	/^static char* str_dup_hash[MAX_STR_DUP_KEY];$/;"	v	file:
str_dup_ready	db.c	/^static bool str_dup_ready = FALSE;$/;"	v	file:
str_empty	db.c	/^char    str_empty   [1];$/;"	v
str_infix	db.c	/^bool str_infix( const char *astr, const char *bstr )$/;"	f
str_prefix	db.c	/^bool str_prefix( const char *astr, const char *bstr )$/;"	f
str_suffix	db.c	/^bool str_suffix( const char *astr, const char *bstr )$/;"	f
str_value	grep.c	/^    char str_value[MIL];$/;"	m	struct:grep_data	file:
string	merc.h	/^	char *      string; \/* buffer's string *\/$/;"	m	struct:buf_type
string_add	string.c	/^void string_add( CHAR_DATA *ch, char *argument )$/;"	f
string_append	string.c	/^void string_append( CHAR_DATA *ch, char **pString )$/;"	f
string_edit	string.c	/^void string_edit( CHAR_DATA *ch, char **pString )$/;"	f
string_hash	db.c	/^char *              string_hash     [MAX_KEY_HASH];$/;"	v
string_lineadd	string.c	/^char *string_lineadd( char *string, char *newstr, int line )$/;"	f
string_linedel	string.c	/^char *string_linedel( char *string, int line )$/;"	f
string_proper	string.c	/^char * string_proper( char * argument )$/;"	f
string_replace	string.c	/^char * string_replace( char * orig, char * old, char * new )$/;"	f
string_replace_ext	string.c	/^char * string_replace_ext( char * orig, char * old, char * new, $/;"	f
string_ring_buf	merc.h	/^struct string_ring_buf$/;"	s
string_space	db.c	/^char *  string_space;$/;"	v
string_unpad	string.c	/^char * string_unpad( char * argument )$/;"	f
strlen_color	string.c	/^int strlen_color( char *argument )$/;"	f
struckdrunk	merc.h	/^struct struckdrunk$/;"	s
structure	bit.c	/^    const struct flag_type *structure;$/;"	m	struct:flag_stat_type	typeref:struct:flag_stat_type::flag_type	file:
structure	olc_act.c	/^    const void *structure;$/;"	m	struct:olc_help_type	file:
subject	merc.h	/^	char *  subject;$/;"	m	struct:note_data
substitute_alias	alias.c	/^void substitute_alias(DESCRIPTOR_DATA *d, char *argument)$/;"	f
substr_delim	db.c	/^char* substr_delim(const char *s, char c_start, char c_end)$/;"	f
sunlight	merc.h	/^	int     sunlight;$/;"	m	struct:weather_data
support_t	protocol.h	/^} support_t;$/;"	t	typeref:enum:__anon8
szFinishPrompt	board.c	/^const char * szFinishPrompt = "({+C{x)ontinue, ({+V{x)iew, ({+P{x)ost or ({+F{x)orget it?";$/;"	v
table	act_wiz.c	/^    void *table;$/;"	m	struct:__anon1	file:
table	tables.h	/^	const	struct flag_type * table;$/;"	m	struct:bit_type	typeref:struct:bit_type::flag_type
table_size	hunt.c	/^    int           table_size;$/;"	m	struct:hash_header	file:
tablefun	lua_main.c	/^    void (*tablefun)( lua_State *LS);$/;"	m	struct:sorted_ctable	file:
tag	merc.h	/^    char        * tag; \/* for custom names or other tagging purposes *\/$/;"	m	struct:affect_data
tag	timer.c	/^    const char *tag; \/* used for unique tags in lua *\/$/;"	m	struct:timer_node	file:
tag_flags	merc.h	/^	tflag        tag_flags;$/;"	m	struct:pc_data
tail	merc.h	/^	PERS_ENTRY *tail;$/;"	m	struct:pers_comm_history
tail	merc.h	/^    COMM_ENTRY *tail; \/* oldest *\/$/;"	m	struct:comm_history_type
tail_chain	db.c	/^void tail_chain( void )$/;"	f
take_class_defaults	nanny.c	/^void take_class_defaults(DESCRIPTOR_DATA *d)$/;"	f
take_default_stats	stats.c	/^void take_default_stats(CHAR_DATA *ch)$/;"	f
take_default_weapon	nanny.c	/^void take_default_weapon(DESCRIPTOR_DATA *d)$/;"	f
take_rom_basics	nanny.c	/^void take_rom_basics(DESCRIPTOR_DATA *d)$/;"	f
target	merc.h	/^	sh_int  target;         \/* Legal targets        *\/$/;"	m	struct:skill_type
target_name	magic.c	/^char *target_name = NULL;$/;"	v
tattoo_affect	tattoo.c	/^AFFECT_DATA* tattoo_affect( AFFECT_DATA *aff, float level, bool basic )$/;"	f
tattoo_bonus_ID	tattoo.c	/^int tattoo_bonus_ID( CHAR_DATA *ch, int loc )$/;"	f
tattoo_cost	tattoo.c	/^int tattoo_cost( int ID )$/;"	f
tattoo_data	tattoo.c	/^struct tattoo_data$/;"	s	file:
tattoo_data_list	tattoo.c	/^static const TATTOO_DATA tattoo_data_list[MAX_TATTOO] =$/;"	v	file:
tattoo_desc	tattoo.c	/^char* tattoo_desc( int ID )$/;"	f
tattoo_id	tattoo.c	/^int tattoo_id( char *name )$/;"	f
tattoo_list	merc.h	/^typedef int tattoo_list[MAX_WEAR];$/;"	t
tattoo_modify_ID	tattoo.c	/^void tattoo_modify_ID( CHAR_DATA *ch, int ID, float level, bool fAdd, bool drop, bool basic )$/;"	f
tattoo_modify_equip	tattoo.c	/^void tattoo_modify_equip( CHAR_DATA *ch, int loc, bool fAdd, bool drop, bool basic )$/;"	f
tattoo_modify_level	tattoo.c	/^void tattoo_modify_level( CHAR_DATA *ch, int old_level, int new_level )$/;"	f
tattoo_modify_reset	tattoo.c	/^void tattoo_modify_reset( CHAR_DATA *ch )$/;"	f
tattoo_name	tattoo.c	/^char* tattoo_name( int ID )$/;"	f
tattoo_obj	tattoo.c	/^OBJ_INDEX_DATA* tattoo_obj( int ID )$/;"	f
tattoo_wear	tattoo.c	/^static const bool tattoo_wear[MAX_WEAR] =$/;"	v	file:
tattoos	merc.h	/^    tattoo_list tattoos;$/;"	m	struct:pc_data
telcmds	telnet.h	/^char *telcmds[] = {$/;"	v
tell_char	act_comm.c	/^void tell_char( CHAR_DATA *ch, CHAR_DATA *victim, char *argument )$/;"	f
tell_history	merc.h	/^	PERS_HISTORY *tell_history;$/;"	m	struct:pc_data
tell_text	merc.h	/^	int tell_text[3];       \/* {T *\/$/;"	m	struct:pc_data
tells	merc.h	/^	int tells[3];           \/* {t *\/$/;"	m	struct:pc_data
telopts	telnet.h	/^char *telopts[NTELOPTS] = {$/;"	v
text	merc.h	/^	char *  text;$/;"	m	struct:note_data
text	merc.h	/^	char *text;$/;"	m	struct:pers_comm_entry
text	merc.h	/^    char *text;                   \/* Used when building reason into note *\/$/;"	m	struct:penalty_data
text	merc.h	/^    char *text;$/;"	m	struct:comm_history_entry
text	merc.h	/^   char *  text;$/;"	m	struct:help_data
text	nanny.c	/^    char * 	text;$/;"	m	struct:quote_type	file:
tflag	merc.h	/^typedef char tflag[FLAG_MAX_BYTE];$/;"	t
third_pers	merc.h	/^	char *third_pers;$/;"	m	struct:channel_type
ticks	religion.h	/^    int ticks;$/;"	m	struct:prayer_data
time_format	remort.c	/^char *time_format(time_t t, char *b)$/;"	f
time_info	db.c	/^TIME_INFO_DATA  time_info;$/;"	v
time_info_data	merc.h	/^struct  time_info_data$/;"	s
timer	merc.h	/^	sh_int      timer;$/;"	m	struct:char_data
timer	merc.h	/^	sh_int      timer;$/;"	m	struct:obj_data
timer	merc.h	/^    int timer; \/* Used for repeatable Mini Quests -Astark 10-9-12 *\/$/;"	m	struct:quest_data
timer_node	timer.c	/^static struct timer_node$/;"	s	file:
timer_update	timer.c	/^void timer_update()$/;"	f
timestamp	merc.h	/^    char *timestamp;$/;"	m	struct:comm_history_entry
timestamp	merc.h	/^   time_t timestamp; \/* Date\/time player convicted or forgiven *\/$/;"	m	struct:crime_data
title	merc.h	/^    char *      title;$/;"	m	struct:pc_data
title_table	const.c	/^char *  const           title_table [MAX_CLASS][23] =$/;"	v
tm_type	timer.c	/^    int tm_type;$/;"	m	struct:timer_node	file:
to_bit_name	handler.c	/^char* to_bit_name( int where, int flag )$/;"	f
to_list	merc.h	/^	char *  to_list;$/;"	m	struct:note_data
to_room	merc.h	/^	    ROOM_INDEX_DATA * to_room;$/;"	m	union:exit_data::__anon5
togg	merc.h	/^        tflag       togg;$/;"	m	struct:char_data
togg_flags	tables.c	/^const struct flag_type togg_flags[] =$/;"	v	typeref:struct:flag_type
top_affect	db.c	/^int  top_affect;$/;"	v
top_aprog_index	db.c	/^int  top_aprog_index;    \/* OLC *\/$/;"	v
top_area	db.c	/^int  top_area;$/;"	v
top_ed	db.c	/^int  top_ed;$/;"	v
top_exit	db.c	/^int  top_exit;$/;"	v
top_help	db.c	/^int  top_help;$/;"	v
top_jail_room	db.c	/^int  top_jail_room = -1;$/;"	v
top_mob_index	db.c	/^int  top_mob_index;$/;"	v
top_mprog_index	db.c	/^int  top_mprog_index;    \/* OLC *\/$/;"	v
top_obj_index	db.c	/^int  top_obj_index;$/;"	v
top_oprog_index	db.c	/^int  top_oprog_index;    \/* OLC *\/$/;"	v
top_reset	db.c	/^int  top_reset;$/;"	v
top_room	db.c	/^int  top_room;$/;"	v
top_rprog_index	db.c	/^int  top_rprog_index;    \/* OLC *\/$/;"	v
top_shop	db.c	/^int  top_shop;$/;"	v
top_string	db.c	/^char *  top_string;$/;"	v
top_vnum_mob	db.c	/^int  top_vnum_mob;       \/* OLC *\/$/;"	v
top_vnum_obj	db.c	/^int  top_vnum_obj;       \/* OLC *\/$/;"	v
top_vnum_room	db.c	/^int  top_vnum_room;      \/* OLC *\/$/;"	v
total_combatants	warfare.h	/^   int total_combatants;$/;"	m	struct:war_data
total_wars	merc.h	/^	int                 total_wars;$/;"	m	struct:pc_data
train	merc.h	/^	sh_int      train;$/;"	m	struct:char_data
train_stat	stats.c	/^bool train_stat(int trained, CHAR_DATA *ch)$/;"	f
train_stat_inc	stats.c	/^int train_stat_inc( CHAR_DATA *ch, int stat )$/;"	f
trained_hit	merc.h	/^    sh_int      trained_hit;$/;"	m	struct:pc_data
trained_hit_bonus	merc.h	/^    int         trained_hit_bonus;$/;"	m	struct:pc_data
trained_mana	merc.h	/^    sh_int      trained_mana;$/;"	m	struct:pc_data
trained_mana_bonus	merc.h	/^    int         trained_mana_bonus;$/;"	m	struct:pc_data
trained_move	merc.h	/^    sh_int      trained_move;$/;"	m	struct:pc_data
trained_move_bonus	merc.h	/^    int         trained_move_bonus;$/;"	m	struct:pc_data
transfer_char	mob_cmds.c	/^void transfer_char( CHAR_DATA *victim, ROOM_INDEX_DATA *location )$/;"	f
trap_damage	act_move.c	/^void trap_damage( CHAR_DATA *ch, bool can_behead )$/;"	f
trig_phrase	merc.h	/^	char *      trig_phrase;$/;"	m	struct:prog_list
trig_timer	merc.h	/^    TIMER_NODE *trig_timer; \/* should not be touched except in timer.c *\/$/;"	m	struct:char_data
trig_type	merc.h	/^	int         trig_type;$/;"	m	struct:prog_list
truce_name	merc.h	/^   char *truce_name;      \/* Person declaring a truce                  *\/$/;"	m	struct:clanwar_data
truce_timer	merc.h	/^   int truce_timer;       \/* Number of ticks left in truce             *\/$/;"	m	struct:clanwar_data
true	protocol.h	/^   true$/;"	e	enum:__anon6
true_sex	merc.h	/^    sh_int      true_sex;$/;"	m	struct:pc_data
truncate_color_string	string.c	/^char *truncate_color_string( const char *argument, int limit )$/;"	f
trust	merc.h	/^	sh_int      trust;$/;"	m	struct:char_data
try_pay_smith	smith.c	/^bool try_pay_smith( CHAR_DATA *ch )$/;"	f
try_remove_pkill	flags.c	/^void try_remove_pkill( CHAR_DATA *ch)$/;"	f
try_set_hardcore	flags.c	/^try_set_hardcore(CHAR_DATA *ch)$/;"	f
try_set_leader	act_comm.c	/^void try_set_leader( CHAR_DATA *ch, CHAR_DATA *victim )$/;"	f
try_set_pkill	flags.c	/^void try_set_pkill(CHAR_DATA *ch)$/;"	f
tt	merc.h	1182;"	d
type	lua_arclib.h	/^    int type;$/;"	m	struct:lua_extra_val
type	lua_scripting.c	/^    LUA_OBJ_TYPE *type;$/;"	m	struct:lua_scripter	file:
type	merc.h	/^	int     type;$/;"	m	struct:item_type
type	merc.h	/^	int     type;$/;"	m	struct:stance_type
type	merc.h	/^	sh_int  type;$/;"	m	struct:note_data
type	merc.h	/^	sh_int  type;$/;"	m	struct:weapon_type
type	merc.h	/^    sh_int      type;$/;"	m	struct:affect_data
type	merc.h	/^   int type;$/;"	m	struct:achievement_entry
type	mudconfig.h	/^    int type;$/;"	m	struct:config_data_entry
type	warfare.h	/^   int type;$/;"	m	struct:war_data
type_flags	tables.c	/^const struct flag_type type_flags[] =$/;"	v	typeref:struct:flag_type
type_init	lua_arclib.c	/^void type_init( lua_State *LS)$/;"	f
type_list	lua_arclib.c	/^LUA_OBJ_TYPE *type_list [] =$/;"	v
type_name	lua_arclib.h	/^    const char *type_name;$/;"	m	struct:lua_obj_type
u1	merc.h	/^	} u1;$/;"	m	struct:exit_data	typeref:union:exit_data::__anon5
unequip_char	handler.c	/^void unequip_char( CHAR_DATA *ch, OBJ_DATA *obj )$/;"	f
unlink_note	board.c	/^static void unlink_note (BOARD_DATA *board, NOTE_DATA *note)$/;"	f	file:
unlink_pfile	simsave.c	/^int unlink_pfile( char *filename )$/;"	f
unload_storage_boxes	simsave.c	/^void unload_storage_boxes( CHAR_DATA *ch)$/;"	f
unread_notes	board.c	/^int unread_notes (CHAR_DATA *ch, BOARD_DATA *board)$/;"	f
unregister_ch_timer	timer.c	/^void unregister_ch_timer( CHAR_DATA *ch )$/;"	f
unregister_lua_timer	timer.c	/^bool unregister_lua_timer( TIMER_NODE *tmr, const char *tag )$/;"	f
unregister_obj_timer	timer.c	/^void unregister_obj_timer( OBJ_DATA *obj )$/;"	f
unregistered	timer.c	/^    bool unregistered; \/* to mark for deletion *\/$/;"	m	struct:timer_node	file:
unused_die	merc.h	/^	int     unused_die[MAX_EXT_STATS];$/;"	m	struct:gen_data
update_aprog_flags	olc_act.c	/^void update_aprog_flags( AREA_DATA *pArea )$/;"	f
update_bounty	update.c	/^void update_bounty(CHAR_DATA *ch)$/;"	f
update_field	update.c	/^void update_field( CHAR_DATA *ch)$/;"	f
update_fighting	update.c	/^void update_fighting( void )$/;"	f
update_flags	stats.c	/^void update_flags( CHAR_DATA *ch )$/;"	f
update_group_costs	skills.c	/^void update_group_costs()$/;"	f
update_handler	update.c	/^void update_handler( void )$/;"	f
update_herb_reset	alchemy.c	/^void update_herb_reset()$/;"	f
update_lboard	lua_main.c	/^void update_lboard( int lboard_type, CHAR_DATA *ch, int current, int increment )$/;"	f
update_memory	hunt.c	/^void update_memory(CHAR_DATA *ch)$/;"	f
update_mprog_flags	olc_act.c	/^void update_mprog_flags( MOB_INDEX_DATA *pMob )$/;"	f
update_oprog_flags	olc_act.c	/^void update_oprog_flags( OBJ_INDEX_DATA *pObj )$/;"	f
update_perm_hp_mana_move	stats.c	/^void update_perm_hp_mana_move(CHAR_DATA *ch)$/;"	f
update_pos	fight.c	/^void update_pos( CHAR_DATA *victim )$/;"	f
update_relic_bonus	religion.c	/^void update_relic_bonus()$/;"	f
update_room_fighting	update.c	/^void update_room_fighting( ROOM_INDEX_DATA *room )$/;"	f
update_rprog_flags	olc_act.c	/^void update_rprog_flags( ROOM_INDEX_DATA *pRoom )$/;"	f
update_skill_costs	skills.c	/^void update_skill_costs()$/;"	f
update_wizlist	wizlist.c	/^void update_wizlist(CHAR_DATA *ch, int level)$/;"	f
utillib_capitalize	lua_arclib.c	/^static int utillib_capitalize( lua_State *LS )$/;"	f	file:
utillib_convert_time	lua_arclib.c	/^static int utillib_convert_time (lua_State *LS )$/;"	f	file:
utillib_format_color_string	lua_arclib.c	/^static int utillib_format_color_string( lua_State *LS )$/;"	f	file:
utillib_format_list	lua_arclib.c	/^static int utillib_format_list( lua_State *LS )$/;"	f	file:
utillib_func	lua_arclib.c	/^static int utillib_func (lua_State *LS, const char *funcname)$/;"	f	file:
utillib_pluralize	lua_arclib.c	/^static int utillib_pluralize( lua_State *LS )$/;"	f	file:
utillib_strlen_color	lua_arclib.c	/^static int utillib_strlen_color( lua_State *LS )$/;"	f	file:
utillib_trim	lua_arclib.c	/^static int utillib_trim (lua_State *LS )$/;"	f	file:
utillib_truncate_color_string	lua_arclib.c	/^static int utillib_truncate_color_string( lua_State *LS )$/;"	f	file:
uu	merc.h	1183;"	d
val	lua_arclib.h	/^    char *val;$/;"	m	struct:lua_extra_val
valid	lua_arclib.h	/^    bool (*valid)();$/;"	m	struct:lua_obj_type
valid	merc.h	/^	bool            valid;$/;"	m	struct:sort_table
valid	merc.h	/^	bool        valid;$/;"	m	struct:buf_type
valid	merc.h	/^	bool        valid;$/;"	m	struct:char_data
valid	merc.h	/^	bool        valid;$/;"	m	struct:descriptor_data
valid	merc.h	/^	bool        valid;$/;"	m	struct:obj_data
valid	merc.h	/^	bool        valid;$/;"	m	struct:prog_list
valid	merc.h	/^	bool    valid;$/;"	m	struct:ban_data
valid	merc.h	/^	bool    valid;$/;"	m	struct:gen_data
valid	merc.h	/^	bool    valid;$/;"	m	struct:note_data
valid	merc.h	/^	bool valid;$/;"	m	struct:extra_descr_data
valid	merc.h	/^    bool	valid;$/;"	m	struct:wiz_data
valid	merc.h	/^    bool        valid;$/;"	m	struct:affect_data
valid	merc.h	/^    bool        valid;$/;"	m	struct:pc_data
valid	merc.h	/^    bool    valid;$/;"	m	struct:mem_data
valid	merc.h	/^    bool valid;$/;"	m	struct:portal_data
valid	merc.h	/^    bool valid;$/;"	m	struct:quest_data
valid	merc.h	/^   bool   valid;$/;"	m	struct:crime_data
valid_UD	lua_arclib.c	/^bool valid_UD( const char *ud )$/;"	f
value	grep.c	/^    int value;$/;"	m	struct:grep_data	file:
value	merc.h	/^	int         value   [5];$/;"	m	struct:obj_data
value	merc.h	/^	int         value[5];$/;"	m	struct:obj_index_data
value	mudconfig.h	/^    void *value;$/;"	m	struct:config_data_entry
variable_name_t	protocol.h	/^} variable_name_t;$/;"	t	typeref:struct:__anon10
variable_t	protocol.h	/^} variable_t;$/;"	t	typeref:enum:__anon9
verb	merc.h	/^	char *  verb;$/;"	m	struct:stance_type
version	merc.h	/^	sh_int      version;$/;"	m	struct:char_data
vict_found	merc.h	/^	char *    vict_found;$/;"	m	struct:social_type
victim	hunt.c	/^    struct char_data  **victim;$/;"	m	struct:hunting_data	typeref:struct:hunting_data::char_data	file:
victim	religion.h	/^    CHAR_DATA *victim;$/;"	m	struct:prayer_data
victim_level	merc.h	/^    sh_int victim_level;          \/* Level of victim *\/$/;"	m	struct:penalty_data
victim_name	merc.h	/^    char *victim_name;            \/* Name of victim *\/$/;"	m	struct:penalty_data
violence_update	fight.c	/^void violence_update( void )$/;"	f
visited	hunt.c	/^    int   visited;$/;"	m	struct:nodes	file:
vnum	alchemy.c	/^    int vnum;$/;"	m	struct:herb_type	file:
vnum	crafting.c	/^    int vnum;$/;"	m	struct:materials_type	file:
vnum	merc.h	/^	    int          vnum;$/;"	m	union:exit_data::__anon5
vnum	merc.h	/^	int         vnum;       \/* OLC *\/ \/* Area vnum  *\/$/;"	m	struct:area_data
vnum	merc.h	/^	int         vnum;$/;"	m	struct:obj_index_data
vnum	merc.h	/^	int         vnum;$/;"	m	struct:prog_code
vnum	merc.h	/^	int      vnum;$/;"	m	struct:mob_index_data_old
vnum	merc.h	/^	int  vnum;$/;"	m	struct:weapon_type
vnum	merc.h	/^    int         vnum;$/;"	m	struct:mob_index_data
vnum	merc.h	/^    int      vnum;$/;"	m	struct:room_index_data
vnum	merc.h	/^    int vnum;$/;"	m	struct:portal_data
vnum	merc.h	/^    int vnum;$/;"	m	struct:prog_list
vnum	quest.c	/^    int vnum;$/;"	m	struct:quest_item	file:
vnum	remort.c	/^    int vnum;$/;"	m	struct:remort_chamber	file:
vnum	tattoo.c	/^    int vnum;$/;"	m	struct:tattoo_data	file:
vnum_shift	aclone.c	/^static int vnum_shift = 0;$/;"	v	file:
vnum_shift	vshift.c	/^static int vnum_shift = 0;$/;"	v	file:
vuln	merc.h	/^	tflag    vuln;           \/* vuln bits for the race *\/$/;"	m	struct:race_type
vuln_flags	merc.h	/^	tflag        vuln_flags;$/;"	m	struct:char_data
vuln_flags	merc.h	/^	tflag        vuln_flags;$/;"	m	struct:mob_index_data_old
vuln_flags	merc.h	/^    tflag       vuln_flags;$/;"	m	struct:mob_index_data
vuln_flags	tables.c	/^const struct flag_type vuln_flags[] =$/;"	v	typeref:struct:flag_type
vv	merc.h	1184;"	d
wait	merc.h	/^	sh_int      wait;$/;"	m	struct:char_data
wait_for_auth	db.c	/^bool            wait_for_auth = AUTH_STATUS_ENABLED;$/;"	v
wait_list	remort.c	/^REMORT_TABLE *wait_list;$/;"	v
wants_to_rescue	fight.c	/^bool wants_to_rescue( CHAR_DATA *ch )$/;"	f
war	warfare.c	/^WAR_DATA war;$/;"	v
war_data	warfare.h	/^struct war_data$/;"	s
war_end	warfare.c	/^void war_end( bool success )$/;"	f
war_kills	merc.h	/^	int                 war_kills;$/;"	m	struct:pc_data
war_list	warfare.c	/^char * war_list[] =$/;"	v
war_remove	warfare.c	/^void war_remove( CHAR_DATA *ch, bool killed )$/;"	f
war_time_left	warfare.h	/^   int war_time_left;$/;"	m	struct:war_data
war_update	warfare.c	/^void war_update( void )$/;"	f
warfare	merc.h	/^	int warfare[3];         \/* {5 *\/$/;"	m	struct:pc_data
warfare	warfare.c	/^void warfare( char *argument )$/;"	f
warfare_hp	merc.h	/^	int warfare_hp;$/;"	m	struct:pc_data
warfare_mana	merc.h	/^	int warfare_mana;$/;"	m	struct:pc_data
warfare_move	merc.h	/^	int warfare_move;$/;"	m	struct:pc_data
warfare_text	merc.h	/^	int warfare_text[3];    \/* {6 *\/$/;"	m	struct:pc_data
warpoints	merc.h	/^	int		    warpoints;$/;"	m	struct:pc_data
was_in_room	merc.h	/^	ROOM_INDEX_DATA *   was_in_room;$/;"	m	struct:char_data
was_obj_cast	magic.c	/^bool was_obj_cast = FALSE;$/;"	v
was_wish_cast	magic.c	/^bool was_wish_cast = FALSE;$/;"	v
weak_effect	breath.c	/^void weak_effect( void *vo, int level, int dam, int target )$/;"	f
wealth	merc.h	/^	long        wealth;$/;"	m	struct:mob_index_data_old
wealth_percent	merc.h	/^    sh_int      wealth_percent;$/;"	m	struct:mob_index_data
weapon	merc.h	/^	bool		weapon;$/;"	m	struct:stance_type
weapon	merc.h	/^    sh_int  weapon;         \/* First weapon         *\/$/;"	m	struct:class_type
weapon_base_damage	const.c	/^const int weapon_base_damage[] =$/;"	v
weapon_bit_name	handler.c	/^char* weapon_bit_name( int flag )$/;"	f
weapon_bits_name	handler.c	/^char* weapon_bits_name( long flag )$/;"	f
weapon_class	tables.c	/^const struct flag_type weapon_class[] =$/;"	v	typeref:struct:flag_type
weapon_dam_spec	grep.c	/^int weapon_dam_spec( int level, bool twohanded )$/;"	f
weapon_flag_hit	fight.c	/^void weapon_flag_hit( CHAR_DATA *ch, CHAR_DATA *victim, OBJ_DATA *wield )$/;"	f
weapon_index_dam_spec	grep.c	/^int weapon_index_dam_spec( OBJ_INDEX_DATA *obj )$/;"	f
weapon_lookup	handler.c	/^int weapon_lookup (const char *name)$/;"	f
weapon_name	handler.c	/^char *weapon_name( int weapon_type)$/;"	f
weapon_table	const.c	/^const   struct  weapon_type weapon_table    []  =$/;"	v	typeref:struct:weapon_type
weapon_type	handler.c	/^int weapon_type (const char *name)$/;"	f
weapon_type	merc.h	/^struct weapon_type$/;"	s
weapon_type2	tables.c	/^const struct flag_type weapon_type2[] =$/;"	v	typeref:struct:flag_type
wear_bit	olc_act.c	/^    int	wear_bit;$/;"	m	struct:wear_type	file:
wear_bit	olc_act.c	/^int wear_bit(int loc)$/;"	f
wear_bit_name	handler.c	/^char* wear_bit_name( int flag )$/;"	f
wear_bits	redit-ilab.c	/^	int wear_bits; \/* the ITEM_ bit set in the item *\/$/;"	m	struct:wear_location	file:
wear_bits_name	handler.c	/^char* wear_bits_name( tflag flag )$/;"	f
wear_flags	merc.h	/^	tflag         wear_flags;$/;"	m	struct:obj_data
wear_flags	merc.h	/^	tflag       wear_flags;$/;"	m	struct:obj_index_data
wear_flags	tables.c	/^const struct flag_type wear_flags[] =$/;"	v	typeref:struct:flag_type
wear_loc	merc.h	/^	sh_int      wear_loc;$/;"	m	struct:obj_data
wear_loc	olc_act.c	/^    int	wear_loc;$/;"	m	struct:wear_type	file:
wear_loc	olc_act.c	/^int wear_loc(int bits, int count)$/;"	f
wear_loc1	redit-ilab.c	/^	int wear_loc1; \/* where is this worn *\/$/;"	m	struct:wear_location	file:
wear_loc2	redit-ilab.c	/^	int wear_loc2; \/* WEAR_NONE or secondary location (i.e. left ring-finger) *\/$/;"	m	struct:wear_location	file:
wear_loc_flags	tables.c	/^const struct flag_type wear_loc_flags[] =$/;"	v	typeref:struct:flag_type
wear_loc_strings	tables.c	/^const struct flag_type wear_loc_strings[] =$/;"	v	typeref:struct:flag_type
wear_location	redit-ilab.c	/^struct wear_location$/;"	s	file:
wear_location_info	act_info.c	/^char* wear_location_info( int pos )$/;"	f
wear_locations	redit-ilab.c	/^const struct wear_location wear_locations [] =$/;"	v	typeref:struct:wear_location
wear_obj	act_obj.c	/^void wear_obj( CHAR_DATA *ch, OBJ_DATA *obj, bool fReplace )$/;"	f
wear_table	olc_act.c	/^const struct wear_type wear_table[] =$/;"	v	typeref:struct:wear_type
wear_type	olc_act.c	/^struct wear_type$/;"	s	file:
weather_data	merc.h	/^struct  weather_data$/;"	s
weather_info	db.c	/^WEATHER_DATA    weather_info;$/;"	v
weather_update	update.c	/^void weather_update( void )$/;"	f
weight	merc.h	/^	sh_int      weight;$/;"	m	struct:obj_data
weight	merc.h	/^	sh_int      weight;$/;"	m	struct:obj_index_data
when	merc.h	/^    time_t  when;$/;"	m	struct:mem_data
where	merc.h	/^    sh_int      where;$/;"	m	struct:affect_data
where_name	act_info.c	/^char *  const   where_name  [] =$/;"	v
who_color	merc.h	/^    char *   who_color;$/;"	m	struct:clan_data
who_compare	act_info.c	/^int who_compare( const void* a, const void* b )$/;"	f
who_name	merc.h	/^	char    who_name[9];$/;"	m	struct:pc_race_type
who_name	merc.h	/^    char    who_name    [4];    \/* Three-letter name for 'who'  *\/$/;"	m	struct:class_type
who_name	merc.h	/^    char *   who_name;$/;"	m	struct:clan_data
who_name	merc.h	/^    char *   who_name;$/;"	m	struct:clan_rank_data
who_show_char	act_info.c	/^void who_show_char( CHAR_DATA *ch, CHAR_DATA *wch, BUFFER *output )$/;"	f
wimpy	merc.h	/^	sh_int      wimpy;$/;"	m	struct:char_data
wis_app_field	stats.c	/^int wis_app_field(int x)$/;"	f
wiz_data	merc.h	/^struct	wiz_data$/;"	s
wiz_free	recycle.c	/^WIZ_DATA *wiz_free;$/;"	v
wiz_list	wizlist.c	/^WIZ_DATA *wiz_list;$/;"	v
wiz_titles	wizlist.c	/^char *	const	wiz_titles	[] =$/;"	v
wizlock	comm.c	/^bool            wizlock;        \/* Game is wizlocked        *\/$/;"	v
wiznet	act_wiz.c	/^void wiznet(char *string, CHAR_DATA *ch, OBJ_DATA *obj,$/;"	f
wiznet	merc.h	/^	int wiznet[3];          \/* {V *\/$/;"	m	struct:pc_data
wiznet	merc.h	/^	tflag        wiznet; \/* wiz stuff *\/$/;"	m	struct:char_data
wiznet_lookup	handler.c	/^long wiznet_lookup (const char *name)$/;"	f
wiznet_table	const.c	/^const   struct wiznet_type      wiznet_table    []              =$/;"	v	typeref:struct:wiznet_type
wiznet_type	merc.h	/^struct wiznet_type$/;"	s
write_auth_file	auth.c	/^void write_auth_file( FILE *fpout, AUTH_LIST *list )$/;"	f
write_buffer_to_file	buffer_util.c	/^bool write_buffer_to_file( DBUFFER *buf, FILE *fp )$/;"	f
write_last_command	comm.c	/^void write_last_command ()$/;"	f
write_level	merc.h	/^	int write_level;       \/* minimum level to post notes *\/$/;"	m	struct:board_data
write_to_buffer	comm.c	/^void write_to_buffer( DESCRIPTOR_DATA *d, const char *txt, int length )$/;"	f
write_to_descriptor	comm.c	/^int write_to_descriptor( int desc, char *txt, int length )$/;"	f
ww	merc.h	1185;"	d
xx	merc.h	1186;"	d
year	merc.h	/^	int     year;$/;"	m	struct:time_info_data
yy	merc.h	1187;"	d
zone	merc.h	/^	AREA_DATA *     zone;$/;"	m	struct:char_data
zz	merc.h	1188;"	d
